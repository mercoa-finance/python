# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class OcrCustomizationRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import OcrCustomizationRequest

    OcrCustomizationRequest(
        line_items=True,
        collapse_line_items=True,
        invoice_metadata=True,
        line_item_metadata=True,
        line_item_gl_account_id=True,
        predict_metadata=True,
        tax_and_shipping_as_line_items=True,
        split_documents=True,
    )
    """

    line_items: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="lineItems")] = pydantic.Field(
        default=None
    )
    """
    Extract line items from the invoice. Defaults to true.
    """

    collapse_line_items: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="collapseLineItems")
    ] = pydantic.Field(default=None)
    """
    If true, the line items will be collapsed into a single line item. Defaults to false.
    """

    invoice_metadata: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="invoiceMetadata")] = (
        pydantic.Field(default=None)
    )
    """
    Pull custom metadata at the invoice level. Defaults to true.
    """

    line_item_metadata: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="lineItemMetadata")] = (
        pydantic.Field(default=None)
    )
    """
    Pull custom metadata at the line item level. Defaults to true.
    """

    line_item_gl_account_id: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="lineItemGlAccountId")
    ] = pydantic.Field(default=None)
    """
    Pull GL Account ID at the line item level. Defaults to true.
    """

    predict_metadata: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="predictMetadata")] = (
        pydantic.Field(default=None)
    )
    """
    Use AI to predict metadata from historical data. Defaults to true.
    """

    tax_and_shipping_as_line_items: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="taxAndShippingAsLineItems")
    ] = pydantic.Field(default=None)
    """
    Pull tax and shipping information as line items. Defaults to true. If false, tax and shipping will extracted as invoice level fields.
    """

    split_documents: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="splitDocuments")] = (
        pydantic.Field(default=None)
    )
    """
    Use AI to intelligently split documents into multiple subdocuments. Defaults to false.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
