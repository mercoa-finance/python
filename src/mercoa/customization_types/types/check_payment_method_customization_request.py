# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...invoice_types.types.check_delivery_method import CheckDeliveryMethod
from .generic_payment_method_customization_request import GenericPaymentMethodCustomizationRequest


class CheckPaymentMethodCustomizationRequest(GenericPaymentMethodCustomizationRequest):
    default_delivery_method: typing_extensions.Annotated[
        typing.Optional[CheckDeliveryMethod], FieldMetadata(alias="defaultDeliveryMethod")
    ] = pydantic.Field(default=None)
    """
    The default delivery method for this payment method.
    """

    available_delivery_methods: typing_extensions.Annotated[
        typing.Optional[typing.List[CheckDeliveryMethod]], FieldMetadata(alias="availableDeliveryMethods")
    ] = pydantic.Field(default=None)
    """
    The delivery methods that are available for this payment method.
    """

    print_description: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="printDescription")] = (
        pydantic.Field(default=None)
    )
    """
    If true, the check will be printed with the description.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
