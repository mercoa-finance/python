# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class InvoiceCustomizationResponse(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.customization_types import InvoiceCustomizationResponse

    InvoiceCustomizationResponse(
        hide_address=False,
        hide_qr_code=False,
        hide_bank_details=False,
        hide_payment_link=False,
    )
    """

    hide_address: typing_extensions.Annotated[bool, FieldMetadata(alias="hideAddress")] = pydantic.Field()
    """
    If true, the address information will be hidden from generated invoice PDFs. Defaults to false.
    """

    hide_qr_code: typing_extensions.Annotated[bool, FieldMetadata(alias="hideQrCode")] = pydantic.Field()
    """
    If true, the QR code will be hidden from generated invoice PDFs. Defaults to false.
    """

    hide_bank_details: typing_extensions.Annotated[bool, FieldMetadata(alias="hideBankDetails")] = pydantic.Field()
    """
    If true, the bank account details will be hidden from generated invoice PDFs. Defaults to false.
    """

    hide_payment_link: typing_extensions.Annotated[bool, FieldMetadata(alias="hidePaymentLink")] = pydantic.Field()
    """
    If true, the payment link will be hidden from generated invoice PDFs. Defaults to false.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
