# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .ocr_job_id import OcrJobId
from .ocr_job_status import OcrJobStatus
from .ocr_page_range import OcrPageRange
from .ocr_response import OcrResponse


class OcrJobResponse(UniversalBaseModel):
    job_id: typing_extensions.Annotated[OcrJobId, FieldMetadata(alias="jobId")]
    linked_job_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[OcrJobId]], FieldMetadata(alias="linkedJobIds")
    ] = pydantic.Field(default=None)
    """
    The IDs of any OCR jobs that are processing other subdocuments of the same document.
    """

    status: OcrJobStatus = pydantic.Field()
    """
    The status of the OCR job.
    """

    page_range: typing_extensions.Annotated[typing.Optional[OcrPageRange], FieldMetadata(alias="pageRange")] = (
        pydantic.Field(default=None)
    )
    """
    The start and end page numbers of the corresponding subdocument (zero-indexed, inclusive). If not provided, the document was not split during OCR.
    """

    data: typing.Optional[OcrResponse] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
