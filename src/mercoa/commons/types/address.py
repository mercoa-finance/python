# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import typing
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Address(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.commons import Address

    Address(
        address_line_1="123 Main St",
        address_line_2="Unit 1",
        city="San Francisco",
        state_or_province="CA",
        postal_code="94105",
        country="US",
    )
    """

    address_line_1: typing_extensions.Annotated[str, FieldMetadata(alias="addressLine1")]
    address_line_2: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressLine2")] = None
    city: str
    state_or_province: typing_extensions.Annotated[str, FieldMetadata(alias="stateOrProvince")] = pydantic.Field()
    """
    State or province code. Must be in the format XX.
    """

    postal_code: typing_extensions.Annotated[str, FieldMetadata(alias="postalCode")] = pydantic.Field()
    """
    Postal code. Must be in the format XXXXX or XXXXX-XXXX.
    """

    country: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
