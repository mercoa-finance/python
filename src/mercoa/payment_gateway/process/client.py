# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...commons.types.order_direction import OrderDirection
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...payment_gateway_types.types.payment_gateway_job_order_by_field import PaymentGatewayJobOrderByField
from ...payment_gateway_types.types.payment_gateway_job_status import PaymentGatewayJobStatus
from ...payment_gateway_types.types.process_payment_gateway_request import ProcessPaymentGatewayRequest
from ...payment_gateway_types.types.process_payment_gateway_response import ProcessPaymentGatewayResponse
from ...payment_gateway_types.types.search_payment_gateway_process_jobs_response import (
    SearchPaymentGatewayProcessJobsResponse,
)
from .raw_client import AsyncRawProcessClient, RawProcessClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProcessClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProcessClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProcessClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProcessClient
        """
        return self._raw_client

    def find(
        self,
        *,
        status: typing.Optional[PaymentGatewayJobStatus] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        order_by: typing.Optional[PaymentGatewayJobOrderByField] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchPaymentGatewayProcessJobsResponse:
        """
        Search payment gateway process jobs

        Parameters
        ----------
        status : typing.Optional[PaymentGatewayJobStatus]
            Filter jobs by status

        start_date : typing.Optional[dt.datetime]
            Start date filter for job creation time

        end_date : typing.Optional[dt.datetime]
            End date filter for job creation time

        order_by : typing.Optional[PaymentGatewayJobOrderByField]
            Field to order jobs by. Defaults to CREATED_AT.

        order_direction : typing.Optional[OrderDirection]
            Direction to order jobs by. Defaults to desc.

        limit : typing.Optional[int]
            Number of jobs to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[str]
            The ID of the job to start after. If not provided, the first page of jobs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchPaymentGatewayProcessJobsResponse

        Examples
        --------
        import datetime

        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.payment_gateway.process.find(
            status="FAILED",
            start_date=datetime.datetime.fromisoformat(
                "2024-01-01 00:00:00+00:00",
            ),
            end_date=datetime.datetime.fromisoformat(
                "2024-12-31 23:59:59+00:00",
            ),
        )
        """
        _response = self._raw_client.find(
            status=status,
            start_date=start_date,
            end_date=end_date,
            order_by=order_by,
            order_direction=order_direction,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    def create(
        self, *, request: ProcessPaymentGatewayRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> ProcessPaymentGatewayResponse:
        """
        Create a job to process a payment through a payment gateway

        Parameters
        ----------
        request : ProcessPaymentGatewayRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessPaymentGatewayResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.payment_gateway_types import (
            ProcessPaymentGatewayAchDetails,
            ProcessPaymentGatewayCardDetails_Direct,
            ProcessPaymentGatewayRequest_Document,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.payment_gateway.process.create(
            request=ProcessPaymentGatewayRequest_Document(
                document="data:application/pdf;base64,JVBERi0xLjEKJcKlwrHDqwoKMSAwIG9iagogIDw8IC9UeXBlIC9DYXRhbG9nCiAgICAgL1BhZ2VzIDIgMCBSCiAgPj4KZW5kb2JqCgoyIDAgb2JqCiAgPDwgL1R5cGUgL1BhZ2VzCiAgICAgL0tpZHMgWzMgMCBSXQogICAgIC9Db3VudCAxCiAgICAgL01lZGlhQm94IFswIDAgMzAwIDE0NF0KICA+PgplbmRvYmoKCjMgMCBvYmoKICA8PCAgL1R5cGUgL1BhZ2UKICAgICAgL1BhcmVudCAyIDAgUgogICAgICAvUmVzb3VyY2VzCiAgICAgICA8PCAvRm9udAogICAgICAgICAgIDw8IC9GMQogICAgICAgICAgICAgICA8PCAvVHlwZSAvRm9udAogICAgICAgICAgICAgICAgICAvU3VidHlwZSAvVHlwZTEKICAgICAgICAgICAgICAgICAgL0Jhc2VGb250IC9UaW1lcy1Sb21hbgogICAgICAgICAgICAgICA+PgogICAgICAgICAgID4+CiAgICAgICA+PgogICAgICAvQ29udGVudHMgNCAwIFIKICA+PgplbmRvYmoKCjQgMCBvYmoKICA8PCAvTGVuZ3RoIDU1ID4+CnN0cmVhbQogIEJUCiAgICAvRjEgMTggVGYKICAgIDAgMCBUZAogICAgKEhlbGxvIFdvcmxkKSBUagogIEVUCmVuZHN0cmVhbQplbmRvYmoKCnhyZWYKMCA1CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxOCAwMDAwMCBuIAowMDAwMDAwMDc3IDAwMDAwIG4gCjAwMDAwMDAxNzggMDAwMDAgbiAKMDAwMDAwMDQ1NyAwMDAwMCBuIAp0cmFpbGVyCiAgPDwgIC9Sb290IDEgMCBSCiAgICAgIC9TaXplIDUKICA+PgpzdGFydHhyZWYKNTY1CiUlRU9GCg==",
                card_details=ProcessPaymentGatewayCardDetails_Direct(
                    first_name="John",
                    last_name="Doe",
                    card_number="4242424242424242",
                    expiration_month=10,
                    expiration_year=2025,
                    cvv="123",
                    postal_code="12345",
                    country="US",
                    ach_details=ProcessPaymentGatewayAchDetails(
                        routing_number="123456789",
                        account_number="987654321",
                        account_name="John Doe",
                    ),
                ),
            ),
        )
        """
        _response = self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    def get(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProcessPaymentGatewayResponse:
        """
        Get the status of a payment gateway processing job

        Parameters
        ----------
        job_id : str
            The ID of the payment gateway processing job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessPaymentGatewayResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.payment_gateway.process.get(
            job_id="job_1a92b5f7-f522-435e-a953-fd649363730a",
        )
        """
        _response = self._raw_client.get(job_id, request_options=request_options)
        return _response.data


class AsyncProcessClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProcessClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProcessClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProcessClient
        """
        return self._raw_client

    async def find(
        self,
        *,
        status: typing.Optional[PaymentGatewayJobStatus] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        order_by: typing.Optional[PaymentGatewayJobOrderByField] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchPaymentGatewayProcessJobsResponse:
        """
        Search payment gateway process jobs

        Parameters
        ----------
        status : typing.Optional[PaymentGatewayJobStatus]
            Filter jobs by status

        start_date : typing.Optional[dt.datetime]
            Start date filter for job creation time

        end_date : typing.Optional[dt.datetime]
            End date filter for job creation time

        order_by : typing.Optional[PaymentGatewayJobOrderByField]
            Field to order jobs by. Defaults to CREATED_AT.

        order_direction : typing.Optional[OrderDirection]
            Direction to order jobs by. Defaults to desc.

        limit : typing.Optional[int]
            Number of jobs to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[str]
            The ID of the job to start after. If not provided, the first page of jobs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchPaymentGatewayProcessJobsResponse

        Examples
        --------
        import asyncio
        import datetime

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_gateway.process.find(
                status="FAILED",
                start_date=datetime.datetime.fromisoformat(
                    "2024-01-01 00:00:00+00:00",
                ),
                end_date=datetime.datetime.fromisoformat(
                    "2024-12-31 23:59:59+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            status=status,
            start_date=start_date,
            end_date=end_date,
            order_by=order_by,
            order_direction=order_direction,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self, *, request: ProcessPaymentGatewayRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> ProcessPaymentGatewayResponse:
        """
        Create a job to process a payment through a payment gateway

        Parameters
        ----------
        request : ProcessPaymentGatewayRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessPaymentGatewayResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.payment_gateway_types import (
            ProcessPaymentGatewayAchDetails,
            ProcessPaymentGatewayCardDetails_Direct,
            ProcessPaymentGatewayRequest_Document,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_gateway.process.create(
                request=ProcessPaymentGatewayRequest_Document(
                    document="data:application/pdf;base64,JVBERi0xLjEKJcKlwrHDqwoKMSAwIG9iagogIDw8IC9UeXBlIC9DYXRhbG9nCiAgICAgL1BhZ2VzIDIgMCBSCiAgPj4KZW5kb2JqCgoyIDAgb2JqCiAgPDwgL1R5cGUgL1BhZ2VzCiAgICAgL0tpZHMgWzMgMCBSXQogICAgIC9Db3VudCAxCiAgICAgL01lZGlhQm94IFswIDAgMzAwIDE0NF0KICA+PgplbmRvYmoKCjMgMCBvYmoKICA8PCAgL1R5cGUgL1BhZ2UKICAgICAgL1BhcmVudCAyIDAgUgogICAgICAvUmVzb3VyY2VzCiAgICAgICA8PCAvRm9udAogICAgICAgICAgIDw8IC9GMQogICAgICAgICAgICAgICA8PCAvVHlwZSAvRm9udAogICAgICAgICAgICAgICAgICAvU3VidHlwZSAvVHlwZTEKICAgICAgICAgICAgICAgICAgL0Jhc2VGb250IC9UaW1lcy1Sb21hbgogICAgICAgICAgICAgICA+PgogICAgICAgICAgID4+CiAgICAgICA+PgogICAgICAvQ29udGVudHMgNCAwIFIKICA+PgplbmRvYmoKCjQgMCBvYmoKICA8PCAvTGVuZ3RoIDU1ID4+CnN0cmVhbQogIEJUCiAgICAvRjEgMTggVGYKICAgIDAgMCBUZAogICAgKEhlbGxvIFdvcmxkKSBUagogIEVUCmVuZHN0cmVhbQplbmRvYmoKCnhyZWYKMCA1CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxOCAwMDAwMCBuIAowMDAwMDAwMDc3IDAwMDAwIG4gCjAwMDAwMDAxNzggMDAwMDAgbiAKMDAwMDAwMDQ1NyAwMDAwMCBuIAp0cmFpbGVyCiAgPDwgIC9Sb290IDEgMCBSCiAgICAgIC9TaXplIDUKICA+PgpzdGFydHhyZWYKNTY1CiUlRU9GCg==",
                    card_details=ProcessPaymentGatewayCardDetails_Direct(
                        first_name="John",
                        last_name="Doe",
                        card_number="4242424242424242",
                        expiration_month=10,
                        expiration_year=2025,
                        cvv="123",
                        postal_code="12345",
                        country="US",
                        ach_details=ProcessPaymentGatewayAchDetails(
                            routing_number="123456789",
                            account_number="987654321",
                            account_name="John Doe",
                        ),
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    async def get(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProcessPaymentGatewayResponse:
        """
        Get the status of a payment gateway processing job

        Parameters
        ----------
        job_id : str
            The ID of the payment gateway processing job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProcessPaymentGatewayResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_gateway.process.get(
                job_id="job_1a92b5f7-f522-435e-a953-fd649363730a",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(job_id, request_options=request_options)
        return _response.data
