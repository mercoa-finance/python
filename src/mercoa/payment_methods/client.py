# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..entity_types.types.entity_id import EntityId
from ..payment_method_types.types.payment_method_id import PaymentMethodId
from ..payment_method_types.types.payment_method_type import PaymentMethodType
from ..payment_method_types.types.payment_method_with_entity_find_response import PaymentMethodWithEntityFindResponse
from .raw_client import AsyncRawPaymentMethodsClient, RawPaymentMethodsClient


class PaymentMethodsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPaymentMethodsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPaymentMethodsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPaymentMethodsClient
        """
        return self._raw_client

    def find(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[PaymentMethodId] = None,
        type: typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]] = None,
        entity_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodWithEntityFindResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            Number of payment methods to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[PaymentMethodId]
            The ID of the payment method to start after. If not provided, the first page of payment methods will be returned.

        type : typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]]
            Type of payment method to filter

        entity_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Entity ID to filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodWithEntityFindResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.payment_methods.find()
        """
        _response = self._raw_client.find(
            limit=limit, starting_after=starting_after, type=type, entity_id=entity_id, request_options=request_options
        )
        return _response.data


class AsyncPaymentMethodsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPaymentMethodsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPaymentMethodsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPaymentMethodsClient
        """
        return self._raw_client

    async def find(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[PaymentMethodId] = None,
        type: typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]] = None,
        entity_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodWithEntityFindResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            Number of payment methods to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[PaymentMethodId]
            The ID of the payment method to start after. If not provided, the first page of payment methods will be returned.

        type : typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]]
            Type of payment method to filter

        entity_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Entity ID to filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodWithEntityFindResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.payment_methods.find()


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            limit=limit, starting_after=starting_after, type=type, entity_id=entity_id, request_options=request_options
        )
        return _response.data
