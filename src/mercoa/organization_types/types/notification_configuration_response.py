# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...entity_types.types.notification_type import NotificationType


class NotificationConfigurationResponse_Invoice(UniversalBaseModel):
    notification_type: typing_extensions.Annotated[
        typing.Literal["invoice"], FieldMetadata(alias="notificationType")
    ] = "invoice"
    type: NotificationType
    url: str
    subject: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


NotificationConfigurationResponse = NotificationConfigurationResponse_Invoice
