# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...entity_types.types.entity_id import EntityId
from .color_scheme_response import ColorSchemeResponse
from .email_provider_response import EmailProviderResponse
from .external_accounting_system_provider_response import ExternalAccountingSystemProviderResponse
from .metadata_schema import MetadataSchema
from .notification_email_template_response import NotificationEmailTemplateResponse
from .onboarding_options_response import OnboardingOptionsResponse
from .organization_id import OrganizationId
from .payment_methods_response import PaymentMethodsResponse
from .role_permission_response import RolePermissionResponse


class OrganizationResponse(UniversalBaseModel):
    id: OrganizationId
    sandbox: bool
    name: str
    logo_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="logoUrl")] = None
    favicon_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="faviconUrl")] = None
    website_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="websiteUrl")] = None
    support_email: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="supportEmail")] = None
    payment_methods: typing_extensions.Annotated[
        typing.Optional[PaymentMethodsResponse], FieldMetadata(alias="paymentMethods")
    ] = None
    email_provider: typing_extensions.Annotated[
        typing.Optional[EmailProviderResponse], FieldMetadata(alias="emailProvider")
    ] = None
    external_accounting_system_provider: typing_extensions.Annotated[
        typing.Optional[ExternalAccountingSystemProviderResponse],
        FieldMetadata(alias="externalAccountingSystemProvider"),
    ] = None
    color_scheme: typing_extensions.Annotated[
        typing.Optional[ColorSchemeResponse], FieldMetadata(alias="colorScheme")
    ] = None
    payee_onboarding_options: typing_extensions.Annotated[
        typing.Optional[OnboardingOptionsResponse], FieldMetadata(alias="payeeOnboardingOptions")
    ] = None
    payor_onboarding_options: typing_extensions.Annotated[
        typing.Optional[OnboardingOptionsResponse], FieldMetadata(alias="payorOnboardingOptions")
    ] = None
    metadata_schema: typing_extensions.Annotated[
        typing.Optional[typing.List[MetadataSchema]], FieldMetadata(alias="metadataSchema")
    ] = None
    notification_email_template: typing_extensions.Annotated[
        typing.Optional[NotificationEmailTemplateResponse], FieldMetadata(alias="notificationEmailTemplate")
    ] = None
    custom_domains: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="customDomains")
    ] = None
    organization_entity_id: typing_extensions.Annotated[
        typing.Optional[EntityId], FieldMetadata(alias="organizationEntityId")
    ] = None
    role_permissions: typing_extensions.Annotated[
        typing.Optional[RolePermissionResponse], FieldMetadata(alias="rolePermissions")
    ] = None
    notifications_disabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="notificationsDisabled")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
