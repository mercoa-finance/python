# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ColorSchemeRequest(UniversalBaseModel):
    primary_color: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="primaryColor")] = None
    secondary_color: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="secondaryColor")] = None
    logo_background_color: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="logoBackgroundColor")
    ] = None
    rounded_corners: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="roundedCorners")] = None
    font_family: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fontFamily")] = None
    font_size: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fontSize")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
