# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...entity_types.types.entity_id import EntityId
from ...invoice_types.types.payment_destination_options import PaymentDestinationOptions
from ...payment_method_types.types.currency_code import CurrencyCode
from ...payment_method_types.types.payment_method_id import PaymentMethodId
from .fee_calculation_type import FeeCalculationType


class CalculateFeesRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.calculate import CalculateFeesRequest

    CalculateFeesRequest(
        amount=100.0,
        payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        payment_destination_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
    )
    """

    amount: float = pydantic.Field()
    """
    Total amount in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
    """

    currency: typing.Optional[CurrencyCode] = pydantic.Field(default=None)
    """
    Currency code for the amount. Defaults to USD.
    """

    creator_entity_id: typing_extensions.Annotated[
        typing.Optional[EntityId], FieldMetadata(alias="creatorEntityId")
    ] = pydantic.Field(default=None)
    """
    ID of the entity creating the invoice. If not provided, the fees will be calculated with the default pricing for the organization.
    """

    payment_source_id: typing_extensions.Annotated[PaymentMethodId, FieldMetadata(alias="paymentSourceId")] = (
        pydantic.Field()
    )
    """
    ID of payment source.
    """

    payment_destination_id: typing_extensions.Annotated[
        PaymentMethodId, FieldMetadata(alias="paymentDestinationId")
    ] = pydantic.Field()
    """
    ID of payment destination.
    """

    payment_destination_options: typing_extensions.Annotated[
        typing.Optional[PaymentDestinationOptions], FieldMetadata(alias="paymentDestinationOptions")
    ] = pydantic.Field(default=None)
    """
    Options for the payment destination. Depending on the payment destination, this may include things such as check delivery method.
    """

    type: typing.Optional[FeeCalculationType] = pydantic.Field(default=None)
    """
    Type of payment to calculate fees for. Defaults to PAYABLE (Accounts Payable).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
