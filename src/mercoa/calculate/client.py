# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..invoice_types.types.invoice_fees_response import InvoiceFeesResponse
from .raw_client import AsyncRawCalculateClient, RawCalculateClient
from .types.calculate_fees_request import CalculateFeesRequest
from .types.calculate_payment_timing_request import CalculatePaymentTimingRequest
from .types.calculate_payment_timing_response import CalculatePaymentTimingResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CalculateClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCalculateClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCalculateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCalculateClient
        """
        return self._raw_client

    def fee(
        self, *, request: CalculateFeesRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> InvoiceFeesResponse:
        """
        Calculate the estimated fees associated with an payment given the amount, payment source, and disbursement method. Can be used to calculate fees for a payment before creating an invoice.

        Parameters
        ----------
        request : CalculateFeesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceFeesResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.calculate import CalculateFeesRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.calculate.fee(
            request=CalculateFeesRequest(
                amount=100.0,
                payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                payment_destination_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            ),
        )
        """
        _response = self._raw_client.fee(request=request, request_options=request_options)
        return _response.data

    def payment_timing(
        self, *, request: CalculatePaymentTimingRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CalculatePaymentTimingResponse:
        """
        Calculate the estimated payment timing given the deduction date, payment source, and disbursement method. Can be used to calculate timing for a payment.

        Parameters
        ----------
        request : CalculatePaymentTimingRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CalculatePaymentTimingResponse

        Examples
        --------
        import datetime

        from mercoa import Mercoa
        from mercoa.calculate import EstimatedTiming

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.calculate.payment_timing(
            request=EstimatedTiming(
                estimated_deduction_date=datetime.datetime.fromisoformat(
                    "2024-01-02 00:00:00+00:00",
                ),
                payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                payment_destination_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            ),
        )
        """
        _response = self._raw_client.payment_timing(request=request, request_options=request_options)
        return _response.data


class AsyncCalculateClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCalculateClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCalculateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCalculateClient
        """
        return self._raw_client

    async def fee(
        self, *, request: CalculateFeesRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> InvoiceFeesResponse:
        """
        Calculate the estimated fees associated with an payment given the amount, payment source, and disbursement method. Can be used to calculate fees for a payment before creating an invoice.

        Parameters
        ----------
        request : CalculateFeesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceFeesResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.calculate import CalculateFeesRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.calculate.fee(
                request=CalculateFeesRequest(
                    amount=100.0,
                    payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                    payment_destination_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.fee(request=request, request_options=request_options)
        return _response.data

    async def payment_timing(
        self, *, request: CalculatePaymentTimingRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CalculatePaymentTimingResponse:
        """
        Calculate the estimated payment timing given the deduction date, payment source, and disbursement method. Can be used to calculate timing for a payment.

        Parameters
        ----------
        request : CalculatePaymentTimingRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CalculatePaymentTimingResponse

        Examples
        --------
        import asyncio
        import datetime

        from mercoa import AsyncMercoa
        from mercoa.calculate import EstimatedTiming

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.calculate.payment_timing(
                request=EstimatedTiming(
                    estimated_deduction_date=datetime.datetime.fromisoformat(
                        "2024-01-02 00:00:00+00:00",
                    ),
                    payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                    payment_destination_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.payment_timing(request=request, request_options=request_options)
        return _response.data
