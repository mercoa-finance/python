# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .transaction_id import TransactionId
from .transaction_status import TransactionStatus
import typing_extensions
from ...entity_types.types.entity_id import EntityId
from ...core.serialization import FieldMetadata
from ...entity_types.types.counterparty_response import CounterpartyResponse
from ...payment_method_types.types.payment_method_response import PaymentMethodResponse
from ...payment_method_types.types.payment_method_id import PaymentMethodId
import typing
from ...invoice_types.types.payment_destination_options import PaymentDestinationOptions
from ...invoice_types.types.invoice_fees_response import InvoiceFeesResponse
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class TransactionResponseBase(UniversalBaseModel):
    id: TransactionId
    status: TransactionStatus
    amount: int
    currency: str
    payer_id: typing_extensions.Annotated[EntityId, FieldMetadata(alias="payerId")]
    payer: CounterpartyResponse
    payment_source: typing_extensions.Annotated[PaymentMethodResponse, FieldMetadata(alias="paymentSource")]
    payment_source_id: typing_extensions.Annotated[PaymentMethodId, FieldMetadata(alias="paymentSourceId")]
    vendor_id: typing_extensions.Annotated[EntityId, FieldMetadata(alias="vendorId")]
    vendor: CounterpartyResponse
    payment_destination: typing_extensions.Annotated[PaymentMethodResponse, FieldMetadata(alias="paymentDestination")]
    payment_destination_id: typing_extensions.Annotated[PaymentMethodId, FieldMetadata(alias="paymentDestinationId")]
    payment_destination_options: typing_extensions.Annotated[
        typing.Optional[PaymentDestinationOptions],
        FieldMetadata(alias="paymentDestinationOptions"),
    ] = None
    fees: typing.Optional[InvoiceFeesResponse] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
