# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...entity_types.types.entity_id import EntityId


class EntityGroupUserSyncRequest(UniversalBaseModel):
    copy_users_from: typing_extensions.Annotated[typing.Optional[EntityId], FieldMetadata(alias="copyUsersFrom")] = (
        pydantic.Field(default=None)
    )
    """
    Entity ID / foreign ID of an entity currently in the group to copy users and roles from. 
    If not provided, users will be synced from the entity with the most users that has been updated most recently.
    """

    filter_roles: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="filterRoles")] = (
        pydantic.Field(default=None)
    )
    """
    List of roles to filter users by. If not provided, all users will be copied. If provided, only users with the provided roles will be copied.
    """

    add_users: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="addUsers")] = pydantic.Field(
        default=None
    )
    """
    If true, users will be added to entities if they are not found in the copyUsersFrom entity. Default is true.
    """

    remove_users: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="removeUsers")] = (
        pydantic.Field(default=None)
    )
    """
    If true, users will be removed from entities if they are not found in the copyUsersFrom entity. Default is false.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
