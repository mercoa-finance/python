# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...invoice_types.types.bnpl_loan_response import BnplLoanResponse
from ...invoice_types.types.bnpl_offer_request import BnplOfferRequest
from ...invoice_types.types.bnpl_offer_response import BnplOfferResponse
from ...invoice_types.types.invoice_id import InvoiceId
from .raw_client import AsyncRawBnplClient, RawBnplClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BnplClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBnplClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBnplClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBnplClient
        """
        return self._raw_client

    def offer(
        self,
        invoice_id: InvoiceId,
        *,
        request: BnplOfferRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BnplOfferResponse:
        """
        Get a BNPL offer for an invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request : BnplOfferRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BnplOfferResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import BnplOfferRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.bnpl.offer(
            invoice_id="in_286a1849-2e3c-48a4-ab5a-8b7940cc3a5b",
            request=BnplOfferRequest(
                cadence="WEEKLY",
                installments_start_date="2025-06-18",
                number_of_installments=4,
                payment_day_of_week="WEDNESDAY",
                down_payment_due_date="2025-06-11",
            ),
        )
        """
        _response = self._raw_client.offer(invoice_id, request=request, request_options=request_options)
        return _response.data

    def loan(self, loan_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> BnplLoanResponse:
        """
        Get information about a specific BNPL loan by loan ID

        Parameters
        ----------
        loan_id : str
            The ID of the loan to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BnplLoanResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.bnpl.loan(
            loan_id="684adb5d70a01b00596a3106",
        )
        """
        _response = self._raw_client.loan(loan_id, request_options=request_options)
        return _response.data


class AsyncBnplClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBnplClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBnplClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBnplClient
        """
        return self._raw_client

    async def offer(
        self,
        invoice_id: InvoiceId,
        *,
        request: BnplOfferRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BnplOfferResponse:
        """
        Get a BNPL offer for an invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request : BnplOfferRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BnplOfferResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import BnplOfferRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.bnpl.offer(
                invoice_id="in_286a1849-2e3c-48a4-ab5a-8b7940cc3a5b",
                request=BnplOfferRequest(
                    cadence="WEEKLY",
                    installments_start_date="2025-06-18",
                    number_of_installments=4,
                    payment_day_of_week="WEDNESDAY",
                    down_payment_due_date="2025-06-11",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.offer(invoice_id, request=request, request_options=request_options)
        return _response.data

    async def loan(self, loan_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> BnplLoanResponse:
        """
        Get information about a specific BNPL loan by loan ID

        Parameters
        ----------
        loan_id : str
            The ID of the loan to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BnplLoanResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.bnpl.loan(
                loan_id="684adb5d70a01b00596a3106",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.loan(loan_id, request_options=request_options)
        return _response.data
