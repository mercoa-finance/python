# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...commons.types.bulk_download_format import BulkDownloadFormat
from ...commons.types.bulk_download_response import BulkDownloadResponse
from ...commons.types.order_direction import OrderDirection
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_group_types.types.entity_group_id import EntityGroupId
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.entity_user_id import EntityUserId
from ...invoice_types.types.approver_action import ApproverAction
from ...invoice_types.types.bulk_invoice_approval_request import BulkInvoiceApprovalRequest
from ...invoice_types.types.bulk_invoice_approval_response import BulkInvoiceApprovalResponse
from ...invoice_types.types.bulk_invoice_creation_request import BulkInvoiceCreationRequest
from ...invoice_types.types.bulk_invoice_creation_response import BulkInvoiceCreationResponse
from ...invoice_types.types.bulk_invoice_update_request import BulkInvoiceUpdateRequest
from ...invoice_types.types.bulk_invoice_update_response import BulkInvoiceUpdateResponse
from ...invoice_types.types.invoice_date_filter import InvoiceDateFilter
from ...invoice_types.types.invoice_id import InvoiceId
from ...invoice_types.types.invoice_order_by_field import InvoiceOrderByField
from ...invoice_types.types.invoice_status import InvoiceStatus
from ...invoice_types.types.invoice_template_id import InvoiceTemplateId
from ...invoice_types.types.metadata_filter import MetadataFilter
from ...invoice_types.types.payment_type import PaymentType
from .raw_client import AsyncRawBulkClient, RawBulkClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BulkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBulkClient
        """
        return self._raw_client

    def create(
        self,
        *,
        request: BulkInvoiceCreationRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkInvoiceCreationResponse:
        """
        Create multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were created or failed to create.

        Parameters
        ----------
        request : BulkInvoiceCreationRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each invoice that is created. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkInvoiceCreationResponse

        Examples
        --------
        import datetime

        from mercoa import Mercoa
        from mercoa.invoice_types import (
            BulkInvoiceCreationRequest,
            InvoiceCreationWithEntityRequest,
            InvoiceLineItemCreationRequest,
            PaymentDestinationOptions_Check,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.bulk.create(
            request=BulkInvoiceCreationRequest(
                invoices=[
                    InvoiceCreationWithEntityRequest(
                        status="NEW",
                        amount=100.0,
                        currency="USD",
                        invoice_date=datetime.datetime.fromisoformat(
                            "2021-01-01 00:00:00+00:00",
                        ),
                        due_date=datetime.datetime.fromisoformat(
                            "2021-01-31 00:00:00+00:00",
                        ),
                        invoice_number="INV-123",
                        note_to_self="For the month of January",
                        payer_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                        vendor_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        payment_destination_id="pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                        payment_destination_options=PaymentDestinationOptions_Check(
                            delivery="MAIL",
                            print_description=True,
                        ),
                        line_items=[
                            InvoiceLineItemCreationRequest(
                                amount=100.0,
                                currency="USD",
                                description="Product A",
                                name="Product A",
                                quantity=1.0,
                                unit_price=100.0,
                                category="EXPENSE",
                                service_start_date=datetime.datetime.fromisoformat(
                                    "2021-01-01 00:00:00+00:00",
                                ),
                                service_end_date=datetime.datetime.fromisoformat(
                                    "2021-01-31 00:00:00+00:00",
                                ),
                                metadata={"key1": "value1", "key2": "value2"},
                                gl_account_id="600394",
                            )
                        ],
                        creator_entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        creator_user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                    )
                ],
            ),
        )
        """
        _response = self._raw_client.create(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    def update(
        self,
        *,
        request: BulkInvoiceUpdateRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkInvoiceUpdateResponse:
        """
        Update multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were updated or failed to update.

        Parameters
        ----------
        request : BulkInvoiceUpdateRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each invoice that is updated. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkInvoiceUpdateResponse

        Examples
        --------
        import datetime

        from mercoa import Mercoa
        from mercoa.invoice_types import (
            BulkInvoiceUpdateRequest,
            InvoiceLineItemUpdateRequest,
            InvoiceUpdateRequestWithId,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.bulk.update(
            request=BulkInvoiceUpdateRequest(
                invoices=[
                    InvoiceUpdateRequestWithId(
                        invoice_id="inv_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        status="NEW",
                        amount=100.0,
                        currency="USD",
                        due_date=datetime.datetime.fromisoformat(
                            "2024-01-31 00:00:00+00:00",
                        ),
                        invoice_date=datetime.datetime.fromisoformat(
                            "2024-01-01 00:00:00+00:00",
                        ),
                        invoice_number="INV-001",
                        line_items=[
                            InvoiceLineItemUpdateRequest(
                                description="Item 1",
                                amount=50.0,
                                quantity=1.0,
                            ),
                            InvoiceLineItemUpdateRequest(
                                description="Item 2",
                                amount=50.0,
                                quantity=1.0,
                            ),
                        ],
                    )
                ],
            ),
        )
        """
        _response = self._raw_client.update(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    def approve(
        self,
        *,
        request: BulkInvoiceApprovalRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkInvoiceApprovalResponse:
        """
        Approve multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were approved or failed to approve.

        Parameters
        ----------
        request : BulkInvoiceApprovalRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each invoice that is approved. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkInvoiceApprovalResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import (
            ApprovalRequestWithId,
            BulkInvoiceApprovalRequest,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.bulk.approve(
            request=BulkInvoiceApprovalRequest(
                invoices=[
                    ApprovalRequestWithId(
                        invoice_id="in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                        text="This is a reason for my action",
                        user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                    )
                ],
            ),
        )
        """
        _response = self._raw_client.approve(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    def download(
        self,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        entity_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        entity_group_id: typing.Optional[EntityGroupId] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        date_type: typing.Optional[InvoiceDateFilter] = None,
        order_by: typing.Optional[InvoiceOrderByField] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        starting_after: typing.Optional[InvoiceId] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_gl_account_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        payer_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        vendor_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        creator_user_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_action: typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]] = None,
        invoice_id: typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]] = None,
        status: typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]] = None,
        payment_type: typing.Optional[typing.Sequence[PaymentType]] = None,
        invoice_template_id: typing.Optional[
            typing.Union[InvoiceTemplateId, typing.Sequence[InvoiceTemplateId]]
        ] = None,
        return_payer_metadata: typing.Optional[bool] = None,
        return_vendor_metadata: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download a bulk invoice as a CSV/JSON file.

        Parameters
        ----------
        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        entity_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoices by the ID or foreign ID of the entity that is the payer or the vendor of the invoice.

        entity_group_id : typing.Optional[EntityGroupId]
            Filter invoices by the ID or foreign ID of the entity group that the entity belongs to.

        start_date : typing.Optional[dt.datetime]
            Start date filter. Defaults to CREATED_AT unless specified the dateType is specified

        end_date : typing.Optional[dt.datetime]
            End date filter. Defaults to CREATED_AT unless specified the dateType is specified

        date_type : typing.Optional[InvoiceDateFilter]
            Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.

        order_by : typing.Optional[InvoiceOrderByField]
            Field to order invoices by. Defaults to CREATED_AT.

        order_direction : typing.Optional[OrderDirection]
            Direction to order invoices by. Defaults to asc.

        starting_after : typing.Optional[InvoiceId]
            The ID of the invoice to start after. If not provided, the first page of invoices will be returned.

        search : typing.Optional[str]
            Find invoices by vendor name, invoice number, check number, or amount. Partial matches are supported.

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoices by metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoices by line item metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_gl_account_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter invoices by line item GL account ID. Each filter will be applied as an OR condition. Duplicate keys will be ignored.

        payer_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoices by payer ID or payer foreign ID.

        vendor_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoices by vendor ID or vendor foreign ID.

        creator_user_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoices by the ID or foreign ID of the user that created the invoice.

        approver_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoices by assigned approver user ID. Only invoices with all upstream policies approved will be returned.

        approver_action : typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]]
            Filter invoices by approver action. Needs to be used with approverId. For example, if you want to find all invoices that have been approved by a specific user, you would use approverId and approverAction=APPROVE.

        invoice_id : typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]]
            Filter invoices by invoice ID or invoice foreign ID.

        status : typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]]
            Invoice status to filter on

        payment_type : typing.Optional[typing.Sequence[PaymentType]]
            Filter invoices by recurring status

        invoice_template_id : typing.Optional[typing.Union[InvoiceTemplateId, typing.Sequence[InvoiceTemplateId]]]
            Filter invoice by invoice template ID

        return_payer_metadata : typing.Optional[bool]
            Whether to return payer metadata in the response

        return_vendor_metadata : typing.Optional[bool]
            Whether to return vendor metadata in the response

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.bulk.download(
            format="CSV",
        )
        """
        _response = self._raw_client.download(
            format=format,
            entity_id=entity_id,
            entity_group_id=entity_group_id,
            start_date=start_date,
            end_date=end_date,
            date_type=date_type,
            order_by=order_by,
            order_direction=order_direction,
            starting_after=starting_after,
            search=search,
            metadata=metadata,
            line_item_metadata=line_item_metadata,
            line_item_gl_account_id=line_item_gl_account_id,
            payer_id=payer_id,
            vendor_id=vendor_id,
            creator_user_id=creator_user_id,
            approver_id=approver_id,
            approver_action=approver_action,
            invoice_id=invoice_id,
            status=status,
            payment_type=payment_type,
            invoice_template_id=invoice_template_id,
            return_payer_metadata=return_payer_metadata,
            return_vendor_metadata=return_vendor_metadata,
            request_options=request_options,
        )
        return _response.data


class AsyncBulkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBulkClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        request: BulkInvoiceCreationRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkInvoiceCreationResponse:
        """
        Create multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were created or failed to create.

        Parameters
        ----------
        request : BulkInvoiceCreationRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each invoice that is created. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkInvoiceCreationResponse

        Examples
        --------
        import asyncio
        import datetime

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import (
            BulkInvoiceCreationRequest,
            InvoiceCreationWithEntityRequest,
            InvoiceLineItemCreationRequest,
            PaymentDestinationOptions_Check,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.bulk.create(
                request=BulkInvoiceCreationRequest(
                    invoices=[
                        InvoiceCreationWithEntityRequest(
                            status="NEW",
                            amount=100.0,
                            currency="USD",
                            invoice_date=datetime.datetime.fromisoformat(
                                "2021-01-01 00:00:00+00:00",
                            ),
                            due_date=datetime.datetime.fromisoformat(
                                "2021-01-31 00:00:00+00:00",
                            ),
                            invoice_number="INV-123",
                            note_to_self="For the month of January",
                            payer_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                            payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                            vendor_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                            payment_destination_id="pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                            payment_destination_options=PaymentDestinationOptions_Check(
                                delivery="MAIL",
                                print_description=True,
                            ),
                            line_items=[
                                InvoiceLineItemCreationRequest(
                                    amount=100.0,
                                    currency="USD",
                                    description="Product A",
                                    name="Product A",
                                    quantity=1.0,
                                    unit_price=100.0,
                                    category="EXPENSE",
                                    service_start_date=datetime.datetime.fromisoformat(
                                        "2021-01-01 00:00:00+00:00",
                                    ),
                                    service_end_date=datetime.datetime.fromisoformat(
                                        "2021-01-31 00:00:00+00:00",
                                    ),
                                    metadata={"key1": "value1", "key2": "value2"},
                                    gl_account_id="600394",
                                )
                            ],
                            creator_entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                            creator_user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                        )
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        *,
        request: BulkInvoiceUpdateRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkInvoiceUpdateResponse:
        """
        Update multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were updated or failed to update.

        Parameters
        ----------
        request : BulkInvoiceUpdateRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each invoice that is updated. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkInvoiceUpdateResponse

        Examples
        --------
        import asyncio
        import datetime

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import (
            BulkInvoiceUpdateRequest,
            InvoiceLineItemUpdateRequest,
            InvoiceUpdateRequestWithId,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.bulk.update(
                request=BulkInvoiceUpdateRequest(
                    invoices=[
                        InvoiceUpdateRequestWithId(
                            invoice_id="inv_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                            status="NEW",
                            amount=100.0,
                            currency="USD",
                            due_date=datetime.datetime.fromisoformat(
                                "2024-01-31 00:00:00+00:00",
                            ),
                            invoice_date=datetime.datetime.fromisoformat(
                                "2024-01-01 00:00:00+00:00",
                            ),
                            invoice_number="INV-001",
                            line_items=[
                                InvoiceLineItemUpdateRequest(
                                    description="Item 1",
                                    amount=50.0,
                                    quantity=1.0,
                                ),
                                InvoiceLineItemUpdateRequest(
                                    description="Item 2",
                                    amount=50.0,
                                    quantity=1.0,
                                ),
                            ],
                        )
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    async def approve(
        self,
        *,
        request: BulkInvoiceApprovalRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkInvoiceApprovalResponse:
        """
        Approve multiple invoices in bulk. This endpoint will process synchronously and return a list of invoices that were approved or failed to approve.

        Parameters
        ----------
        request : BulkInvoiceApprovalRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each invoice that is approved. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkInvoiceApprovalResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import (
            ApprovalRequestWithId,
            BulkInvoiceApprovalRequest,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.bulk.approve(
                request=BulkInvoiceApprovalRequest(
                    invoices=[
                        ApprovalRequestWithId(
                            invoice_id="in_26e7b5d3-a739-4b23-9ad9-6aaa085f47a9",
                            text="This is a reason for my action",
                            user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                        )
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.approve(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    async def download(
        self,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        entity_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        entity_group_id: typing.Optional[EntityGroupId] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        date_type: typing.Optional[InvoiceDateFilter] = None,
        order_by: typing.Optional[InvoiceOrderByField] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        starting_after: typing.Optional[InvoiceId] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_gl_account_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        payer_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        vendor_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        creator_user_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_action: typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]] = None,
        invoice_id: typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]] = None,
        status: typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]] = None,
        payment_type: typing.Optional[typing.Sequence[PaymentType]] = None,
        invoice_template_id: typing.Optional[
            typing.Union[InvoiceTemplateId, typing.Sequence[InvoiceTemplateId]]
        ] = None,
        return_payer_metadata: typing.Optional[bool] = None,
        return_vendor_metadata: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download a bulk invoice as a CSV/JSON file.

        Parameters
        ----------
        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        entity_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoices by the ID or foreign ID of the entity that is the payer or the vendor of the invoice.

        entity_group_id : typing.Optional[EntityGroupId]
            Filter invoices by the ID or foreign ID of the entity group that the entity belongs to.

        start_date : typing.Optional[dt.datetime]
            Start date filter. Defaults to CREATED_AT unless specified the dateType is specified

        end_date : typing.Optional[dt.datetime]
            End date filter. Defaults to CREATED_AT unless specified the dateType is specified

        date_type : typing.Optional[InvoiceDateFilter]
            Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.

        order_by : typing.Optional[InvoiceOrderByField]
            Field to order invoices by. Defaults to CREATED_AT.

        order_direction : typing.Optional[OrderDirection]
            Direction to order invoices by. Defaults to asc.

        starting_after : typing.Optional[InvoiceId]
            The ID of the invoice to start after. If not provided, the first page of invoices will be returned.

        search : typing.Optional[str]
            Find invoices by vendor name, invoice number, check number, or amount. Partial matches are supported.

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoices by metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoices by line item metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_gl_account_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter invoices by line item GL account ID. Each filter will be applied as an OR condition. Duplicate keys will be ignored.

        payer_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoices by payer ID or payer foreign ID.

        vendor_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoices by vendor ID or vendor foreign ID.

        creator_user_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoices by the ID or foreign ID of the user that created the invoice.

        approver_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoices by assigned approver user ID. Only invoices with all upstream policies approved will be returned.

        approver_action : typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]]
            Filter invoices by approver action. Needs to be used with approverId. For example, if you want to find all invoices that have been approved by a specific user, you would use approverId and approverAction=APPROVE.

        invoice_id : typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]]
            Filter invoices by invoice ID or invoice foreign ID.

        status : typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]]
            Invoice status to filter on

        payment_type : typing.Optional[typing.Sequence[PaymentType]]
            Filter invoices by recurring status

        invoice_template_id : typing.Optional[typing.Union[InvoiceTemplateId, typing.Sequence[InvoiceTemplateId]]]
            Filter invoice by invoice template ID

        return_payer_metadata : typing.Optional[bool]
            Whether to return payer metadata in the response

        return_vendor_metadata : typing.Optional[bool]
            Whether to return vendor metadata in the response

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.bulk.download(
                format="CSV",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.download(
            format=format,
            entity_id=entity_id,
            entity_group_id=entity_group_id,
            start_date=start_date,
            end_date=end_date,
            date_type=date_type,
            order_by=order_by,
            order_direction=order_direction,
            starting_after=starting_after,
            search=search,
            metadata=metadata,
            line_item_metadata=line_item_metadata,
            line_item_gl_account_id=line_item_gl_account_id,
            payer_id=payer_id,
            vendor_id=vendor_id,
            creator_user_id=creator_user_id,
            approver_id=approver_id,
            approver_action=approver_action,
            invoice_id=invoice_id,
            status=status,
            payment_type=payment_type,
            invoice_template_id=invoice_template_id,
            return_payer_metadata=return_payer_metadata,
            return_vendor_metadata=return_vendor_metadata,
            request_options=request_options,
        )
        return _response.data
