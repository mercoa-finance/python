# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...invoice_types.types.invoice_id import InvoiceId
from .raw_client import AsyncRawPaymentLinksClient, RawPaymentLinksClient


class PaymentLinksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPaymentLinksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPaymentLinksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPaymentLinksClient
        """
        return self._raw_client

    def get_payer_link(
        self,
        invoice_id: InvoiceId,
        *,
        expires_in: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Get temporary link for payer to send payment

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 30d.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.payment_links.get_payer_link(
            invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.get_payer_link(invoice_id, expires_in=expires_in, request_options=request_options)
        return _response.data

    def send_payer_email(
        self,
        invoice_id: InvoiceId,
        *,
        attach_invoice: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Trigger email to payer inviting them to make payment

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        attach_invoice : typing.Optional[bool]
            Whether to attach the invoice to the email

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.payment_links.send_payer_email(
            invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            attach_invoice=True,
        )
        """
        _response = self._raw_client.send_payer_email(
            invoice_id, attach_invoice=attach_invoice, request_options=request_options
        )
        return _response.data

    def get_vendor_link(
        self,
        invoice_id: InvoiceId,
        *,
        expires_in: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Get temporary link for vendor to accept payment

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 30d.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.payment_links.get_vendor_link(
            invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.get_vendor_link(invoice_id, expires_in=expires_in, request_options=request_options)
        return _response.data

    def send_vendor_email(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Trigger email to vendor inviting them into the vendor portal

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.payment_links.send_vendor_email(
            invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.send_vendor_email(invoice_id, request_options=request_options)
        return _response.data


class AsyncPaymentLinksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPaymentLinksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPaymentLinksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPaymentLinksClient
        """
        return self._raw_client

    async def get_payer_link(
        self,
        invoice_id: InvoiceId,
        *,
        expires_in: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Get temporary link for payer to send payment

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 30d.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.payment_links.get_payer_link(
                invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_payer_link(
            invoice_id, expires_in=expires_in, request_options=request_options
        )
        return _response.data

    async def send_payer_email(
        self,
        invoice_id: InvoiceId,
        *,
        attach_invoice: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Trigger email to payer inviting them to make payment

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        attach_invoice : typing.Optional[bool]
            Whether to attach the invoice to the email

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.payment_links.send_payer_email(
                invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                attach_invoice=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.send_payer_email(
            invoice_id, attach_invoice=attach_invoice, request_options=request_options
        )
        return _response.data

    async def get_vendor_link(
        self,
        invoice_id: InvoiceId,
        *,
        expires_in: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Get temporary link for vendor to accept payment

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 30d.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.payment_links.get_vendor_link(
                invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_vendor_link(
            invoice_id, expires_in=expires_in, request_options=request_options
        )
        return _response.data

    async def send_vendor_email(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Trigger email to vendor inviting them into the vendor portal

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.payment_links.send_vendor_email(
                invoice_id="in_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.send_vendor_email(invoice_id, request_options=request_options)
        return _response.data
