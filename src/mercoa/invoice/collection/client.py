# This file was auto-generated by Fern from our API Definition.

import typing

from ...collection_types.types.action_response import ActionResponse
from ...collection_types.types.update_next_action_request import UpdateNextActionRequest
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...invoice_types.types.invoice_id import InvoiceId
from .raw_client import AsyncRawCollectionClient, RawCollectionClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CollectionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCollectionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCollectionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCollectionClient
        """
        return self._raw_client

    def get_next_action(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[ActionResponse]:
        """
        Get the collection agent's next action on this invoice. This endpoint will return an empty object if there is no action to return.

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[ActionResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.collection.get_next_action(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        )
        """
        _response = self._raw_client.get_next_action(invoice_id, request_options=request_options)
        return _response.data

    def update_next_action(
        self,
        invoice_id: InvoiceId,
        *,
        request: UpdateNextActionRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActionResponse:
        """
        Update the collection agent's next action on this invoice with natural language. Note that updating any APPROVED action will reset the action to SUGGESTED.  This endpoint will throw an error if there is no action to update.

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request : UpdateNextActionRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.collection_types import UpdateNextActionRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.collection.update_next_action(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            request=UpdateNextActionRequest(
                feedback="Use a more stern tone",
            ),
        )
        """
        _response = self._raw_client.update_next_action(invoice_id, request=request, request_options=request_options)
        return _response.data

    def approve_next_action(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ActionResponse:
        """
        Approve the collection agent's next action on this invoice. This endpoint will throw an error if there is no action to approve.

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.collection.approve_next_action(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        )
        """
        _response = self._raw_client.approve_next_action(invoice_id, request_options=request_options)
        return _response.data


class AsyncCollectionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCollectionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCollectionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCollectionClient
        """
        return self._raw_client

    async def get_next_action(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[ActionResponse]:
        """
        Get the collection agent's next action on this invoice. This endpoint will return an empty object if there is no action to return.

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[ActionResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.collection.get_next_action(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_next_action(invoice_id, request_options=request_options)
        return _response.data

    async def update_next_action(
        self,
        invoice_id: InvoiceId,
        *,
        request: UpdateNextActionRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActionResponse:
        """
        Update the collection agent's next action on this invoice with natural language. Note that updating any APPROVED action will reset the action to SUGGESTED.  This endpoint will throw an error if there is no action to update.

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request : UpdateNextActionRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.collection_types import UpdateNextActionRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.collection.update_next_action(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
                request=UpdateNextActionRequest(
                    feedback="Use a more stern tone",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_next_action(
            invoice_id, request=request, request_options=request_options
        )
        return _response.data

    async def approve_next_action(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ActionResponse:
        """
        Approve the collection agent's next action on this invoice. This endpoint will throw an error if there is no action to approve.

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.collection.approve_next_action(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.approve_next_action(invoice_id, request_options=request_options)
        return _response.data
