# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...invoice_types.types.comment_id import CommentId
from ...invoice_types.types.comment_request import CommentRequest
from ...invoice_types.types.comment_response import CommentResponse
from ...invoice_types.types.invoice_id import InvoiceId
from .raw_client import AsyncRawCommentClient, RawCommentClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CommentClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCommentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCommentClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCommentClient
        """
        return self._raw_client

    def get_all(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[CommentResponse]:
        """
        Get all comments associated with this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CommentResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.comment.get_all(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        )
        """
        _response = self._raw_client.get_all(invoice_id, request_options=request_options)
        return _response.data

    def create(
        self, invoice_id: InvoiceId, *, request: CommentRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CommentResponse:
        """
        Add a comment to this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request : CommentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import CommentRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.comment.create(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            request=CommentRequest(
                text="This is a comment",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.create(invoice_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self, invoice_id: InvoiceId, comment_id: CommentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CommentResponse:
        """
        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        comment_id : CommentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.comment.get(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            comment_id="ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        )
        """
        _response = self._raw_client.get(invoice_id, comment_id, request_options=request_options)
        return _response.data

    def update(
        self,
        invoice_id: InvoiceId,
        comment_id: CommentId,
        *,
        request: CommentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentResponse:
        """
        Edit a comment on this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        comment_id : CommentId

        request : CommentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import CommentRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.comment.update(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            comment_id="ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            request=CommentRequest(
                text="This is a comment",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.update(invoice_id, comment_id, request=request, request_options=request_options)
        return _response.data

    def delete(
        self, invoice_id: InvoiceId, comment_id: CommentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a comment on this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        comment_id : CommentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice.comment.delete(
            invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            comment_id="ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
        )
        """
        _response = self._raw_client.delete(invoice_id, comment_id, request_options=request_options)
        return _response.data


class AsyncCommentClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCommentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCommentClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCommentClient
        """
        return self._raw_client

    async def get_all(
        self, invoice_id: InvoiceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[CommentResponse]:
        """
        Get all comments associated with this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CommentResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.comment.get_all(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(invoice_id, request_options=request_options)
        return _response.data

    async def create(
        self, invoice_id: InvoiceId, *, request: CommentRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CommentResponse:
        """
        Add a comment to this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        request : CommentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import CommentRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.comment.create(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
                request=CommentRequest(
                    text="This is a comment",
                    user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(invoice_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self, invoice_id: InvoiceId, comment_id: CommentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CommentResponse:
        """
        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        comment_id : CommentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.comment.get(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
                comment_id="ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(invoice_id, comment_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        invoice_id: InvoiceId,
        comment_id: CommentId,
        *,
        request: CommentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CommentResponse:
        """
        Edit a comment on this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        comment_id : CommentId

        request : CommentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CommentResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import CommentRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.comment.update(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
                comment_id="ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
                request=CommentRequest(
                    text="This is a comment",
                    user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            invoice_id, comment_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self, invoice_id: InvoiceId, comment_id: CommentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a comment on this invoice

        Parameters
        ----------
        invoice_id : InvoiceId
            Invoice ID or Invoice ForeignID

        comment_id : CommentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice.comment.delete(
                invoice_id="in_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
                comment_id="ic_3d61faa9-1754-4b7b-9fcb-88ff97f368ff",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(invoice_id, comment_id, request_options=request_options)
        return _response.data
