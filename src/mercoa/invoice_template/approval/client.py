# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...invoice_types.types.add_approver_request import AddApproverRequest
from ...invoice_types.types.approval_request import ApprovalRequest
from ...invoice_types.types.invoice_template_id import InvoiceTemplateId
from .raw_client import AsyncRawApprovalClient, RawApprovalClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApprovalClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawApprovalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawApprovalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawApprovalClient
        """
        return self._raw_client

    def add_approver(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: AddApproverRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Adds an approver to the invoice template. Will select the first available approver slot that is not already filled and assign the approver to it. If no approver slots are available, an error will be returned. An explicit approver slot can be specified by setting the `approverSlot` field.

        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : AddApproverRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import AddApproverRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.approval.add_approver(
            invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            request=AddApproverRequest(
                approval_slot_id="inap_9bb311c9-7c15-4c9e-8148-63814e0abec6",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.add_approver(invoice_template_id, request=request, request_options=request_options)
        return _response.data

    def approve(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: ApprovalRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : ApprovalRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import ApprovalRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.approval.approve(
            invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            request=ApprovalRequest(
                text="This is a reason for my action",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.approve(invoice_template_id, request=request, request_options=request_options)
        return _response.data

    def reject(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: ApprovalRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : ApprovalRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.invoice_types import ApprovalRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.approval.reject(
            invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            request=ApprovalRequest(
                text="This is a reason for my action",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.reject(invoice_template_id, request=request, request_options=request_options)
        return _response.data


class AsyncApprovalClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawApprovalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawApprovalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawApprovalClient
        """
        return self._raw_client

    async def add_approver(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: AddApproverRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Adds an approver to the invoice template. Will select the first available approver slot that is not already filled and assign the approver to it. If no approver slots are available, an error will be returned. An explicit approver slot can be specified by setting the `approverSlot` field.

        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : AddApproverRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import AddApproverRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.approval.add_approver(
                invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
                request=AddApproverRequest(
                    approval_slot_id="inap_9bb311c9-7c15-4c9e-8148-63814e0abec6",
                    user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_approver(
            invoice_template_id, request=request, request_options=request_options
        )
        return _response.data

    async def approve(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: ApprovalRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : ApprovalRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import ApprovalRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.approval.approve(
                invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
                request=ApprovalRequest(
                    text="This is a reason for my action",
                    user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.approve(
            invoice_template_id, request=request, request_options=request_options
        )
        return _response.data

    async def reject(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: ApprovalRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : ApprovalRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import ApprovalRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.approval.reject(
                invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
                request=ApprovalRequest(
                    text="This is a reason for my action",
                    user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.reject(invoice_template_id, request=request, request_options=request_options)
        return _response.data
