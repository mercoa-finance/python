# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..commons.types.order_direction import OrderDirection
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..entity_types.types.entity_id import EntityId
from ..entity_types.types.entity_user_id import EntityUserId
from ..invoice_types.types.approver_action import ApproverAction
from ..invoice_types.types.find_invoice_template_response import FindInvoiceTemplateResponse
from ..invoice_types.types.invoice_date_filter import InvoiceDateFilter
from ..invoice_types.types.invoice_id import InvoiceId
from ..invoice_types.types.invoice_order_by_field import InvoiceOrderByField
from ..invoice_types.types.invoice_status import InvoiceStatus
from ..invoice_types.types.invoice_template_creation_request import InvoiceTemplateCreationRequest
from ..invoice_types.types.invoice_template_id import InvoiceTemplateId
from ..invoice_types.types.invoice_template_response import InvoiceTemplateResponse
from ..invoice_types.types.invoice_template_update_request import InvoiceTemplateUpdateRequest
from ..invoice_types.types.metadata_filter import MetadataFilter
from ..invoice_types.types.payment_type import PaymentType
from .approval.client import ApprovalClient, AsyncApprovalClient
from .document.client import AsyncDocumentClient, DocumentClient
from .line_item.client import AsyncLineItemClient, LineItemClient
from .raw_client import AsyncRawInvoiceTemplateClient, RawInvoiceTemplateClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InvoiceTemplateClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInvoiceTemplateClient(client_wrapper=client_wrapper)
        self.line_item = LineItemClient(client_wrapper=client_wrapper)

        self.approval = ApprovalClient(client_wrapper=client_wrapper)

        self.document = DocumentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInvoiceTemplateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInvoiceTemplateClient
        """
        return self._raw_client

    def find(
        self,
        *,
        entity_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        date_type: typing.Optional[InvoiceDateFilter] = None,
        order_by: typing.Optional[InvoiceOrderByField] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[InvoiceTemplateId] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_gl_account_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        payer_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        vendor_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        creator_user_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_action: typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]] = None,
        invoice_id: typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]] = None,
        status: typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]] = None,
        payment_type: typing.Optional[typing.Sequence[PaymentType]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindInvoiceTemplateResponse:
        """
        Search invoice templates for all entities in the organization

        Parameters
        ----------
        entity_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoice templates by the ID or foreign ID of the entity that is the payer or the vendor of the invoice template.

        start_date : typing.Optional[dt.datetime]
            Start date filter. Defaults to CREATED_AT unless specified the dateType is specified

        end_date : typing.Optional[dt.datetime]
            End date filter. Defaults to CREATED_AT unless specified the dateType is specified

        date_type : typing.Optional[InvoiceDateFilter]
            Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.

        order_by : typing.Optional[InvoiceOrderByField]
            Field to order invoice templates by. Defaults to CREATED_AT.

        order_direction : typing.Optional[OrderDirection]
            Direction to order invoice templates by. Defaults to asc.

        limit : typing.Optional[int]
            Number of invoice templates to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[InvoiceTemplateId]
            The ID of the invoice template to start after. If not provided, the first page of invoice templates will be returned.

        search : typing.Optional[str]
            Find invoice templates by vendor name, check number, invoice number, or amount. Partial matches are supported.

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoice templates by metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoice templates by line item metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_gl_account_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter invoice templates by line item GL account ID. Each filter will be applied as an OR condition. Duplicate keys will be ignored.

        payer_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoice templates by payer ID or payer foreign ID.

        vendor_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoice templates by vendor ID or vendor foreign ID.

        creator_user_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoices by the ID or foreign ID of the user that created the invoice.

        approver_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoice templates by assigned approver user ID.

        approver_action : typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]]
            Filter invoice templates by approver action. Needs to be used with approverId. For example, if you want to find all invoice templates that have been approved by a specific user, you would use approverId and approverAction=APPROVE.

        invoice_id : typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]]
            Filter invoice templates by invoice ID.

        status : typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]]
            Invoice status to filter on

        payment_type : typing.Optional[typing.Sequence[PaymentType]]
            Filter invoice templates by recurring status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindInvoiceTemplateResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.find(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.find(
            entity_id=entity_id,
            start_date=start_date,
            end_date=end_date,
            date_type=date_type,
            order_by=order_by,
            order_direction=order_direction,
            limit=limit,
            starting_after=starting_after,
            search=search,
            metadata=metadata,
            line_item_metadata=line_item_metadata,
            line_item_gl_account_id=line_item_gl_account_id,
            payer_id=payer_id,
            vendor_id=vendor_id,
            creator_user_id=creator_user_id,
            approver_id=approver_id,
            approver_action=approver_action,
            invoice_id=invoice_id,
            status=status,
            payment_type=payment_type,
            request_options=request_options,
        )
        return _response.data

    def create(
        self, *, request: InvoiceTemplateCreationRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> InvoiceTemplateResponse:
        """
        Parameters
        ----------
        request : InvoiceTemplateCreationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceTemplateResponse

        Examples
        --------
        import datetime

        from mercoa import Mercoa
        from mercoa.invoice_types import (
            InvoiceLineItemCreationRequest,
            InvoiceTemplateCreationRequest,
            PaymentDestinationOptions_Check,
            PaymentSchedule_Monthly,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.create(
            request=InvoiceTemplateCreationRequest(
                status="NEW",
                amount=100.0,
                currency="USD",
                invoice_date=datetime.datetime.fromisoformat(
                    "2021-01-01 00:00:00+00:00",
                ),
                due_date=datetime.datetime.fromisoformat(
                    "2021-01-13 00:00:00+00:00",
                ),
                deduction_date=datetime.datetime.fromisoformat(
                    "2021-01-10 00:00:00+00:00",
                ),
                payment_schedule=PaymentSchedule_Monthly(
                    repeat_on_day=10,
                    ends=datetime.datetime.fromisoformat(
                        "2021-01-01 00:00:00+00:00",
                    ),
                ),
                invoice_number="INV-123",
                note_to_self="Monthly recurring payment",
                payer_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                vendor_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                payment_destination_id="pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                payment_destination_options=PaymentDestinationOptions_Check(
                    delivery="MAIL",
                    print_description=True,
                ),
                line_items=[
                    InvoiceLineItemCreationRequest(
                        amount=100.0,
                        currency="USD",
                        description="Product A",
                        name="Product A",
                        quantity=1.0,
                        unit_price=100.0,
                        category="EXPENSE",
                        service_start_date=datetime.datetime.fromisoformat(
                            "2021-01-01 00:00:00+00:00",
                        ),
                        service_end_date=datetime.datetime.fromisoformat(
                            "2021-01-31 00:00:00+00:00",
                        ),
                        metadata={"key1": "value1", "key2": "value2"},
                        gl_account_id="600394",
                    )
                ],
                creator_entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                creator_user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    def get(
        self, invoice_template_id: InvoiceTemplateId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InvoiceTemplateResponse:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceTemplateResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.get(
            invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
        )
        """
        _response = self._raw_client.get(invoice_template_id, request_options=request_options)
        return _response.data

    def update(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: InvoiceTemplateUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InvoiceTemplateResponse:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : InvoiceTemplateUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceTemplateResponse

        Examples
        --------
        import datetime

        from mercoa import Mercoa
        from mercoa.invoice_types import (
            InvoiceLineItemUpdateRequest,
            InvoiceTemplateUpdateRequest,
            PaymentDestinationOptions_Check,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.update(
            invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            request=InvoiceTemplateUpdateRequest(
                status="NEW",
                amount=100.0,
                currency="USD",
                invoice_date=datetime.datetime.fromisoformat(
                    "2021-01-01 00:00:00+00:00",
                ),
                due_date=datetime.datetime.fromisoformat(
                    "2021-01-31 00:00:00+00:00",
                ),
                invoice_number="INV-123",
                note_to_self="For the month of January",
                payer_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                vendor_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                payment_destination_id="pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                payment_destination_options=PaymentDestinationOptions_Check(
                    delivery="MAIL",
                    print_description=True,
                ),
                line_items=[
                    InvoiceLineItemUpdateRequest(
                        id="inli_26672f38-eb9a-48f1-a7a0-f1b855e38cd7",
                        amount=100.0,
                        currency="USD",
                        description="Product A",
                        name="Product A",
                        quantity=1.0,
                        unit_price=100.0,
                        category="EXPENSE",
                        service_start_date=datetime.datetime.fromisoformat(
                            "2021-01-01 00:00:00+00:00",
                        ),
                        service_end_date=datetime.datetime.fromisoformat(
                            "2021-01-31 00:00:00+00:00",
                        ),
                        metadata={"key1": "value1", "key2": "value2"},
                        gl_account_id="600394",
                    )
                ],
                creator_entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                creator_user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            ),
        )
        """
        _response = self._raw_client.update(invoice_template_id, request=request, request_options=request_options)
        return _response.data

    def delete(
        self, invoice_template_id: InvoiceTemplateId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Only invoice templates in the UNASSIGNED and DRAFT statuses can be deleted.

        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.invoice_template.delete(
            invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
        )
        """
        _response = self._raw_client.delete(invoice_template_id, request_options=request_options)
        return _response.data


class AsyncInvoiceTemplateClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInvoiceTemplateClient(client_wrapper=client_wrapper)
        self.line_item = AsyncLineItemClient(client_wrapper=client_wrapper)

        self.approval = AsyncApprovalClient(client_wrapper=client_wrapper)

        self.document = AsyncDocumentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInvoiceTemplateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInvoiceTemplateClient
        """
        return self._raw_client

    async def find(
        self,
        *,
        entity_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        date_type: typing.Optional[InvoiceDateFilter] = None,
        order_by: typing.Optional[InvoiceOrderByField] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[InvoiceTemplateId] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        line_item_gl_account_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        payer_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        vendor_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        creator_user_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_id: typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]] = None,
        approver_action: typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]] = None,
        invoice_id: typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]] = None,
        status: typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]] = None,
        payment_type: typing.Optional[typing.Sequence[PaymentType]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindInvoiceTemplateResponse:
        """
        Search invoice templates for all entities in the organization

        Parameters
        ----------
        entity_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoice templates by the ID or foreign ID of the entity that is the payer or the vendor of the invoice template.

        start_date : typing.Optional[dt.datetime]
            Start date filter. Defaults to CREATED_AT unless specified the dateType is specified

        end_date : typing.Optional[dt.datetime]
            End date filter. Defaults to CREATED_AT unless specified the dateType is specified

        date_type : typing.Optional[InvoiceDateFilter]
            Type of date to filter by if startDate and endDate filters are provided. Defaults to CREATED_AT.

        order_by : typing.Optional[InvoiceOrderByField]
            Field to order invoice templates by. Defaults to CREATED_AT.

        order_direction : typing.Optional[OrderDirection]
            Direction to order invoice templates by. Defaults to asc.

        limit : typing.Optional[int]
            Number of invoice templates to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[InvoiceTemplateId]
            The ID of the invoice template to start after. If not provided, the first page of invoice templates will be returned.

        search : typing.Optional[str]
            Find invoice templates by vendor name, check number, invoice number, or amount. Partial matches are supported.

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoice templates by metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter invoice templates by line item metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        line_item_gl_account_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter invoice templates by line item GL account ID. Each filter will be applied as an OR condition. Duplicate keys will be ignored.

        payer_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoice templates by payer ID or payer foreign ID.

        vendor_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter invoice templates by vendor ID or vendor foreign ID.

        creator_user_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoices by the ID or foreign ID of the user that created the invoice.

        approver_id : typing.Optional[typing.Union[EntityUserId, typing.Sequence[EntityUserId]]]
            Filter invoice templates by assigned approver user ID.

        approver_action : typing.Optional[typing.Union[ApproverAction, typing.Sequence[ApproverAction]]]
            Filter invoice templates by approver action. Needs to be used with approverId. For example, if you want to find all invoice templates that have been approved by a specific user, you would use approverId and approverAction=APPROVE.

        invoice_id : typing.Optional[typing.Union[InvoiceId, typing.Sequence[InvoiceId]]]
            Filter invoice templates by invoice ID.

        status : typing.Optional[typing.Union[InvoiceStatus, typing.Sequence[InvoiceStatus]]]
            Invoice status to filter on

        payment_type : typing.Optional[typing.Sequence[PaymentType]]
            Filter invoice templates by recurring status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindInvoiceTemplateResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.find(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            entity_id=entity_id,
            start_date=start_date,
            end_date=end_date,
            date_type=date_type,
            order_by=order_by,
            order_direction=order_direction,
            limit=limit,
            starting_after=starting_after,
            search=search,
            metadata=metadata,
            line_item_metadata=line_item_metadata,
            line_item_gl_account_id=line_item_gl_account_id,
            payer_id=payer_id,
            vendor_id=vendor_id,
            creator_user_id=creator_user_id,
            approver_id=approver_id,
            approver_action=approver_action,
            invoice_id=invoice_id,
            status=status,
            payment_type=payment_type,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self, *, request: InvoiceTemplateCreationRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> InvoiceTemplateResponse:
        """
        Parameters
        ----------
        request : InvoiceTemplateCreationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceTemplateResponse

        Examples
        --------
        import asyncio
        import datetime

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import (
            InvoiceLineItemCreationRequest,
            InvoiceTemplateCreationRequest,
            PaymentDestinationOptions_Check,
            PaymentSchedule_Monthly,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.create(
                request=InvoiceTemplateCreationRequest(
                    status="NEW",
                    amount=100.0,
                    currency="USD",
                    invoice_date=datetime.datetime.fromisoformat(
                        "2021-01-01 00:00:00+00:00",
                    ),
                    due_date=datetime.datetime.fromisoformat(
                        "2021-01-13 00:00:00+00:00",
                    ),
                    deduction_date=datetime.datetime.fromisoformat(
                        "2021-01-10 00:00:00+00:00",
                    ),
                    payment_schedule=PaymentSchedule_Monthly(
                        repeat_on_day=10,
                        ends=datetime.datetime.fromisoformat(
                            "2021-01-01 00:00:00+00:00",
                        ),
                    ),
                    invoice_number="INV-123",
                    note_to_self="Monthly recurring payment",
                    payer_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                    vendor_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    payment_destination_id="pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                    payment_destination_options=PaymentDestinationOptions_Check(
                        delivery="MAIL",
                        print_description=True,
                    ),
                    line_items=[
                        InvoiceLineItemCreationRequest(
                            amount=100.0,
                            currency="USD",
                            description="Product A",
                            name="Product A",
                            quantity=1.0,
                            unit_price=100.0,
                            category="EXPENSE",
                            service_start_date=datetime.datetime.fromisoformat(
                                "2021-01-01 00:00:00+00:00",
                            ),
                            service_end_date=datetime.datetime.fromisoformat(
                                "2021-01-31 00:00:00+00:00",
                            ),
                            metadata={"key1": "value1", "key2": "value2"},
                            gl_account_id="600394",
                        )
                    ],
                    creator_entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creator_user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    async def get(
        self, invoice_template_id: InvoiceTemplateId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> InvoiceTemplateResponse:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceTemplateResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.get(
                invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(invoice_template_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        invoice_template_id: InvoiceTemplateId,
        *,
        request: InvoiceTemplateUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InvoiceTemplateResponse:
        """
        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request : InvoiceTemplateUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InvoiceTemplateResponse

        Examples
        --------
        import asyncio
        import datetime

        from mercoa import AsyncMercoa
        from mercoa.invoice_types import (
            InvoiceLineItemUpdateRequest,
            InvoiceTemplateUpdateRequest,
            PaymentDestinationOptions_Check,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.update(
                invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
                request=InvoiceTemplateUpdateRequest(
                    status="NEW",
                    amount=100.0,
                    currency="USD",
                    invoice_date=datetime.datetime.fromisoformat(
                        "2021-01-01 00:00:00+00:00",
                    ),
                    due_date=datetime.datetime.fromisoformat(
                        "2021-01-31 00:00:00+00:00",
                    ),
                    invoice_number="INV-123",
                    note_to_self="For the month of January",
                    payer_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    payment_source_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                    vendor_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    payment_destination_id="pm_5fde2f4a-facc-48ef-8f0d-6b7d087c7b18",
                    payment_destination_options=PaymentDestinationOptions_Check(
                        delivery="MAIL",
                        print_description=True,
                    ),
                    line_items=[
                        InvoiceLineItemUpdateRequest(
                            id="inli_26672f38-eb9a-48f1-a7a0-f1b855e38cd7",
                            amount=100.0,
                            currency="USD",
                            description="Product A",
                            name="Product A",
                            quantity=1.0,
                            unit_price=100.0,
                            category="EXPENSE",
                            service_start_date=datetime.datetime.fromisoformat(
                                "2021-01-01 00:00:00+00:00",
                            ),
                            service_end_date=datetime.datetime.fromisoformat(
                                "2021-01-31 00:00:00+00:00",
                            ),
                            metadata={"key1": "value1", "key2": "value2"},
                            gl_account_id="600394",
                        )
                    ],
                    creator_entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    creator_user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(invoice_template_id, request=request, request_options=request_options)
        return _response.data

    async def delete(
        self, invoice_template_id: InvoiceTemplateId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Only invoice templates in the UNASSIGNED and DRAFT statuses can be deleted.

        Parameters
        ----------
        invoice_template_id : InvoiceTemplateId
            Invoice Template ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.invoice_template.delete(
                invoice_template_id="invt_13c07096-5848-4aeb-ae7d-6576289034c4",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(invoice_template_id, request_options=request_options)
        return _response.data
