# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....entity_types.types.entity_id import EntityId
from ....payment_method_types.types.payment_method_id import PaymentMethodId
from ....payment_method_types.types.payment_method_response import PaymentMethodResponse
from .raw_client import AsyncRawBankAccountClient, RawBankAccountClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BankAccountClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBankAccountClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBankAccountClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBankAccountClient
        """
        return self._raw_client

    def initiate_micro_deposits(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Initiate micro deposits for a bank account

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.bank_account.initiate_micro_deposits(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        )
        """
        _response = self._raw_client.initiate_micro_deposits(
            entity_id, payment_method_id, request_options=request_options
        )
        return _response.data

    def complete_micro_deposits(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        amounts: typing.Sequence[int],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Complete micro deposit verification

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        amounts : typing.Sequence[int]
            The amounts of the micro deposits in cents

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.bank_account.complete_micro_deposits(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            amounts=[40, 2],
        )
        """
        _response = self._raw_client.complete_micro_deposits(
            entity_id, payment_method_id, amounts=amounts, request_options=request_options
        )
        return _response.data


class AsyncBankAccountClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBankAccountClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBankAccountClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBankAccountClient
        """
        return self._raw_client

    async def initiate_micro_deposits(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Initiate micro deposits for a bank account

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.bank_account.initiate_micro_deposits(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.initiate_micro_deposits(
            entity_id, payment_method_id, request_options=request_options
        )
        return _response.data

    async def complete_micro_deposits(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        amounts: typing.Sequence[int],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Complete micro deposit verification

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        amounts : typing.Sequence[int]
            The amounts of the micro deposits in cents

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.bank_account.complete_micro_deposits(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                amounts=[40, 2],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.complete_micro_deposits(
            entity_id, payment_method_id, amounts=amounts, request_options=request_options
        )
        return _response.data
