# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....entity_types.types.entity_id import EntityId
from ....payment_method_types.types.currency_code import CurrencyCode
from ....payment_method_types.types.payment_method_id import PaymentMethodId
from ....payment_method_types.types.wallet_balance_response import WalletBalanceResponse
from .raw_client import AsyncRawWalletClient, RawWalletClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WalletClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawWalletClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawWalletClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWalletClient
        """
        return self._raw_client

    def get_wallet_balance(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WalletBalanceResponse:
        """
        Get the available and pending balance of this entity's wallet. The specified payment method ID must refer to the entity's wallet.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WalletBalanceResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.wallet.get_wallet_balance(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        )
        """
        _response = self._raw_client.get_wallet_balance(entity_id, payment_method_id, request_options=request_options)
        return _response.data

    def add_wallet_funds(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        amount: float,
        source_payment_method_id: PaymentMethodId,
        currency: typing.Optional[CurrencyCode] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Add funds to this wallet from a bank account (this transfer is D+2). The source payment method ID must refer to a bank account.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        amount : float
            The amount of the funds to add. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.

        source_payment_method_id : PaymentMethodId
            The ID of the bank account to add funds from. The source payment method ID must refer to a bank account.

        currency : typing.Optional[CurrencyCode]
            The currency of the funds to add. (Defaults to USD, currently only USD is supported.)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.wallet.add_wallet_funds(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            amount=100.0,
            currency="USD",
            source_payment_method_id="pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
        )
        """
        _response = self._raw_client.add_wallet_funds(
            entity_id,
            payment_method_id,
            amount=amount,
            source_payment_method_id=source_payment_method_id,
            currency=currency,
            request_options=request_options,
        )
        return _response.data

    def withdraw_wallet_funds(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        amount: float,
        destination_payment_method_id: PaymentMethodId,
        currency: typing.Optional[CurrencyCode] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Withdraw funds from this wallet to a bank account (this transfer is D+0). The destination payment method ID must refer to a bank account.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        amount : float
            The amount of the funds to withdraw. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.

        destination_payment_method_id : PaymentMethodId
            The ID of the bank account to withdraw funds to. The destination payment method ID must refer to a bank account.

        currency : typing.Optional[CurrencyCode]
            The currency of the funds to withdraw. (Defaults to USD, currently only USD is supported.)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.wallet.withdraw_wallet_funds(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            amount=100.0,
            currency="USD",
            destination_payment_method_id="pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
        )
        """
        _response = self._raw_client.withdraw_wallet_funds(
            entity_id,
            payment_method_id,
            amount=amount,
            destination_payment_method_id=destination_payment_method_id,
            currency=currency,
            request_options=request_options,
        )
        return _response.data


class AsyncWalletClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawWalletClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWalletClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWalletClient
        """
        return self._raw_client

    async def get_wallet_balance(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WalletBalanceResponse:
        """
        Get the available and pending balance of this entity's wallet. The specified payment method ID must refer to the entity's wallet.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WalletBalanceResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.wallet.get_wallet_balance(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_wallet_balance(
            entity_id, payment_method_id, request_options=request_options
        )
        return _response.data

    async def add_wallet_funds(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        amount: float,
        source_payment_method_id: PaymentMethodId,
        currency: typing.Optional[CurrencyCode] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Add funds to this wallet from a bank account (this transfer is D+2). The source payment method ID must refer to a bank account.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        amount : float
            The amount of the funds to add. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.

        source_payment_method_id : PaymentMethodId
            The ID of the bank account to add funds from. The source payment method ID must refer to a bank account.

        currency : typing.Optional[CurrencyCode]
            The currency of the funds to add. (Defaults to USD, currently only USD is supported.)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.wallet.add_wallet_funds(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                amount=100.0,
                currency="USD",
                source_payment_method_id="pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_wallet_funds(
            entity_id,
            payment_method_id,
            amount=amount,
            source_payment_method_id=source_payment_method_id,
            currency=currency,
            request_options=request_options,
        )
        return _response.data

    async def withdraw_wallet_funds(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        amount: float,
        destination_payment_method_id: PaymentMethodId,
        currency: typing.Optional[CurrencyCode] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Withdraw funds from this wallet to a bank account (this transfer is D+0). The destination payment method ID must refer to a bank account.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        amount : float
            The amount of the funds to withdraw. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.

        destination_payment_method_id : PaymentMethodId
            The ID of the bank account to withdraw funds to. The destination payment method ID must refer to a bank account.

        currency : typing.Optional[CurrencyCode]
            The currency of the funds to withdraw. (Defaults to USD, currently only USD is supported.)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.wallet.withdraw_wallet_funds(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                amount=100.0,
                currency="USD",
                destination_payment_method_id="pm_f19d27ad-e493-4bf5-a28b-9cb323de495a",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.withdraw_wallet_funds(
            entity_id,
            payment_method_id,
            amount=amount,
            destination_payment_method_id=destination_payment_method_id,
            currency=currency,
            request_options=request_options,
        )
        return _response.data
