# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.card_link_token_response import CardLinkTokenResponse
from ...entity_types.types.entity_id import EntityId
from ...payment_method_types.types.payment_method_event_id import PaymentMethodEventId
from ...payment_method_types.types.payment_method_events_response import PaymentMethodEventsResponse
from ...payment_method_types.types.payment_method_id import PaymentMethodId
from ...payment_method_types.types.payment_method_request import PaymentMethodRequest
from ...payment_method_types.types.payment_method_response import PaymentMethodResponse
from ...payment_method_types.types.payment_method_type import PaymentMethodType
from ...payment_method_types.types.payment_method_update_request import PaymentMethodUpdateRequest
from .bank_account.client import AsyncBankAccountClient, BankAccountClient
from .raw_client import AsyncRawPaymentMethodClient, RawPaymentMethodClient
from .wallet.client import AsyncWalletClient, WalletClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PaymentMethodClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPaymentMethodClient(client_wrapper=client_wrapper)
        self.bank_account = BankAccountClient(client_wrapper=client_wrapper)

        self.wallet = WalletClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPaymentMethodClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPaymentMethodClient
        """
        return self._raw_client

    def get_all(
        self,
        entity_id: EntityId,
        *,
        type: typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PaymentMethodResponse]:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        type : typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]]
            Type of payment method to filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PaymentMethodResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.get_all(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get_all(entity_id, type=type, request_options=request_options)
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        *,
        request: PaymentMethodRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : PaymentMethodRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.create(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=PaymentMethodRequest_BankAccount(
                routing_number="12345678",
                account_number="99988767623",
                account_type="CHECKING",
            ),
        )
        """
        _response = self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        )
        """
        _response = self._raw_client.get(entity_id, payment_method_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request: PaymentMethodUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Only custom payment methods can be updated.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request : PaymentMethodUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.payment_method_types import PaymentMethodUpdateRequest_BankAccount

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.update(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            request=PaymentMethodUpdateRequest_BankAccount(
                default_source=True,
                default_destination=True,
            ),
        )
        """
        _response = self._raw_client.update(
            entity_id, payment_method_id, request=request, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Mark a payment method as inactive. This will not remove the payment method from the system, but will prevent it from being used in the future.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.delete(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        )
        """
        _response = self._raw_client.delete(entity_id, payment_method_id, request_options=request_options)
        return _response.data

    def plaid_link_token(
        self,
        entity_id: EntityId,
        *,
        payment_method_id: typing.Optional[PaymentMethodId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : typing.Optional[PaymentMethodId]
            ID of Bank Account to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.plaid_link_token(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        )
        """
        _response = self._raw_client.plaid_link_token(
            entity_id, payment_method_id=payment_method_id, request_options=request_options
        )
        return _response.data

    def card_link_token(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CardLinkTokenResponse:
        """
        Get a card link token for an entity. This token is used by the frontend components to generate a PCI compliant form to add a card to the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CardLinkTokenResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.card_link_token(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.card_link_token(entity_id, request_options=request_options)
        return _response.data

    def events(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[PaymentMethodEventId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodEventsResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        start_date : typing.Optional[dt.datetime]
            Start date filter. If not provided, events from the start of time will be returned.

        end_date : typing.Optional[dt.datetime]
            End date filter. If not provided, events to the end of time will be returned.

        limit : typing.Optional[int]
            Limit the number of events returned. Limit can range between 1 and 100, and the default is 50.

        starting_after : typing.Optional[PaymentMethodEventId]
            The ID of the event to start after.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodEventsResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.payment_method.events(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        )
        """
        _response = self._raw_client.events(
            entity_id,
            payment_method_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data


class AsyncPaymentMethodClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPaymentMethodClient(client_wrapper=client_wrapper)
        self.bank_account = AsyncBankAccountClient(client_wrapper=client_wrapper)

        self.wallet = AsyncWalletClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPaymentMethodClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPaymentMethodClient
        """
        return self._raw_client

    async def get_all(
        self,
        entity_id: EntityId,
        *,
        type: typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PaymentMethodResponse]:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        type : typing.Optional[typing.Union[PaymentMethodType, typing.Sequence[PaymentMethodType]]]
            Type of payment method to filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PaymentMethodResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.get_all(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, type=type, request_options=request_options)
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        *,
        request: PaymentMethodRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : PaymentMethodRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.create(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=PaymentMethodRequest_BankAccount(
                    routing_number="12345678",
                    account_number="99988767623",
                    account_type="CHECKING",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, payment_method_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request: PaymentMethodUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodResponse:
        """
        Only custom payment methods can be updated.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request : PaymentMethodUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.payment_method_types import PaymentMethodUpdateRequest_BankAccount

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.update(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                request=PaymentMethodUpdateRequest_BankAccount(
                    default_source=True,
                    default_destination=True,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_id, payment_method_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Mark a payment method as inactive. This will not remove the payment method from the system, but will prevent it from being used in the future.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.delete(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, payment_method_id, request_options=request_options)
        return _response.data

    async def plaid_link_token(
        self,
        entity_id: EntityId,
        *,
        payment_method_id: typing.Optional[PaymentMethodId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Get a Plaid link token for an entity. This token can be used to add or update a bank account to the entity using Plaid Link.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : typing.Optional[PaymentMethodId]
            ID of Bank Account to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.plaid_link_token(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.plaid_link_token(
            entity_id, payment_method_id=payment_method_id, request_options=request_options
        )
        return _response.data

    async def card_link_token(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CardLinkTokenResponse:
        """
        Get a card link token for an entity. This token is used by the frontend components to generate a PCI compliant form to add a card to the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CardLinkTokenResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.card_link_token(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.card_link_token(entity_id, request_options=request_options)
        return _response.data

    async def events(
        self,
        entity_id: EntityId,
        payment_method_id: PaymentMethodId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[PaymentMethodEventId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentMethodEventsResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        payment_method_id : PaymentMethodId
            Payment Method ID or Payment Method ForeignID

        start_date : typing.Optional[dt.datetime]
            Start date filter. If not provided, events from the start of time will be returned.

        end_date : typing.Optional[dt.datetime]
            End date filter. If not provided, events to the end of time will be returned.

        limit : typing.Optional[int]
            Limit the number of events returned. Limit can range between 1 and 100, and the default is 50.

        starting_after : typing.Optional[PaymentMethodEventId]
            The ID of the event to start after.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentMethodEventsResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.payment_method.events(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.events(
            entity_id,
            payment_method_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data
