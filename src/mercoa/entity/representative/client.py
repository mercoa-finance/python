# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.representative_id import RepresentativeId
from ...entity_types.types.representative_request import RepresentativeRequest
from ...entity_types.types.representative_response import RepresentativeResponse
from ...entity_types.types.representative_update_request import RepresentativeUpdateRequest
from .raw_client import AsyncRawRepresentativeClient, RawRepresentativeClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RepresentativeClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawRepresentativeClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawRepresentativeClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawRepresentativeClient
        """
        return self._raw_client

    def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[RepresentativeResponse]:
        """
        Get representatives for an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[RepresentativeResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.representative.get_all(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        *,
        request: RepresentativeRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RepresentativeResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : RepresentativeRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RepresentativeResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.commons import (
            Address,
            BirthDate,
            FullName,
            IndividualGovernmentId,
            PhoneNumber,
        )
        from mercoa.entity_types import RepresentativeRequest, Responsibilities

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.representative.create(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=RepresentativeRequest(
                name=FullName(
                    first_name="John",
                    middle_name="Quincy",
                    last_name="Adams",
                    suffix="Jr.",
                ),
                phone=PhoneNumber(
                    country_code="1",
                    number="4155551234",
                ),
                email="john.doe@acme.com",
                address=Address(
                    address_line_1="123 Main St",
                    address_line_2="Unit 1",
                    city="San Francisco",
                    state_or_province="CA",
                    postal_code="94105",
                    country="US",
                ),
                birth_date=BirthDate(
                    day="1",
                    month="1",
                    year="1980",
                ),
                government_id=IndividualGovernmentId(
                    ssn="123-45-6789",
                ),
                responsibilities=Responsibilities(
                    is_owner=True,
                    ownership_percentage=40,
                    is_controller=True,
                ),
            ),
        )
        """
        _response = self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        representative_id: RepresentativeId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RepresentativeResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        representative_id : RepresentativeId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RepresentativeResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.representative.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            representative_id="rep_7df2974a-4069-454c-912f-7e58ebe030fb",
        )
        """
        _response = self._raw_client.get(entity_id, representative_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        representative_id: RepresentativeId,
        *,
        request: RepresentativeUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RepresentativeResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        representative_id : RepresentativeId

        request : RepresentativeUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RepresentativeResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.commons import (
            Address,
            BirthDate,
            FullName,
            IndividualGovernmentId,
            PhoneNumber,
        )
        from mercoa.entity_types import RepresentativeUpdateRequest, Responsibilities

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.representative.update(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            representative_id="rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            request=RepresentativeUpdateRequest(
                name=FullName(
                    first_name="John",
                    middle_name="Quincy",
                    last_name="Adams",
                    suffix="Jr.",
                ),
                phone=PhoneNumber(
                    country_code="1",
                    number="4155551234",
                ),
                email="john.doe@acme.com",
                address=Address(
                    address_line_1="123 Main St",
                    address_line_2="Unit 1",
                    city="San Francisco",
                    state_or_province="CA",
                    postal_code="94105",
                    country="US",
                ),
                birth_date=BirthDate(
                    day="1",
                    month="1",
                    year="1980",
                ),
                government_id=IndividualGovernmentId(
                    ssn="123-45-6789",
                ),
                responsibilities=Responsibilities(
                    is_owner=True,
                    ownership_percentage=40,
                    is_controller=True,
                ),
            ),
        )
        """
        _response = self._raw_client.update(
            entity_id, representative_id, request=request, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        entity_id: EntityId,
        representative_id: RepresentativeId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        representative_id : RepresentativeId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.representative.delete(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            representative_id="rep_7df2974a-4069-454c-912f-7e58ebe030fb",
        )
        """
        _response = self._raw_client.delete(entity_id, representative_id, request_options=request_options)
        return _response.data


class AsyncRepresentativeClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawRepresentativeClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawRepresentativeClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawRepresentativeClient
        """
        return self._raw_client

    async def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[RepresentativeResponse]:
        """
        Get representatives for an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[RepresentativeResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.representative.get_all(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        *,
        request: RepresentativeRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RepresentativeResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : RepresentativeRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RepresentativeResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.commons import (
            Address,
            BirthDate,
            FullName,
            IndividualGovernmentId,
            PhoneNumber,
        )
        from mercoa.entity_types import RepresentativeRequest, Responsibilities

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.representative.create(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=RepresentativeRequest(
                    name=FullName(
                        first_name="John",
                        middle_name="Quincy",
                        last_name="Adams",
                        suffix="Jr.",
                    ),
                    phone=PhoneNumber(
                        country_code="1",
                        number="4155551234",
                    ),
                    email="john.doe@acme.com",
                    address=Address(
                        address_line_1="123 Main St",
                        address_line_2="Unit 1",
                        city="San Francisco",
                        state_or_province="CA",
                        postal_code="94105",
                        country="US",
                    ),
                    birth_date=BirthDate(
                        day="1",
                        month="1",
                        year="1980",
                    ),
                    government_id=IndividualGovernmentId(
                        ssn="123-45-6789",
                    ),
                    responsibilities=Responsibilities(
                        is_owner=True,
                        ownership_percentage=40,
                        is_controller=True,
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        representative_id: RepresentativeId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RepresentativeResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        representative_id : RepresentativeId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RepresentativeResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.representative.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                representative_id="rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, representative_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        representative_id: RepresentativeId,
        *,
        request: RepresentativeUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RepresentativeResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        representative_id : RepresentativeId

        request : RepresentativeUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RepresentativeResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.commons import (
            Address,
            BirthDate,
            FullName,
            IndividualGovernmentId,
            PhoneNumber,
        )
        from mercoa.entity_types import RepresentativeUpdateRequest, Responsibilities

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.representative.update(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                representative_id="rep_7df2974a-4069-454c-912f-7e58ebe030fb",
                request=RepresentativeUpdateRequest(
                    name=FullName(
                        first_name="John",
                        middle_name="Quincy",
                        last_name="Adams",
                        suffix="Jr.",
                    ),
                    phone=PhoneNumber(
                        country_code="1",
                        number="4155551234",
                    ),
                    email="john.doe@acme.com",
                    address=Address(
                        address_line_1="123 Main St",
                        address_line_2="Unit 1",
                        city="San Francisco",
                        state_or_province="CA",
                        postal_code="94105",
                        country="US",
                    ),
                    birth_date=BirthDate(
                        day="1",
                        month="1",
                        year="1980",
                    ),
                    government_id=IndividualGovernmentId(
                        ssn="123-45-6789",
                    ),
                    responsibilities=Responsibilities(
                        is_owner=True,
                        ownership_percentage=40,
                        is_controller=True,
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_id, representative_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        entity_id: EntityId,
        representative_id: RepresentativeId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        representative_id : RepresentativeId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.representative.delete(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                representative_id="rep_7df2974a-4069-454c-912f-7e58ebe030fb",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, representative_id, request_options=request_options)
        return _response.data
