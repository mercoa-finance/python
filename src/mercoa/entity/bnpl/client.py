# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...invoice_types.types.bnpl_loan_response import BnplLoanResponse
from .raw_client import AsyncRawBnplClient, RawBnplClient


class BnplClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBnplClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBnplClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBnplClient
        """
        return self._raw_client

    def get_loans(
        self, entity_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[BnplLoanResponse]:
        """
        Get all BNPL loans associated with an entity

        Parameters
        ----------
        entity_id : str
            The ID of the entity to get loans for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BnplLoanResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.bnpl.get_loans(
            entity_id="ent_123",
        )
        """
        _response = self._raw_client.get_loans(entity_id, request_options=request_options)
        return _response.data


class AsyncBnplClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBnplClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBnplClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBnplClient
        """
        return self._raw_client

    async def get_loans(
        self, entity_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[BnplLoanResponse]:
        """
        Get all BNPL loans associated with an entity

        Parameters
        ----------
        entity_id : str
            The ID of the entity to get loans for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BnplLoanResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.bnpl.get_loans(
                entity_id="ent_123",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_loans(entity_id, request_options=request_options)
        return _response.data
