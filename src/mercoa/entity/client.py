# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..entity_types.types.entity_event_id import EntityEventId
from ..entity_types.types.entity_events_response import EntityEventsResponse
from ..entity_types.types.entity_id import EntityId
from ..entity_types.types.entity_onboarding_link_type import EntityOnboardingLinkType
from ..entity_types.types.entity_request import EntityRequest
from ..entity_types.types.entity_response import EntityResponse
from ..entity_types.types.entity_status import EntityStatus
from ..entity_types.types.entity_update_request import EntityUpdateRequest
from ..entity_types.types.find_entity_response import FindEntityResponse
from ..entity_types.types.token_generation_options import TokenGenerationOptions
from ..entity_types.types.vendor_portal_options import VendorPortalOptions
from ..invoice_types.types.metadata_filter import MetadataFilter
from .approval_policy.client import ApprovalPolicyClient, AsyncApprovalPolicyClient
from .bnpl.client import AsyncBnplClient, BnplClient
from .bulk.client import AsyncBulkClient, BulkClient
from .counterparty.client import AsyncCounterpartyClient, CounterpartyClient
from .customization.client import AsyncCustomizationClient, CustomizationClient
from .document.client import AsyncDocumentClient, DocumentClient
from .email_log.client import AsyncEmailLogClient, EmailLogClient
from .email_template.client import AsyncEmailTemplateClient, EmailTemplateClient
from .external_accounting_system.client import AsyncExternalAccountingSystemClient, ExternalAccountingSystemClient
from .invoice.client import AsyncInvoiceClient, InvoiceClient
from .metadata.client import AsyncMetadataClient, MetadataClient
from .notification_policy.client import AsyncNotificationPolicyClient, NotificationPolicyClient
from .payment_method.client import AsyncPaymentMethodClient, PaymentMethodClient
from .raw_client import AsyncRawEntityClient, RawEntityClient
from .representative.client import AsyncRepresentativeClient, RepresentativeClient
from .user.client import AsyncUserClient, UserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EntityClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEntityClient(client_wrapper=client_wrapper)
        self.counterparty = CounterpartyClient(client_wrapper=client_wrapper)

        self.email_log = EmailLogClient(client_wrapper=client_wrapper)

        self.payment_method = PaymentMethodClient(client_wrapper=client_wrapper)

        self.user = UserClient(client_wrapper=client_wrapper)

        self.approval_policy = ApprovalPolicyClient(client_wrapper=client_wrapper)

        self.bnpl = BnplClient(client_wrapper=client_wrapper)

        self.bulk = BulkClient(client_wrapper=client_wrapper)

        self.customization = CustomizationClient(client_wrapper=client_wrapper)

        self.document = DocumentClient(client_wrapper=client_wrapper)

        self.email_template = EmailTemplateClient(client_wrapper=client_wrapper)

        self.external_accounting_system = ExternalAccountingSystemClient(client_wrapper=client_wrapper)

        self.invoice = InvoiceClient(client_wrapper=client_wrapper)

        self.metadata = MetadataClient(client_wrapper=client_wrapper)

        self.notification_policy = NotificationPolicyClient(client_wrapper=client_wrapper)

        self.representative = RepresentativeClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEntityClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEntityClient
        """
        return self._raw_client

    def find(
        self,
        *,
        payment_methods: typing.Optional[bool] = None,
        is_customer: typing.Optional[bool] = None,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        status: typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]] = None,
        is_payee: typing.Optional[bool] = None,
        is_payor: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[MetadataFilter] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindEntityResponse:
        """
        Search all entities with the given filters. If no filters are provided, all entities will be returned.

        Parameters
        ----------
        payment_methods : typing.Optional[bool]
            If true, will include entity payment methods as part of the response

        is_customer : typing.Optional[bool]
            If true, only entities with a direct relationship to the requesting organization will be returned. If false or not provided, all entities will be returned.

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify this entity in your system

        status : typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]]

        is_payee : typing.Optional[bool]
            If true, entities that are marked as payees will be returned.
            If false or not provided, entities that are marked as payees will not be returned.

        is_payor : typing.Optional[bool]
            If true or not provided, entities that are marked as payors will be returned.
            If false, entities that are marked as payors will not be returned.

        name : typing.Optional[str]
            Use search instead. Deprecated. Filter entities by name. Partial matches are supported.

        search : typing.Optional[str]
            Find entities by name, email, or emailTo. Partial matches are supported.

        metadata : typing.Optional[MetadataFilter]
            Filter entities by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityId]
            The ID of the entity to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindEntityResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.find(
            is_customer=True,
            foreign_id="MY-DB-ID-12345",
            payment_methods=True,
        )
        """
        _response = self._raw_client.find(
            payment_methods=payment_methods,
            is_customer=is_customer,
            foreign_id=foreign_id,
            status=status,
            is_payee=is_payee,
            is_payor=is_payor,
            name=name,
            search=search,
            metadata=metadata,
            return_metadata=return_metadata,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    def create(
        self, *, request: EntityRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> EntityResponse:
        """
        Parameters
        ----------
        request : EntityRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.commons import Address, PhoneNumber
        from mercoa.entity_types import (
            BusinessProfileRequest,
            Ein,
            EntityCreationRequest,
            ProfileRequest,
            TaxId,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.create(
            request=EntityCreationRequest(
                is_customer=True,
                is_payor=True,
                is_payee=False,
                account_type="business",
                foreign_id="MY-DB-ID-12345",
                profile=ProfileRequest(
                    business=BusinessProfileRequest(
                        email="customer@acme.com",
                        legal_business_name="Acme Inc.",
                        website="http://www.acme.com",
                        business_type="llc",
                        phone=PhoneNumber(
                            country_code="1",
                            number="4155551234",
                        ),
                        address=Address(
                            address_line_1="123 Main St",
                            address_line_2="Unit 1",
                            city="San Francisco",
                            state_or_province="CA",
                            postal_code="94105",
                            country="US",
                        ),
                        tax_id=TaxId(
                            ein=Ein(
                                number="12-3456789",
                            ),
                        ),
                    ),
                ),
            ),
        )
        """
        _response = self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        *,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.get(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.get(entity_id, return_metadata=return_metadata, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        *,
        request: EntityUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : EntityUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.commons import Address, PhoneNumber
        from mercoa.entity_types import (
            BusinessProfileRequest,
            Ein,
            EntityUpdateRequest,
            ProfileRequest,
            TaxId,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.update(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=EntityUpdateRequest(
                is_customer=True,
                is_payor=True,
                is_payee=False,
                account_type="business",
                foreign_id="MY-DB-ID-12345",
                profile=ProfileRequest(
                    business=BusinessProfileRequest(
                        email="customer@acme.com",
                        legal_business_name="Acme Inc.",
                        website="http://www.acme.com",
                        business_type="llc",
                        phone=PhoneNumber(
                            country_code="1",
                            number="4155551234",
                        ),
                        address=Address(
                            address_line_1="123 Main St",
                            address_line_2="Unit 1",
                            city="San Francisco",
                            state_or_province="CA",
                            postal_code="94105",
                            country="US",
                        ),
                        tax_id=TaxId(
                            ein=Ein(
                                number="12-3456789",
                            ),
                        ),
                    ),
                ),
            ),
        )
        """
        _response = self._raw_client.update(entity_id, request=request, request_options=request_options)
        return _response.data

    def delete(self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Will archive the entity. This action cannot be undone, and the entity will no longer be available for use. The foreignId on the entity will be cleared as well.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.delete(
            entity_id="entityId",
        )
        """
        _response = self._raw_client.delete(entity_id, request_options=request_options)
        return _response.data

    def accept_terms_of_service(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        This endpoint is used to indicate acceptance of Mercoa's terms of service for an entity. Send a request to this endpoint only after the entity has accepted the Mercoa ToS. Entities must accept Mercoa ToS before they can be send or pay invoices using Mercoa's payment rails.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.accept_terms_of_service(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.accept_terms_of_service(entity_id, request_options=request_options)
        return _response.data

    def initiate_kyb(self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        This endpoint is used to initiate KYB for an entity.
        Send a request to this endpoint only after the entity has accepted the Mercoa ToS,
        all representatives have been added, and all required fields have been filled out.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.initiate_kyb(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.initiate_kyb(entity_id, request_options=request_options)
        return _response.data

    def get_token(
        self,
        entity_id: EntityId,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.

        <Warning>We recommend using [this endpoint](/api-reference/entity/user/get-token). This will enable features such as approvals and comments.</Warning>

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.get_token(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=TokenGenerationOptions(
                expires_in="1h",
            ),
        )
        """
        _response = self._raw_client.get_token(entity_id, request=request, request_options=request_options)
        return _response.data

    def get_onboarding_link(
        self,
        entity_id: EntityId,
        *,
        type: EntityOnboardingLinkType,
        expires_in: typing.Optional[str] = None,
        connected_entity_id: typing.Optional[EntityId] = None,
        redirect_to_portal: typing.Optional[bool] = None,
        vendor_portal_options: typing.Optional[VendorPortalOptions] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate an onboarding link for the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        type : EntityOnboardingLinkType
            The type of onboarding link to generate. If not provided, the default is payee. The onboarding options are determined by your organization's onboarding configuration.

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 24h.

        connected_entity_id : typing.Optional[EntityId]
            The ID of the entity to connect to. If onboarding a payee, this should be the payor entity ID. If onboarding a payor, this should be the payee entity ID. If no connected entity ID is provided, the onboarding link will be for a standalone entity.

        redirect_to_portal : typing.Optional[bool]
            If true, the onboarding link will redirect to the vendor/customer portal if the entity is already onboarded. If false, the onboarding link will not redirect to the portal. The default is false.

        vendor_portal_options : typing.Optional[VendorPortalOptions]
            The options for the vendor portal.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.get_onboarding_link(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            type="PAYOR",
            expires_in="1h",
        )
        """
        _response = self._raw_client.get_onboarding_link(
            entity_id,
            type=type,
            expires_in=expires_in,
            connected_entity_id=connected_entity_id,
            redirect_to_portal=redirect_to_portal,
            vendor_portal_options=vendor_portal_options,
            request_options=request_options,
        )
        return _response.data

    def send_onboarding_link(
        self,
        entity_id: EntityId,
        *,
        type: EntityOnboardingLinkType,
        expires_in: typing.Optional[str] = None,
        connected_entity_id: typing.Optional[EntityId] = None,
        redirect_to_portal: typing.Optional[bool] = None,
        vendor_portal_options: typing.Optional[VendorPortalOptions] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Send an email with a onboarding link to the entity. The email will be sent to the email address associated with the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        type : EntityOnboardingLinkType
            The type of onboarding link to generate. If not provided, the default is payee. The onboarding options are determined by your organization's onboarding configuration.

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 7 days.

        connected_entity_id : typing.Optional[EntityId]
            The ID of the entity to connect to. If onboarding a payee, this should be the payor entity ID. If onboarding a payor, this should be the payee entity ID. If no connected entity ID is provided, the onboarding link will be for a standalone entity.

        redirect_to_portal : typing.Optional[bool]
            If true, the onboarding link will redirect to the vendor/customer portal if the entity is already onboarded. If false, the onboarding link will not redirect to the portal. The default is false.

        vendor_portal_options : typing.Optional[VendorPortalOptions]
            The options for the vendor portal.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.send_onboarding_link(
            entity_id="entityId",
            type="PAYEE",
        )
        """
        _response = self._raw_client.send_onboarding_link(
            entity_id,
            type=type,
            expires_in=expires_in,
            connected_entity_id=connected_entity_id,
            redirect_to_portal=redirect_to_portal,
            vendor_portal_options=vendor_portal_options,
            request_options=request_options,
        )
        return _response.data

    def events(
        self,
        entity_id: EntityId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityEventId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityEventsResponse:
        """
        Get all events for an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        start_date : typing.Optional[dt.datetime]
            Start date filter. If not provided, events from the start of time will be returned.

        end_date : typing.Optional[dt.datetime]
            End date filter. If not provided, events to the end of time will be returned.

        limit : typing.Optional[int]
            Number of events to return. Limit can range between 1 and 100, and the default is 50.

        starting_after : typing.Optional[EntityEventId]
            The ID of the event to start after. If not provided, the first page of events will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityEventsResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.events(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.events(
            entity_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data


class AsyncEntityClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEntityClient(client_wrapper=client_wrapper)
        self.counterparty = AsyncCounterpartyClient(client_wrapper=client_wrapper)

        self.email_log = AsyncEmailLogClient(client_wrapper=client_wrapper)

        self.payment_method = AsyncPaymentMethodClient(client_wrapper=client_wrapper)

        self.user = AsyncUserClient(client_wrapper=client_wrapper)

        self.approval_policy = AsyncApprovalPolicyClient(client_wrapper=client_wrapper)

        self.bnpl = AsyncBnplClient(client_wrapper=client_wrapper)

        self.bulk = AsyncBulkClient(client_wrapper=client_wrapper)

        self.customization = AsyncCustomizationClient(client_wrapper=client_wrapper)

        self.document = AsyncDocumentClient(client_wrapper=client_wrapper)

        self.email_template = AsyncEmailTemplateClient(client_wrapper=client_wrapper)

        self.external_accounting_system = AsyncExternalAccountingSystemClient(client_wrapper=client_wrapper)

        self.invoice = AsyncInvoiceClient(client_wrapper=client_wrapper)

        self.metadata = AsyncMetadataClient(client_wrapper=client_wrapper)

        self.notification_policy = AsyncNotificationPolicyClient(client_wrapper=client_wrapper)

        self.representative = AsyncRepresentativeClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEntityClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEntityClient
        """
        return self._raw_client

    async def find(
        self,
        *,
        payment_methods: typing.Optional[bool] = None,
        is_customer: typing.Optional[bool] = None,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        status: typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]] = None,
        is_payee: typing.Optional[bool] = None,
        is_payor: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[MetadataFilter] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindEntityResponse:
        """
        Search all entities with the given filters. If no filters are provided, all entities will be returned.

        Parameters
        ----------
        payment_methods : typing.Optional[bool]
            If true, will include entity payment methods as part of the response

        is_customer : typing.Optional[bool]
            If true, only entities with a direct relationship to the requesting organization will be returned. If false or not provided, all entities will be returned.

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify this entity in your system

        status : typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]]

        is_payee : typing.Optional[bool]
            If true, entities that are marked as payees will be returned.
            If false or not provided, entities that are marked as payees will not be returned.

        is_payor : typing.Optional[bool]
            If true or not provided, entities that are marked as payors will be returned.
            If false, entities that are marked as payors will not be returned.

        name : typing.Optional[str]
            Use search instead. Deprecated. Filter entities by name. Partial matches are supported.

        search : typing.Optional[str]
            Find entities by name, email, or emailTo. Partial matches are supported.

        metadata : typing.Optional[MetadataFilter]
            Filter entities by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityId]
            The ID of the entity to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindEntityResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.find(
                is_customer=True,
                foreign_id="MY-DB-ID-12345",
                payment_methods=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            payment_methods=payment_methods,
            is_customer=is_customer,
            foreign_id=foreign_id,
            status=status,
            is_payee=is_payee,
            is_payor=is_payor,
            name=name,
            search=search,
            metadata=metadata,
            return_metadata=return_metadata,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self, *, request: EntityRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> EntityResponse:
        """
        Parameters
        ----------
        request : EntityRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.commons import Address, PhoneNumber
        from mercoa.entity_types import (
            BusinessProfileRequest,
            Ein,
            EntityCreationRequest,
            ProfileRequest,
            TaxId,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.create(
                request=EntityCreationRequest(
                    is_customer=True,
                    is_payor=True,
                    is_payee=False,
                    account_type="business",
                    foreign_id="MY-DB-ID-12345",
                    profile=ProfileRequest(
                        business=BusinessProfileRequest(
                            email="customer@acme.com",
                            legal_business_name="Acme Inc.",
                            website="http://www.acme.com",
                            business_type="llc",
                            phone=PhoneNumber(
                                country_code="1",
                                number="4155551234",
                            ),
                            address=Address(
                                address_line_1="123 Main St",
                                address_line_2="Unit 1",
                                city="San Francisco",
                                state_or_province="CA",
                                postal_code="94105",
                                country="US",
                            ),
                            tax_id=TaxId(
                                ein=Ein(
                                    number="12-3456789",
                                ),
                            ),
                        ),
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        *,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.get(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            entity_id, return_metadata=return_metadata, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        *,
        request: EntityUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : EntityUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.commons import Address, PhoneNumber
        from mercoa.entity_types import (
            BusinessProfileRequest,
            Ein,
            EntityUpdateRequest,
            ProfileRequest,
            TaxId,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.update(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=EntityUpdateRequest(
                    is_customer=True,
                    is_payor=True,
                    is_payee=False,
                    account_type="business",
                    foreign_id="MY-DB-ID-12345",
                    profile=ProfileRequest(
                        business=BusinessProfileRequest(
                            email="customer@acme.com",
                            legal_business_name="Acme Inc.",
                            website="http://www.acme.com",
                            business_type="llc",
                            phone=PhoneNumber(
                                country_code="1",
                                number="4155551234",
                            ),
                            address=Address(
                                address_line_1="123 Main St",
                                address_line_2="Unit 1",
                                city="San Francisco",
                                state_or_province="CA",
                                postal_code="94105",
                                country="US",
                            ),
                            tax_id=TaxId(
                                ein=Ein(
                                    number="12-3456789",
                                ),
                            ),
                        ),
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(entity_id, request=request, request_options=request_options)
        return _response.data

    async def delete(self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Will archive the entity. This action cannot be undone, and the entity will no longer be available for use. The foreignId on the entity will be cleared as well.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.delete(
                entity_id="entityId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, request_options=request_options)
        return _response.data

    async def accept_terms_of_service(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        This endpoint is used to indicate acceptance of Mercoa's terms of service for an entity. Send a request to this endpoint only after the entity has accepted the Mercoa ToS. Entities must accept Mercoa ToS before they can be send or pay invoices using Mercoa's payment rails.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.accept_terms_of_service(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.accept_terms_of_service(entity_id, request_options=request_options)
        return _response.data

    async def initiate_kyb(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        This endpoint is used to initiate KYB for an entity.
        Send a request to this endpoint only after the entity has accepted the Mercoa ToS,
        all representatives have been added, and all required fields have been filled out.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.initiate_kyb(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.initiate_kyb(entity_id, request_options=request_options)
        return _response.data

    async def get_token(
        self,
        entity_id: EntityId,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity with the given options. This token can be used to authenticate the entity in the Mercoa API and iFrame.

        <Warning>We recommend using [this endpoint](/api-reference/entity/user/get-token). This will enable features such as approvals and comments.</Warning>

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.get_token(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=TokenGenerationOptions(
                    expires_in="1h",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_token(entity_id, request=request, request_options=request_options)
        return _response.data

    async def get_onboarding_link(
        self,
        entity_id: EntityId,
        *,
        type: EntityOnboardingLinkType,
        expires_in: typing.Optional[str] = None,
        connected_entity_id: typing.Optional[EntityId] = None,
        redirect_to_portal: typing.Optional[bool] = None,
        vendor_portal_options: typing.Optional[VendorPortalOptions] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate an onboarding link for the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        type : EntityOnboardingLinkType
            The type of onboarding link to generate. If not provided, the default is payee. The onboarding options are determined by your organization's onboarding configuration.

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 24h.

        connected_entity_id : typing.Optional[EntityId]
            The ID of the entity to connect to. If onboarding a payee, this should be the payor entity ID. If onboarding a payor, this should be the payee entity ID. If no connected entity ID is provided, the onboarding link will be for a standalone entity.

        redirect_to_portal : typing.Optional[bool]
            If true, the onboarding link will redirect to the vendor/customer portal if the entity is already onboarded. If false, the onboarding link will not redirect to the portal. The default is false.

        vendor_portal_options : typing.Optional[VendorPortalOptions]
            The options for the vendor portal.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.get_onboarding_link(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                type="PAYOR",
                expires_in="1h",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_onboarding_link(
            entity_id,
            type=type,
            expires_in=expires_in,
            connected_entity_id=connected_entity_id,
            redirect_to_portal=redirect_to_portal,
            vendor_portal_options=vendor_portal_options,
            request_options=request_options,
        )
        return _response.data

    async def send_onboarding_link(
        self,
        entity_id: EntityId,
        *,
        type: EntityOnboardingLinkType,
        expires_in: typing.Optional[str] = None,
        connected_entity_id: typing.Optional[EntityId] = None,
        redirect_to_portal: typing.Optional[bool] = None,
        vendor_portal_options: typing.Optional[VendorPortalOptions] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Send an email with a onboarding link to the entity. The email will be sent to the email address associated with the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        type : EntityOnboardingLinkType
            The type of onboarding link to generate. If not provided, the default is payee. The onboarding options are determined by your organization's onboarding configuration.

        expires_in : typing.Optional[str]
            Expressed in seconds or a string describing a time span. The default is 7 days.

        connected_entity_id : typing.Optional[EntityId]
            The ID of the entity to connect to. If onboarding a payee, this should be the payor entity ID. If onboarding a payor, this should be the payee entity ID. If no connected entity ID is provided, the onboarding link will be for a standalone entity.

        redirect_to_portal : typing.Optional[bool]
            If true, the onboarding link will redirect to the vendor/customer portal if the entity is already onboarded. If false, the onboarding link will not redirect to the portal. The default is false.

        vendor_portal_options : typing.Optional[VendorPortalOptions]
            The options for the vendor portal.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.send_onboarding_link(
                entity_id="entityId",
                type="PAYEE",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.send_onboarding_link(
            entity_id,
            type=type,
            expires_in=expires_in,
            connected_entity_id=connected_entity_id,
            redirect_to_portal=redirect_to_portal,
            vendor_portal_options=vendor_portal_options,
            request_options=request_options,
        )
        return _response.data

    async def events(
        self,
        entity_id: EntityId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityEventId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityEventsResponse:
        """
        Get all events for an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        start_date : typing.Optional[dt.datetime]
            Start date filter. If not provided, events from the start of time will be returned.

        end_date : typing.Optional[dt.datetime]
            End date filter. If not provided, events to the end of time will be returned.

        limit : typing.Optional[int]
            Number of events to return. Limit can range between 1 and 100, and the default is 50.

        starting_after : typing.Optional[EntityEventId]
            The ID of the event to start after. If not provided, the first page of events will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityEventsResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.events(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.events(
            entity_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data
