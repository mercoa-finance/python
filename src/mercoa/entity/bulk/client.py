# This file was auto-generated by Fern from our API Definition.

import typing

from ...commons.types.bulk_download_format import BulkDownloadFormat
from ...commons.types.bulk_download_response import BulkDownloadResponse
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.bulk_entity_creation_request import BulkEntityCreationRequest
from ...entity_types.types.bulk_entity_creation_response import BulkEntityCreationResponse
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.entity_status import EntityStatus
from ...invoice_types.types.metadata_filter import MetadataFilter
from .raw_client import AsyncRawBulkClient, RawBulkClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BulkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBulkClient
        """
        return self._raw_client

    def create(
        self,
        *,
        request: BulkEntityCreationRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkEntityCreationResponse:
        """
        Create multiple entities in bulk. This endpoint will process synchronously and return a list of entities that were created or failed to create.

        Parameters
        ----------
        request : BulkEntityCreationRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each entity that is created. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkEntityCreationResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.commons import Address, PhoneNumber
        from mercoa.entity_types import (
            BulkConnectedEntity,
            BulkEntityCreationFromObject,
            BusinessProfileRequest,
            Ein,
            EntityCreationRequest,
            ProfileRequest,
            TaxId,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.bulk.create(
            request=BulkEntityCreationFromObject(
                connected_entity=BulkConnectedEntity(
                    id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                    link_created_as_payor=False,
                    link_created_as_payee=True,
                ),
                entities=[
                    EntityCreationRequest(
                        is_customer=True,
                        is_payor=True,
                        is_payee=False,
                        account_type="business",
                        foreign_id="MY-DB-ID-12345",
                        profile=ProfileRequest(
                            business=BusinessProfileRequest(
                                email="customer@acme.com",
                                legal_business_name="Acme Inc.",
                                website="http://www.acme.com",
                                business_type="llc",
                                phone=PhoneNumber(
                                    country_code="1",
                                    number="4155551234",
                                ),
                                address=Address(
                                    address_line_1="123 Main St",
                                    address_line_2="Unit 1",
                                    city="San Francisco",
                                    state_or_province="CA",
                                    postal_code="94105",
                                    country="US",
                                ),
                                tax_id=TaxId(
                                    ein=Ein(
                                        number="12-3456789",
                                    ),
                                ),
                            ),
                        ),
                    )
                ],
            ),
        )
        """
        _response = self._raw_client.create(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    def download(
        self,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        payment_methods: typing.Optional[bool] = None,
        is_customer: typing.Optional[bool] = None,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        status: typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]] = None,
        is_payee: typing.Optional[bool] = None,
        is_payor: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[MetadataFilter] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download a bulk entity as a CSV/JSON file.

        Parameters
        ----------
        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        payment_methods : typing.Optional[bool]
            If true, will include entity payment methods as part of the response

        is_customer : typing.Optional[bool]
            If true, only entities with a direct relationship to the requesting organization will be returned. If false or not provided, all entities will be returned.

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify this entity in your system

        status : typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]]

        is_payee : typing.Optional[bool]
            If true, entities that are marked as payees will be returned.
            If false or not provided, entities that are marked as payees will not be returned.

        is_payor : typing.Optional[bool]
            If true or not provided, entities that are marked as payors will be returned.
            If false, entities that are marked as payors will not be returned.

        name : typing.Optional[str]
            Use search instead. Deprecated. Filter entities by name. Partial matches are supported.

        search : typing.Optional[str]
            Find entities by name, email, or emailTo. Partial matches are supported.

        metadata : typing.Optional[MetadataFilter]
            Filter entities by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityId]
            The ID of the entity to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.bulk.download(
            format="CSV",
        )
        """
        _response = self._raw_client.download(
            format=format,
            payment_methods=payment_methods,
            is_customer=is_customer,
            foreign_id=foreign_id,
            status=status,
            is_payee=is_payee,
            is_payor=is_payor,
            name=name,
            search=search,
            metadata=metadata,
            return_metadata=return_metadata,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data


class AsyncBulkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBulkClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        request: BulkEntityCreationRequest,
        emit_webhooks: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkEntityCreationResponse:
        """
        Create multiple entities in bulk. This endpoint will process synchronously and return a list of entities that were created or failed to create.

        Parameters
        ----------
        request : BulkEntityCreationRequest

        emit_webhooks : typing.Optional[bool]
            If true, webhooks will be emitted for each entity that is created. By default, webhooks are not emitted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkEntityCreationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.commons import Address, PhoneNumber
        from mercoa.entity_types import (
            BulkConnectedEntity,
            BulkEntityCreationFromObject,
            BusinessProfileRequest,
            Ein,
            EntityCreationRequest,
            ProfileRequest,
            TaxId,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.bulk.create(
                request=BulkEntityCreationFromObject(
                    connected_entity=BulkConnectedEntity(
                        id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                        link_created_as_payor=False,
                        link_created_as_payee=True,
                    ),
                    entities=[
                        EntityCreationRequest(
                            is_customer=True,
                            is_payor=True,
                            is_payee=False,
                            account_type="business",
                            foreign_id="MY-DB-ID-12345",
                            profile=ProfileRequest(
                                business=BusinessProfileRequest(
                                    email="customer@acme.com",
                                    legal_business_name="Acme Inc.",
                                    website="http://www.acme.com",
                                    business_type="llc",
                                    phone=PhoneNumber(
                                        country_code="1",
                                        number="4155551234",
                                    ),
                                    address=Address(
                                        address_line_1="123 Main St",
                                        address_line_2="Unit 1",
                                        city="San Francisco",
                                        state_or_province="CA",
                                        postal_code="94105",
                                        country="US",
                                    ),
                                    tax_id=TaxId(
                                        ein=Ein(
                                            number="12-3456789",
                                        ),
                                    ),
                                ),
                            ),
                        )
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            request=request, emit_webhooks=emit_webhooks, request_options=request_options
        )
        return _response.data

    async def download(
        self,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        payment_methods: typing.Optional[bool] = None,
        is_customer: typing.Optional[bool] = None,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        status: typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]] = None,
        is_payee: typing.Optional[bool] = None,
        is_payor: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        metadata: typing.Optional[MetadataFilter] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download a bulk entity as a CSV/JSON file.

        Parameters
        ----------
        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        payment_methods : typing.Optional[bool]
            If true, will include entity payment methods as part of the response

        is_customer : typing.Optional[bool]
            If true, only entities with a direct relationship to the requesting organization will be returned. If false or not provided, all entities will be returned.

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify this entity in your system

        status : typing.Optional[typing.Union[EntityStatus, typing.Sequence[EntityStatus]]]

        is_payee : typing.Optional[bool]
            If true, entities that are marked as payees will be returned.
            If false or not provided, entities that are marked as payees will not be returned.

        is_payor : typing.Optional[bool]
            If true or not provided, entities that are marked as payors will be returned.
            If false, entities that are marked as payors will not be returned.

        name : typing.Optional[str]
            Use search instead. Deprecated. Filter entities by name. Partial matches are supported.

        search : typing.Optional[str]
            Find entities by name, email, or emailTo. Partial matches are supported.

        metadata : typing.Optional[MetadataFilter]
            Filter entities by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities. For more complex metadata, use the Metadata API.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityId]
            The ID of the entity to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.bulk.download(
                format="CSV",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.download(
            format=format,
            payment_methods=payment_methods,
            is_customer=is_customer,
            foreign_id=foreign_id,
            status=status,
            is_payee=is_payee,
            is_payor=is_payor,
            name=name,
            search=search,
            metadata=metadata,
            return_metadata=return_metadata,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data
