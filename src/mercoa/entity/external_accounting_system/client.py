# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.entity_id import EntityId
from .raw_client import AsyncRawExternalAccountingSystemClient, RawExternalAccountingSystemClient
from .types.external_accounting_system_company_creation_request import ExternalAccountingSystemCompanyCreationRequest
from .types.external_accounting_system_company_response import ExternalAccountingSystemCompanyResponse
from .types.sync_type import SyncType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ExternalAccountingSystemClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawExternalAccountingSystemClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawExternalAccountingSystemClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawExternalAccountingSystemClient
        """
        return self._raw_client

    def get(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ExternalAccountingSystemCompanyResponse:
        """
        Get the external accounting system connected to an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExternalAccountingSystemCompanyResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.external_accounting_system.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get(entity_id, request_options=request_options)
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        *,
        request: ExternalAccountingSystemCompanyCreationRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ExternalAccountingSystemCompanyResponse:
        """
        Create/Link an entity to an external accounting system like Codat or Rutter. If the entity is already linked to an external accounting system, this will return the existing connection.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : ExternalAccountingSystemCompanyCreationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExternalAccountingSystemCompanyResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity.external_accounting_system import (
            ExternalAccountingSystemCompanyCreationRequest_Rutter,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.external_accounting_system.create(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=ExternalAccountingSystemCompanyCreationRequest_Rutter(
                access_token="123",
            ),
        )
        """
        _response = self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    def connect(self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get a link to connect an entity to an external accounting system like Quickbooks or Xero

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.external_accounting_system.connect(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.connect(entity_id, request_options=request_options)
        return _response.data

    def sync(
        self,
        entity_id: EntityId,
        *,
        vendors: typing.Optional[SyncType] = None,
        bills: typing.Optional[SyncType] = None,
        gl_accounts: typing.Optional[SyncType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Sync an entity with an external accounting system. Will sync customers/vendors and invoices.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        vendors : typing.Optional[SyncType]
            Sync vendors from external accounting system. Default is to pull vendors from external system.

        bills : typing.Optional[SyncType]
            Sync bills from external accounting system. Default is to not sync bills. Invoices that already exist in both systems will not be updated, only new invoices not present in the other system will be created.

        gl_accounts : typing.Optional[SyncType]
            Sync GL accounts from external accounting system. Default is to pull GL accounts from external system. Pushing GL accounts is not supported.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.external_accounting_system.sync(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            vendors="pull",
            bills="push",
            gl_accounts="pull",
        )
        """
        _response = self._raw_client.sync(
            entity_id, vendors=vendors, bills=bills, gl_accounts=gl_accounts, request_options=request_options
        )
        return _response.data


class AsyncExternalAccountingSystemClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawExternalAccountingSystemClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawExternalAccountingSystemClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawExternalAccountingSystemClient
        """
        return self._raw_client

    async def get(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ExternalAccountingSystemCompanyResponse:
        """
        Get the external accounting system connected to an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExternalAccountingSystemCompanyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.external_accounting_system.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        *,
        request: ExternalAccountingSystemCompanyCreationRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ExternalAccountingSystemCompanyResponse:
        """
        Create/Link an entity to an external accounting system like Codat or Rutter. If the entity is already linked to an external accounting system, this will return the existing connection.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : ExternalAccountingSystemCompanyCreationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExternalAccountingSystemCompanyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity.external_accounting_system import (
            ExternalAccountingSystemCompanyCreationRequest_Rutter,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.external_accounting_system.create(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=ExternalAccountingSystemCompanyCreationRequest_Rutter(
                    access_token="123",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    async def connect(self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get a link to connect an entity to an external accounting system like Quickbooks or Xero

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.external_accounting_system.connect(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.connect(entity_id, request_options=request_options)
        return _response.data

    async def sync(
        self,
        entity_id: EntityId,
        *,
        vendors: typing.Optional[SyncType] = None,
        bills: typing.Optional[SyncType] = None,
        gl_accounts: typing.Optional[SyncType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Sync an entity with an external accounting system. Will sync customers/vendors and invoices.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        vendors : typing.Optional[SyncType]
            Sync vendors from external accounting system. Default is to pull vendors from external system.

        bills : typing.Optional[SyncType]
            Sync bills from external accounting system. Default is to not sync bills. Invoices that already exist in both systems will not be updated, only new invoices not present in the other system will be created.

        gl_accounts : typing.Optional[SyncType]
            Sync GL accounts from external accounting system. Default is to pull GL accounts from external system. Pushing GL accounts is not supported.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.external_accounting_system.sync(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                vendors="pull",
                bills="push",
                gl_accounts="pull",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.sync(
            entity_id, vendors=vendors, bills=bills, gl_accounts=gl_accounts, request_options=request_options
        )
        return _response.data
