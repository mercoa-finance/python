# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.notification_policy_request import NotificationPolicyRequest
from ...entity_types.types.notification_policy_response import NotificationPolicyResponse
from ...entity_types.types.notification_type import NotificationType
from .raw_client import AsyncRawNotificationPolicyClient, RawNotificationPolicyClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NotificationPolicyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNotificationPolicyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNotificationPolicyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNotificationPolicyClient
        """
        return self._raw_client

    def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[NotificationPolicyResponse]:
        """
        Retrieve all notification policies associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationPolicyResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.notification_policy.get_all(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        notification_type: NotificationType,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationPolicyResponse:
        """
        Retrieve notification policy associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        notification_type : NotificationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationPolicyResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.notification_policy.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            notification_type="INVOICE_APPROVAL_NEEDED",
        )
        """
        _response = self._raw_client.get(entity_id, notification_type, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        notification_type: NotificationType,
        *,
        request: NotificationPolicyRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationPolicyResponse:
        """
        Update notification policy associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        notification_type : NotificationType

        request : NotificationPolicyRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationPolicyResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import NotificationPolicyRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.notification_policy.update(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            notification_type="INVOICE_APPROVAL_NEEDED",
            request=NotificationPolicyRequest(
                disabled=False,
                additional_roles=["admin", "approver"],
            ),
        )
        """
        _response = self._raw_client.update(
            entity_id, notification_type, request=request, request_options=request_options
        )
        return _response.data


class AsyncNotificationPolicyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNotificationPolicyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNotificationPolicyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNotificationPolicyClient
        """
        return self._raw_client

    async def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[NotificationPolicyResponse]:
        """
        Retrieve all notification policies associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationPolicyResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.notification_policy.get_all(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        notification_type: NotificationType,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationPolicyResponse:
        """
        Retrieve notification policy associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        notification_type : NotificationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationPolicyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.notification_policy.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                notification_type="INVOICE_APPROVAL_NEEDED",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, notification_type, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        notification_type: NotificationType,
        *,
        request: NotificationPolicyRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationPolicyResponse:
        """
        Update notification policy associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        notification_type : NotificationType

        request : NotificationPolicyRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationPolicyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import NotificationPolicyRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.notification_policy.update(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                notification_type="INVOICE_APPROVAL_NEEDED",
                request=NotificationPolicyRequest(
                    disabled=False,
                    additional_roles=["admin", "approver"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_id, notification_type, request=request, request_options=request_options
        )
        return _response.data
