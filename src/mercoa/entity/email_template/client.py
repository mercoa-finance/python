# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.email_template_id import EmailTemplateId
from ...entity_types.types.email_template_request import EmailTemplateRequest
from ...entity_types.types.email_template_response import EmailTemplateResponse
from ...entity_types.types.entity_id import EntityId
from .raw_client import AsyncRawEmailTemplateClient, RawEmailTemplateClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EmailTemplateClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEmailTemplateClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEmailTemplateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEmailTemplateClient
        """
        return self._raw_client

    def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EmailTemplateResponse]:
        """
        Get all email templates for the entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EmailTemplateResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_template.get_all(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        *,
        request: EmailTemplateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailTemplateResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : EmailTemplateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailTemplateResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import EmailTemplateRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_template.create(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=EmailTemplateRequest(
                template_type="PAYMENT",
                name="Generic Payment Email",
                subject="Action Required - Your payment is due",
                content="<h1>Your invoice has been sent.</h1>",
                is_default=True,
            ),
        )
        """
        _response = self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        email_template_id: EmailTemplateId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailTemplateResponse:
        """
        Get entity email template

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        email_template_id : EmailTemplateId
            Email Template ID or Email Template ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailTemplateResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_template.get(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            email_template_id="emt_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get(entity_id, email_template_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        email_template_id: EmailTemplateId,
        *,
        request: EmailTemplateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailTemplateResponse:
        """
        Update entity email template

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        email_template_id : EmailTemplateId
            Email Template ID or Email Template ForeignID

        request : EmailTemplateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailTemplateResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import EmailTemplateRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_template.update(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            email_template_id="emt_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EmailTemplateRequest(
                template_type="PAYMENT",
                name="Generic Payment Email",
                subject="Action Required - Your payment is due",
                content="<h1>Your invoice has been sent.</h1>",
                is_default=True,
            ),
        )
        """
        _response = self._raw_client.update(
            entity_id, email_template_id, request=request, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        entity_id: EntityId,
        email_template_id: EmailTemplateId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete entity email template. This will also remove the email template from all entities.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        email_template_id : EmailTemplateId
            Email Template ID or Email Template ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_template.delete(
            entity_id="entityId",
            email_template_id="emailTemplateId",
        )
        """
        _response = self._raw_client.delete(entity_id, email_template_id, request_options=request_options)
        return _response.data


class AsyncEmailTemplateClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEmailTemplateClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEmailTemplateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEmailTemplateClient
        """
        return self._raw_client

    async def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EmailTemplateResponse]:
        """
        Get all email templates for the entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EmailTemplateResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_template.get_all(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        *,
        request: EmailTemplateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailTemplateResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : EmailTemplateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailTemplateResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import EmailTemplateRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_template.create(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=EmailTemplateRequest(
                    template_type="PAYMENT",
                    name="Generic Payment Email",
                    subject="Action Required - Your payment is due",
                    content="<h1>Your invoice has been sent.</h1>",
                    is_default=True,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        email_template_id: EmailTemplateId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailTemplateResponse:
        """
        Get entity email template

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        email_template_id : EmailTemplateId
            Email Template ID or Email Template ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailTemplateResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_template.get(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                email_template_id="emt_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, email_template_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        email_template_id: EmailTemplateId,
        *,
        request: EmailTemplateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailTemplateResponse:
        """
        Update entity email template

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        email_template_id : EmailTemplateId
            Email Template ID or Email Template ForeignID

        request : EmailTemplateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailTemplateResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import EmailTemplateRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_template.update(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                email_template_id="emt_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EmailTemplateRequest(
                    template_type="PAYMENT",
                    name="Generic Payment Email",
                    subject="Action Required - Your payment is due",
                    content="<h1>Your invoice has been sent.</h1>",
                    is_default=True,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_id, email_template_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        entity_id: EntityId,
        email_template_id: EmailTemplateId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete entity email template. This will also remove the email template from all entities.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        email_template_id : EmailTemplateId
            Email Template ID or Email Template ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_template.delete(
                entity_id="entityId",
                email_template_id="emailTemplateId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, email_template_id, request_options=request_options)
        return _response.data
