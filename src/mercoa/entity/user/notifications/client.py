# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....commons.types.order_direction import OrderDirection
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....entity_types.types.entity_id import EntityId
from ....entity_types.types.entity_user_id import EntityUserId
from ....entity_types.types.find_notification_response import FindNotificationResponse
from ....entity_types.types.notification_id import NotificationId
from ....entity_types.types.notification_response import NotificationResponse
from ....entity_types.types.notification_status import NotificationStatus
from ....entity_types.types.notification_type import NotificationType
from ....entity_types.types.notification_update_request import NotificationUpdateRequest
from .raw_client import AsyncRawNotificationsClient, RawNotificationsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NotificationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNotificationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNotificationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNotificationsClient
        """
        return self._raw_client

    def find(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[NotificationId] = None,
        notification_type: typing.Optional[typing.Union[NotificationType, typing.Sequence[NotificationType]]] = None,
        status: typing.Optional[NotificationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindNotificationResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        start_date : typing.Optional[dt.datetime]
            Start date for notification created on date filter.

        end_date : typing.Optional[dt.datetime]
            End date for notification created date filter.

        order_direction : typing.Optional[OrderDirection]
            Direction to order notifications by. Defaults to asc.

        limit : typing.Optional[int]
            Number of invoices to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[NotificationId]
            The ID of the notification to start after. If not provided, the first page of invoices will be returned.

        notification_type : typing.Optional[typing.Union[NotificationType, typing.Sequence[NotificationType]]]
            The type of notification to filter by.

        status : typing.Optional[NotificationStatus]
            The status of the notification to filter by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindNotificationResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.notifications.find(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        )
        """
        _response = self._raw_client.find(
            entity_id,
            user_id,
            start_date=start_date,
            end_date=end_date,
            order_direction=order_direction,
            limit=limit,
            starting_after=starting_after,
            notification_type=notification_type,
            status=status,
            request_options=request_options,
        )
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        notification_id: NotificationId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        notification_id : NotificationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.notifications.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            notification_id="notif_7df2974a-4069-454c-912f-7e58ebe030fb",
        )
        """
        _response = self._raw_client.get(entity_id, user_id, notification_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        notification_id: NotificationId,
        *,
        request: NotificationUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationResponse:
        """
        Update the status of a notification.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        notification_id : NotificationId

        request : NotificationUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import NotificationUpdateRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.notifications.update(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            notification_id="notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            request=NotificationUpdateRequest(
                status="READ",
            ),
        )
        """
        _response = self._raw_client.update(
            entity_id, user_id, notification_id, request=request, request_options=request_options
        )
        return _response.data


class AsyncNotificationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNotificationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNotificationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNotificationsClient
        """
        return self._raw_client

    async def find(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        order_direction: typing.Optional[OrderDirection] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[NotificationId] = None,
        notification_type: typing.Optional[typing.Union[NotificationType, typing.Sequence[NotificationType]]] = None,
        status: typing.Optional[NotificationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindNotificationResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        start_date : typing.Optional[dt.datetime]
            Start date for notification created on date filter.

        end_date : typing.Optional[dt.datetime]
            End date for notification created date filter.

        order_direction : typing.Optional[OrderDirection]
            Direction to order notifications by. Defaults to asc.

        limit : typing.Optional[int]
            Number of invoices to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[NotificationId]
            The ID of the notification to start after. If not provided, the first page of invoices will be returned.

        notification_type : typing.Optional[typing.Union[NotificationType, typing.Sequence[NotificationType]]]
            The type of notification to filter by.

        status : typing.Optional[NotificationStatus]
            The status of the notification to filter by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindNotificationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.notifications.find(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            entity_id,
            user_id,
            start_date=start_date,
            end_date=end_date,
            order_direction=order_direction,
            limit=limit,
            starting_after=starting_after,
            notification_type=notification_type,
            status=status,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        notification_id: NotificationId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        notification_id : NotificationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.notifications.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                notification_id="notif_7df2974a-4069-454c-912f-7e58ebe030fb",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, user_id, notification_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        notification_id: NotificationId,
        *,
        request: NotificationUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationResponse:
        """
        Update the status of a notification.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        notification_id : NotificationId

        request : NotificationUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import NotificationUpdateRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.notifications.update(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                notification_id="notif_7df2974a-4069-454c-912f-7e58ebe030fb",
                request=NotificationUpdateRequest(
                    status="READ",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_id, user_id, notification_id, request=request, request_options=request_options
        )
        return _response.data
