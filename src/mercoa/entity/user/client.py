# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.entity_user_id import EntityUserId
from ...entity_types.types.entity_user_request import EntityUserRequest
from ...entity_types.types.entity_user_response import EntityUserResponse
from ...entity_types.types.find_entity_user_response import FindEntityUserResponse
from ...entity_types.types.token_generation_options import TokenGenerationOptions
from .notification_policy.client import AsyncNotificationPolicyClient, NotificationPolicyClient
from .notifications.client import AsyncNotificationsClient, NotificationsClient
from .raw_client import AsyncRawUserClient, RawUserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)
        self.notification_policy = NotificationPolicyClient(client_wrapper=client_wrapper)

        self.notifications = NotificationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def find(
        self,
        entity_id: EntityId,
        *,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        role: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityUserId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindEntityUserResponse:
        """
        Search entity users

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify user in your system

        role : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter users by role. If multiple roles are provided, users with any of the roles will be returned.

        name : typing.Optional[str]
            Filter users by name. Partial matches are supported.

        email : typing.Optional[str]
            Filter users by email. Partial matches are supported.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityUserId]
            The ID of the user to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindEntityUserResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.find(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            name="John",
        )
        """
        _response = self._raw_client.find(
            entity_id,
            foreign_id=foreign_id,
            role=role,
            name=name,
            email=email,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        *,
        request: EntityUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityUserResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : EntityUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityUserResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import EntityUserRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.create(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=EntityUserRequest(
                foreign_id="MY-DB-ID-12345",
                email="john.doe@acme.com",
                name="John Doe",
                roles=["admin", "approver"],
            ),
        )
        """
        _response = self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self, entity_id: EntityId, user_id: EntityUserId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EntityUserResponse:
        """
        Get entity user

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityUserResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.get(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            user_id="user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
        )
        """
        _response = self._raw_client.get(entity_id, user_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        *,
        request: EntityUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityUserResponse:
        """
        Update entity user

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request : EntityUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityUserResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import EntityUserRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.update(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            user_id="user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            request=EntityUserRequest(
                foreign_id="MY-DB-ID-12345",
                email="john.doe@acme.com",
                name="John Doe",
                roles=["admin", "approver"],
            ),
        )
        """
        _response = self._raw_client.update(entity_id, user_id, request=request, request_options=request_options)
        return _response.data

    def delete(
        self, entity_id: EntityId, user_id: EntityUserId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete entity user. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.delete(
            entity_id="entityId",
            user_id="userId",
        )
        """
        _response = self._raw_client.delete(entity_id, user_id, request_options=request_options)
        return _response.data

    def get_token(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.user.get_token(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            user_id="user_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=TokenGenerationOptions(
                expires_in="1h",
            ),
        )
        """
        _response = self._raw_client.get_token(entity_id, user_id, request=request, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)
        self.notification_policy = AsyncNotificationPolicyClient(client_wrapper=client_wrapper)

        self.notifications = AsyncNotificationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def find(
        self,
        entity_id: EntityId,
        *,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        role: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityUserId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindEntityUserResponse:
        """
        Search entity users

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify user in your system

        role : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter users by role. If multiple roles are provided, users with any of the roles will be returned.

        name : typing.Optional[str]
            Filter users by name. Partial matches are supported.

        email : typing.Optional[str]
            Filter users by email. Partial matches are supported.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityUserId]
            The ID of the user to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindEntityUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.find(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                name="John",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            entity_id,
            foreign_id=foreign_id,
            role=role,
            name=name,
            email=email,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        *,
        request: EntityUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityUserResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : EntityUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import EntityUserRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.create(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=EntityUserRequest(
                    foreign_id="MY-DB-ID-12345",
                    email="john.doe@acme.com",
                    name="John Doe",
                    roles=["admin", "approver"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self, entity_id: EntityId, user_id: EntityUserId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EntityUserResponse:
        """
        Get entity user

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.get(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                user_id="user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, user_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        *,
        request: EntityUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityUserResponse:
        """
        Update entity user

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request : EntityUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import EntityUserRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.update(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                user_id="user_ec3aafc8-ea86-408a-a6c1-545497badbbb",
                request=EntityUserRequest(
                    foreign_id="MY-DB-ID-12345",
                    email="john.doe@acme.com",
                    name="John Doe",
                    roles=["admin", "approver"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(entity_id, user_id, request=request, request_options=request_options)
        return _response.data

    async def delete(
        self, entity_id: EntityId, user_id: EntityUserId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete entity user. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.delete(
                entity_id="entityId",
                user_id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, user_id, request_options=request_options)
        return _response.data

    async def get_token(
        self,
        entity_id: EntityId,
        user_id: EntityUserId,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity user with the given options. This token can be used to authenticate the entity and entity user in the Mercoa API and iFrame.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        user_id : EntityUserId
            User ID or User ForeignID

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.user.get_token(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                user_id="user_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=TokenGenerationOptions(
                    expires_in="1h",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_token(
            entity_id, user_id, request=request, request_options=request_options
        )
        return _response.data
