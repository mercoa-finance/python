# This file was auto-generated by Fern from our API Definition.

import typing

from ....commons.types.bulk_download_format import BulkDownloadFormat
from ....commons.types.bulk_download_response import BulkDownloadResponse
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....entity_types.types.counterparty_network_type import CounterpartyNetworkType
from ....entity_types.types.entity_id import EntityId
from ....invoice_types.types.metadata_filter import MetadataFilter
from .raw_client import AsyncRawBulkClient, RawBulkClient


class BulkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBulkClient
        """
        return self._raw_client

    def download_payees(
        self,
        entity_id: EntityId,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        search: typing.Optional[str] = None,
        network_type: typing.Optional[
            typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]
        ] = None,
        payment_methods: typing.Optional[bool] = None,
        invoice_metrics: typing.Optional[bool] = None,
        counterparty_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download payee counterparties as a CSV/JSON file. This endpoint lets you download vendors linked to the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        search : typing.Optional[str]
            Filter counterparties by name or email. Partial matches are supported.

        network_type : typing.Optional[typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]]
            Filter by network type. By default, only ENTITY counterparties are returned.

        payment_methods : typing.Optional[bool]
            If true, will include counterparty payment methods as part of the response

        invoice_metrics : typing.Optional[bool]
            If true, will include counterparty invoice metrics as part of the response

        counterparty_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter by counterparty ids (Foreign ID is supported)

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter counterparties by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            If true, will return simple key/value metadata for the counterparties. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.bulk.download_payees(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            format="CSV",
            payment_methods=True,
            invoice_metrics=True,
        )
        """
        _response = self._raw_client.download_payees(
            entity_id,
            format=format,
            search=search,
            network_type=network_type,
            payment_methods=payment_methods,
            invoice_metrics=invoice_metrics,
            counterparty_id=counterparty_id,
            metadata=metadata,
            return_metadata=return_metadata,
            request_options=request_options,
        )
        return _response.data

    def download_payors(
        self,
        entity_id: EntityId,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        search: typing.Optional[str] = None,
        network_type: typing.Optional[
            typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]
        ] = None,
        payment_methods: typing.Optional[bool] = None,
        invoice_metrics: typing.Optional[bool] = None,
        counterparty_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download payor counterparties as a CSV/JSON file. This endpoint lets you download customers linked to the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        search : typing.Optional[str]
            Filter counterparties by name or email. Partial matches are supported.

        network_type : typing.Optional[typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]]
            Filter by network type. By default, only ENTITY counterparties are returned.

        payment_methods : typing.Optional[bool]
            If true, will include counterparty payment methods as part of the response

        invoice_metrics : typing.Optional[bool]
            If true, will include counterparty invoice metrics as part of the response

        counterparty_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter by counterparty ids (Foreign ID is supported)

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter counterparties by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            If true, will return simple key/value metadata for the counterparties. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.bulk.download_payors(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            format="CSV",
            payment_methods=True,
            invoice_metrics=True,
        )
        """
        _response = self._raw_client.download_payors(
            entity_id,
            format=format,
            search=search,
            network_type=network_type,
            payment_methods=payment_methods,
            invoice_metrics=invoice_metrics,
            counterparty_id=counterparty_id,
            metadata=metadata,
            return_metadata=return_metadata,
            request_options=request_options,
        )
        return _response.data


class AsyncBulkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBulkClient
        """
        return self._raw_client

    async def download_payees(
        self,
        entity_id: EntityId,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        search: typing.Optional[str] = None,
        network_type: typing.Optional[
            typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]
        ] = None,
        payment_methods: typing.Optional[bool] = None,
        invoice_metrics: typing.Optional[bool] = None,
        counterparty_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download payee counterparties as a CSV/JSON file. This endpoint lets you download vendors linked to the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        search : typing.Optional[str]
            Filter counterparties by name or email. Partial matches are supported.

        network_type : typing.Optional[typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]]
            Filter by network type. By default, only ENTITY counterparties are returned.

        payment_methods : typing.Optional[bool]
            If true, will include counterparty payment methods as part of the response

        invoice_metrics : typing.Optional[bool]
            If true, will include counterparty invoice metrics as part of the response

        counterparty_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter by counterparty ids (Foreign ID is supported)

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter counterparties by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            If true, will return simple key/value metadata for the counterparties. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.bulk.download_payees(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                format="CSV",
                payment_methods=True,
                invoice_metrics=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.download_payees(
            entity_id,
            format=format,
            search=search,
            network_type=network_type,
            payment_methods=payment_methods,
            invoice_metrics=invoice_metrics,
            counterparty_id=counterparty_id,
            metadata=metadata,
            return_metadata=return_metadata,
            request_options=request_options,
        )
        return _response.data

    async def download_payors(
        self,
        entity_id: EntityId,
        *,
        format: typing.Optional[BulkDownloadFormat] = None,
        search: typing.Optional[str] = None,
        network_type: typing.Optional[
            typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]
        ] = None,
        payment_methods: typing.Optional[bool] = None,
        invoice_metrics: typing.Optional[bool] = None,
        counterparty_id: typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]] = None,
        metadata: typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]] = None,
        return_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkDownloadResponse:
        """
        Get a URL to download payor counterparties as a CSV/JSON file. This endpoint lets you download customers linked to the entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        format : typing.Optional[BulkDownloadFormat]
            Format of the file to download. Defaults to CSV.

        search : typing.Optional[str]
            Filter counterparties by name or email. Partial matches are supported.

        network_type : typing.Optional[typing.Union[CounterpartyNetworkType, typing.Sequence[CounterpartyNetworkType]]]
            Filter by network type. By default, only ENTITY counterparties are returned.

        payment_methods : typing.Optional[bool]
            If true, will include counterparty payment methods as part of the response

        invoice_metrics : typing.Optional[bool]
            If true, will include counterparty invoice metrics as part of the response

        counterparty_id : typing.Optional[typing.Union[EntityId, typing.Sequence[EntityId]]]
            Filter by counterparty ids (Foreign ID is supported)

        metadata : typing.Optional[typing.Union[MetadataFilter, typing.Sequence[MetadataFilter]]]
            Filter counterparties by simple key/value metadata. Each filter will be applied as an AND condition. Duplicate keys will be ignored.

        return_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            If true, will return simple key/value metadata for the counterparties. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDownloadResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.bulk.download_payors(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                format="CSV",
                payment_methods=True,
                invoice_metrics=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.download_payors(
            entity_id,
            format=format,
            search=search,
            network_type=network_type,
            payment_methods=payment_methods,
            invoice_metrics=invoice_metrics,
            counterparty_id=counterparty_id,
            metadata=metadata,
            return_metadata=return_metadata,
            request_options=request_options,
        )
        return _response.data
