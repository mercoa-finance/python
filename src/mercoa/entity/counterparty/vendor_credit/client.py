# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....entity_types.types.entity_id import EntityId
from ....invoice_types.types.invoice_id import InvoiceId
from ....payment_method_types.types.currency_code import CurrencyCode
from ....vendor_credit_types.types.calculate_vendor_credit_usage_response import CalculateVendorCreditUsageResponse
from ....vendor_credit_types.types.find_vendor_credit_response import FindVendorCreditResponse
from ....vendor_credit_types.types.vendor_credit_id import VendorCreditId
from ....vendor_credit_types.types.vendor_credit_request import VendorCreditRequest
from ....vendor_credit_types.types.vendor_credit_response import VendorCreditResponse
from .raw_client import AsyncRawVendorCreditClient, RawVendorCreditClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VendorCreditClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawVendorCreditClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawVendorCreditClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawVendorCreditClient
        """
        return self._raw_client

    def get_all(
        self, entity_id: EntityId, counterparty_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FindVendorCreditResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindVendorCreditResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.vendor_credit.get_all(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
        )
        """
        _response = self._raw_client.get_all(entity_id, counterparty_id, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        vendor_credit_id: VendorCreditId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VendorCreditResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        vendor_credit_id : VendorCreditId
            ID of the vendor credit to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VendorCreditResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.vendor_credit.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            vendor_credit_id="vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
        )
        """
        _response = self._raw_client.get(entity_id, counterparty_id, vendor_credit_id, request_options=request_options)
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        *,
        request: VendorCreditRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VendorCreditResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        request : VendorCreditRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VendorCreditResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.vendor_credit_types import VendorCreditRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.vendor_credit.create(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            request=VendorCreditRequest(
                total_amount=100.0,
                currency="USD",
                note="This is a note",
            ),
        )
        """
        _response = self._raw_client.create(
            entity_id, counterparty_id, request=request, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        vendor_credit_id: VendorCreditId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        vendor_credit_id : VendorCreditId
            ID of the vendor credit to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.vendor_credit.delete(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            vendor_credit_id="vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
        )
        """
        _response = self._raw_client.delete(
            entity_id, counterparty_id, vendor_credit_id, request_options=request_options
        )
        return _response.data

    def estimate_usage(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        *,
        amount: float,
        currency: typing.Optional[CurrencyCode] = None,
        excluded_invoice_ids: typing.Optional[typing.Sequence[InvoiceId]] = None,
        included_vendor_credit_ids: typing.Optional[typing.Sequence[VendorCreditId]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CalculateVendorCreditUsageResponse:
        """
        Estimate the usage of vendor credits on an invoice of a given amount

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        amount : float
            The amount of the invoice to calculate vendor credit usage for.

        currency : typing.Optional[CurrencyCode]
            The currency of the invoice to calculate vendor credit usage for. Defaults to USD.

        excluded_invoice_ids : typing.Optional[typing.Sequence[InvoiceId]]
            List of invoice IDs to exclude from the calculation. If not provided or an empty list, no invoices will be excluded. This is useful for recalculating vendor credit usage on invoices that already have vendor credits applied.

        included_vendor_credit_ids : typing.Optional[typing.Sequence[VendorCreditId]]
            List of vendor credit IDs to include in the calculation. If not provided, all applicable vendor credits will be included, while an empty list will not include ANY vendor credits.  This is useful for recalculating vendor credit usage on invoices that have a fixed list of applied vendor credits (e.g. a SCHEDULED or PENDING invoice).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CalculateVendorCreditUsageResponse
            The vendor credit usage estimate

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.counterparty.vendor_credit.estimate_usage(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            amount=150.0,
            currency="USD",
        )
        """
        _response = self._raw_client.estimate_usage(
            entity_id,
            counterparty_id,
            amount=amount,
            currency=currency,
            excluded_invoice_ids=excluded_invoice_ids,
            included_vendor_credit_ids=included_vendor_credit_ids,
            request_options=request_options,
        )
        return _response.data


class AsyncVendorCreditClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawVendorCreditClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawVendorCreditClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawVendorCreditClient
        """
        return self._raw_client

    async def get_all(
        self, entity_id: EntityId, counterparty_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FindVendorCreditResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindVendorCreditResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.vendor_credit.get_all(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, counterparty_id, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        vendor_credit_id: VendorCreditId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VendorCreditResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        vendor_credit_id : VendorCreditId
            ID of the vendor credit to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VendorCreditResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.vendor_credit.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                vendor_credit_id="vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            entity_id, counterparty_id, vendor_credit_id, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        *,
        request: VendorCreditRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VendorCreditResponse:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        request : VendorCreditRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VendorCreditResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.vendor_credit_types import VendorCreditRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.vendor_credit.create(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                request=VendorCreditRequest(
                    total_amount=100.0,
                    currency="USD",
                    note="This is a note",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            entity_id, counterparty_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        vendor_credit_id: VendorCreditId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        vendor_credit_id : VendorCreditId
            ID of the vendor credit to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.vendor_credit.delete(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                vendor_credit_id="vcr_c3f4c87d-794d-4543-9562-575cdddfc0d7",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            entity_id, counterparty_id, vendor_credit_id, request_options=request_options
        )
        return _response.data

    async def estimate_usage(
        self,
        entity_id: EntityId,
        counterparty_id: EntityId,
        *,
        amount: float,
        currency: typing.Optional[CurrencyCode] = None,
        excluded_invoice_ids: typing.Optional[typing.Sequence[InvoiceId]] = None,
        included_vendor_credit_ids: typing.Optional[typing.Sequence[VendorCreditId]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CalculateVendorCreditUsageResponse:
        """
        Estimate the usage of vendor credits on an invoice of a given amount

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        counterparty_id : EntityId
            Counterparty Entity ID or Counterparty Entity ForeignID

        amount : float
            The amount of the invoice to calculate vendor credit usage for.

        currency : typing.Optional[CurrencyCode]
            The currency of the invoice to calculate vendor credit usage for. Defaults to USD.

        excluded_invoice_ids : typing.Optional[typing.Sequence[InvoiceId]]
            List of invoice IDs to exclude from the calculation. If not provided or an empty list, no invoices will be excluded. This is useful for recalculating vendor credit usage on invoices that already have vendor credits applied.

        included_vendor_credit_ids : typing.Optional[typing.Sequence[VendorCreditId]]
            List of vendor credit IDs to include in the calculation. If not provided, all applicable vendor credits will be included, while an empty list will not include ANY vendor credits.  This is useful for recalculating vendor credit usage on invoices that have a fixed list of applied vendor credits (e.g. a SCHEDULED or PENDING invoice).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CalculateVendorCreditUsageResponse
            The vendor credit usage estimate

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.counterparty.vendor_credit.estimate_usage(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                amount=150.0,
                currency="USD",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.estimate_usage(
            entity_id,
            counterparty_id,
            amount=amount,
            currency=currency,
            excluded_invoice_ids=excluded_invoice_ids,
            included_vendor_credit_ids=included_vendor_credit_ids,
            request_options=request_options,
        )
        return _response.data
