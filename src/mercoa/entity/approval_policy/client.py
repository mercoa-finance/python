# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.approval_policy_history_response import ApprovalPolicyHistoryResponse
from ...entity_types.types.approval_policy_id import ApprovalPolicyId
from ...entity_types.types.approval_policy_request import ApprovalPolicyRequest
from ...entity_types.types.approval_policy_response import ApprovalPolicyResponse
from ...entity_types.types.approval_policy_update_request import ApprovalPolicyUpdateRequest
from ...entity_types.types.entity_id import EntityId
from .raw_client import AsyncRawApprovalPolicyClient, RawApprovalPolicyClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApprovalPolicyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawApprovalPolicyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawApprovalPolicyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawApprovalPolicyClient
        """
        return self._raw_client

    def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApprovalPolicyResponse]:
        """
        Retrieve all invoice approval policies associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApprovalPolicyResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.get_all(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    def create(
        self,
        entity_id: EntityId,
        *,
        request: ApprovalPolicyRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApprovalPolicyResponse:
        """
        Create an invoice approval policy associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : ApprovalPolicyRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApprovalPolicyResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import (
            ApprovalPolicyRequest,
            IdentifierList_UserList,
            Rule_Approver,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.create(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=ApprovalPolicyRequest(
                trigger=[],
                rule=Rule_Approver(
                    num_approvers=2,
                    identifier_list=IdentifierList_UserList(
                        value=[
                            "usr_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                            "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        ]
                    ),
                ),
                upstream_policy_id="root",
            ),
        )
        """
        _response = self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_id: EntityId,
        policy_id: ApprovalPolicyId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApprovalPolicyResponse:
        """
        Retrieve an invoice approval policy associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        policy_id : ApprovalPolicyId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApprovalPolicyResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            policy_id="apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
        )
        """
        _response = self._raw_client.get(entity_id, policy_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        policy_id: ApprovalPolicyId,
        *,
        request: ApprovalPolicyUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApprovalPolicyResponse:
        """
        Update an invoice approval policy associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        policy_id : ApprovalPolicyId

        request : ApprovalPolicyUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApprovalPolicyResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import (
            ApprovalPolicyUpdateRequest,
            IdentifierList_UserList,
            Rule_Approver,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.update(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            policy_id="apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            request=ApprovalPolicyUpdateRequest(
                trigger=[],
                rule=Rule_Approver(
                    num_approvers=2,
                    identifier_list=IdentifierList_UserList(
                        value=[
                            "usr_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                            "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        ]
                    ),
                ),
                upstream_policy_id="root",
            ),
        )
        """
        _response = self._raw_client.update(entity_id, policy_id, request=request, request_options=request_options)
        return _response.data

    def delete(
        self,
        entity_id: EntityId,
        policy_id: ApprovalPolicyId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete an invoice approval policy associated with Entity. BEWARE: Any approval policy deletion will result in all associated downstream policies also being deleted.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        policy_id : ApprovalPolicyId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.delete(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            policy_id="apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
        )
        """
        _response = self._raw_client.delete(entity_id, policy_id, request_options=request_options)
        return _response.data

    def history(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApprovalPolicyHistoryResponse]:
        """
        Retrieve the history of approval policy changes for an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApprovalPolicyHistoryResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.history(
            entity_id="entityId",
        )
        """
        _response = self._raw_client.history(entity_id, request_options=request_options)
        return _response.data

    def restore(
        self,
        entity_id: EntityId,
        approval_policy_history_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ApprovalPolicyResponse]:
        """
        Restore approval policies from a history entry.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        approval_policy_history_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApprovalPolicyResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.approval_policy.restore(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            approval_policy_history_id="hist_21661ac1-a2a8-4465-a6c0-64474ba8181d",
        )
        """
        _response = self._raw_client.restore(entity_id, approval_policy_history_id, request_options=request_options)
        return _response.data


class AsyncApprovalPolicyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawApprovalPolicyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawApprovalPolicyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawApprovalPolicyClient
        """
        return self._raw_client

    async def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApprovalPolicyResponse]:
        """
        Retrieve all invoice approval policies associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApprovalPolicyResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.get_all(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        entity_id: EntityId,
        *,
        request: ApprovalPolicyRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApprovalPolicyResponse:
        """
        Create an invoice approval policy associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request : ApprovalPolicyRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApprovalPolicyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import (
            ApprovalPolicyRequest,
            IdentifierList_UserList,
            Rule_Approver,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.create(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=ApprovalPolicyRequest(
                    trigger=[],
                    rule=Rule_Approver(
                        num_approvers=2,
                        identifier_list=IdentifierList_UserList(
                            value=[
                                "usr_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                                "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                            ]
                        ),
                    ),
                    upstream_policy_id="root",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_id: EntityId,
        policy_id: ApprovalPolicyId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApprovalPolicyResponse:
        """
        Retrieve an invoice approval policy associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        policy_id : ApprovalPolicyId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApprovalPolicyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                policy_id="apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, policy_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        policy_id: ApprovalPolicyId,
        *,
        request: ApprovalPolicyUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApprovalPolicyResponse:
        """
        Update an invoice approval policy associated with an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        policy_id : ApprovalPolicyId

        request : ApprovalPolicyUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApprovalPolicyResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import (
            ApprovalPolicyUpdateRequest,
            IdentifierList_UserList,
            Rule_Approver,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.update(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                policy_id="apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
                request=ApprovalPolicyUpdateRequest(
                    trigger=[],
                    rule=Rule_Approver(
                        num_approvers=2,
                        identifier_list=IdentifierList_UserList(
                            value=[
                                "usr_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                                "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                            ]
                        ),
                    ),
                    upstream_policy_id="root",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_id, policy_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        entity_id: EntityId,
        policy_id: ApprovalPolicyId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete an invoice approval policy associated with Entity. BEWARE: Any approval policy deletion will result in all associated downstream policies also being deleted.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        policy_id : ApprovalPolicyId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.delete(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                policy_id="apvl_5ce50275-1789-42ea-bc60-bb7e6d03635c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, policy_id, request_options=request_options)
        return _response.data

    async def history(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApprovalPolicyHistoryResponse]:
        """
        Retrieve the history of approval policy changes for an entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApprovalPolicyHistoryResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.history(
                entity_id="entityId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.history(entity_id, request_options=request_options)
        return _response.data

    async def restore(
        self,
        entity_id: EntityId,
        approval_policy_history_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ApprovalPolicyResponse]:
        """
        Restore approval policies from a history entry.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        approval_policy_history_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApprovalPolicyResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.approval_policy.restore(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                approval_policy_history_id="hist_21661ac1-a2a8-4465-a6c0-64474ba8181d",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.restore(
            entity_id, approval_policy_history_id, request_options=request_options
        )
        return _response.data
