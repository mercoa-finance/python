# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.entity_metadata_response import EntityMetadataResponse
from .raw_client import AsyncRawMetadataClient, RawMetadataClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMetadataClient
        """
        return self._raw_client

    def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityMetadataResponse]:
        """
        Retrieve all metadata options associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityMetadataResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.metadata.get_all(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        )
        """
        _response = self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    def get(
        self, entity_id: EntityId, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Retrieve metadata associated with a specific key

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.metadata.get(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            key="propertyId",
        )
        """
        _response = self._raw_client.get(entity_id, key, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_id: EntityId,
        key: str,
        *,
        request: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[str]:
        """
        Update metadata associated with a specific key

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        key : str

        request : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.metadata.update(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            key="propertyId",
            request=[
                "{key: 'prop_123', value: 'Beach Rental'}",
                "{key: 'prop_456', value: 'City Rental'}",
            ],
        )
        """
        _response = self._raw_client.update(entity_id, key, request=request, request_options=request_options)
        return _response.data

    def delete(self, entity_id: EntityId, key: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete all metadata associated with a specific key

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.metadata.delete(
            entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            key="propertyId",
        )
        """
        _response = self._raw_client.delete(entity_id, key, request_options=request_options)
        return _response.data


class AsyncMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMetadataClient
        """
        return self._raw_client

    async def get_all(
        self, entity_id: EntityId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EntityMetadataResponse]:
        """
        Retrieve all metadata options associated with this entity

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EntityMetadataResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.metadata.get_all(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(entity_id, request_options=request_options)
        return _response.data

    async def get(
        self, entity_id: EntityId, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Retrieve metadata associated with a specific key

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.metadata.get(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                key="propertyId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, key, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_id: EntityId,
        key: str,
        *,
        request: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[str]:
        """
        Update metadata associated with a specific key

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        key : str

        request : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.metadata.update(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                key="propertyId",
                request=[
                    "{key: 'prop_123', value: 'Beach Rental'}",
                    "{key: 'prop_456', value: 'City Rental'}",
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(entity_id, key, request=request, request_options=request_options)
        return _response.data

    async def delete(
        self, entity_id: EntityId, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete all metadata associated with a specific key

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.metadata.delete(
                entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                key="propertyId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_id, key, request_options=request_options)
        return _response.data
