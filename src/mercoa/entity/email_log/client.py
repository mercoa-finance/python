# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...email_log_types.types.email_log import EmailLog
from ...email_log_types.types.email_log_id import EmailLogId
from ...email_log_types.types.email_log_response import EmailLogResponse
from ...entity_types.types.entity_id import EntityId
from .raw_client import AsyncRawEmailLogClient, RawEmailLogClient


class EmailLogClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEmailLogClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEmailLogClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEmailLogClient
        """
        return self._raw_client

    def find(
        self,
        entity_id: EntityId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityId] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailLogResponse:
        """
        Get all incoming invoice emails for an entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        limit : typing.Optional[int]
            Number of logs to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityId]
            The ID of the log to start after. If not provided, the first page of logs will be returned.

        search : typing.Optional[str]
            Search for logs by email address or subject

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailLogResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_log.find(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.find(
            entity_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            starting_after=starting_after,
            search=search,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, entity_id: EntityId, log_id: EmailLogId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmailLog:
        """
        Get an email log by ID

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        log_id : EmailLogId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailLog

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity.email_log.get(
            entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            log_id="log_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        )
        """
        _response = self._raw_client.get(entity_id, log_id, request_options=request_options)
        return _response.data


class AsyncEmailLogClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEmailLogClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEmailLogClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEmailLogClient
        """
        return self._raw_client

    async def find(
        self,
        entity_id: EntityId,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityId] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailLogResponse:
        """
        Get all incoming invoice emails for an entity.

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        limit : typing.Optional[int]
            Number of logs to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityId]
            The ID of the log to start after. If not provided, the first page of logs will be returned.

        search : typing.Optional[str]
            Search for logs by email address or subject

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailLogResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_log.find(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            entity_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            starting_after=starting_after,
            search=search,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, entity_id: EntityId, log_id: EmailLogId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmailLog:
        """
        Get an email log by ID

        Parameters
        ----------
        entity_id : EntityId
            Entity ID or Entity ForeignID

        log_id : EmailLogId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailLog

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity.email_log.get(
                entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                log_id="log_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_id, log_id, request_options=request_options)
        return _response.data
