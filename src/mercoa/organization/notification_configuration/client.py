# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_types.types.notification_type import NotificationType
from ...organization_types.types.notification_configuration_request import NotificationConfigurationRequest
from ...organization_types.types.notification_configuration_response import NotificationConfigurationResponse
from .raw_client import AsyncRawNotificationConfigurationClient, RawNotificationConfigurationClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NotificationConfigurationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNotificationConfigurationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNotificationConfigurationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNotificationConfigurationClient
        """
        return self._raw_client

    def get_all(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[NotificationConfigurationResponse]:
        """
        Retrieve all notification configurations

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationConfigurationResponse]

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.notification_configuration.get_all()
        """
        _response = self._raw_client.get_all(request_options=request_options)
        return _response.data

    def get(
        self, notification_type: NotificationType, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationConfigurationResponse:
        """
        Retrieve notification configuration for this notification type

        Parameters
        ----------
        notification_type : NotificationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationConfigurationResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.notification_configuration.get(
            notification_type="INVOICE_APPROVAL_NEEDED",
        )
        """
        _response = self._raw_client.get(notification_type, request_options=request_options)
        return _response.data

    def update(
        self,
        notification_type: NotificationType,
        *,
        request: NotificationConfigurationRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationConfigurationResponse:
        """
        Update notification configuration for this notification type

        Parameters
        ----------
        notification_type : NotificationType

        request : NotificationConfigurationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationConfigurationResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.organization_types import NotificationConfigurationRequest_Invoice

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.notification_configuration.update(
            notification_type="INVOICE_APPROVAL_NEEDED",
            request=NotificationConfigurationRequest_Invoice(
                url="url",
            ),
        )
        """
        _response = self._raw_client.update(notification_type, request=request, request_options=request_options)
        return _response.data

    def reset(
        self, notification_type: NotificationType, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Reset notification configuration for this notification type

        Parameters
        ----------
        notification_type : NotificationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.notification_configuration.reset(
            notification_type="INVOICE_APPROVAL_NEEDED",
        )
        """
        _response = self._raw_client.reset(notification_type, request_options=request_options)
        return _response.data


class AsyncNotificationConfigurationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNotificationConfigurationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNotificationConfigurationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNotificationConfigurationClient
        """
        return self._raw_client

    async def get_all(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[NotificationConfigurationResponse]:
        """
        Retrieve all notification configurations

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationConfigurationResponse]

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.notification_configuration.get_all()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(request_options=request_options)
        return _response.data

    async def get(
        self, notification_type: NotificationType, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationConfigurationResponse:
        """
        Retrieve notification configuration for this notification type

        Parameters
        ----------
        notification_type : NotificationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationConfigurationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.notification_configuration.get(
                notification_type="INVOICE_APPROVAL_NEEDED",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(notification_type, request_options=request_options)
        return _response.data

    async def update(
        self,
        notification_type: NotificationType,
        *,
        request: NotificationConfigurationRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationConfigurationResponse:
        """
        Update notification configuration for this notification type

        Parameters
        ----------
        notification_type : NotificationType

        request : NotificationConfigurationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationConfigurationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.organization_types import NotificationConfigurationRequest_Invoice

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.notification_configuration.update(
                notification_type="INVOICE_APPROVAL_NEEDED",
                request=NotificationConfigurationRequest_Invoice(
                    url="url",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(notification_type, request=request, request_options=request_options)
        return _response.data

    async def reset(
        self, notification_type: NotificationType, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Reset notification configuration for this notification type

        Parameters
        ----------
        notification_type : NotificationType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.notification_configuration.reset(
                notification_type="INVOICE_APPROVAL_NEEDED",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.reset(notification_type, request_options=request_options)
        return _response.data
