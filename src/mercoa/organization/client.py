# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..email_log_types.types.email_log_response import EmailLogResponse
from ..organization_types.types.organization_request import OrganizationRequest
from ..organization_types.types.organization_response import OrganizationResponse
from .notification_configuration.client import AsyncNotificationConfigurationClient, NotificationConfigurationClient
from .raw_client import AsyncRawOrganizationClient, RawOrganizationClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationClient(client_wrapper=client_wrapper)
        self.notification_configuration = NotificationConfigurationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationClient
        """
        return self._raw_client

    def get(
        self,
        *,
        payment_methods: typing.Optional[bool] = None,
        email_provider: typing.Optional[bool] = None,
        external_accounting_system_provider: typing.Optional[bool] = None,
        color_scheme: typing.Optional[bool] = None,
        payee_onboarding_options: typing.Optional[bool] = None,
        payor_onboarding_options: typing.Optional[bool] = None,
        metadata_schema: typing.Optional[bool] = None,
        notification_email_template: typing.Optional[bool] = None,
        role_permissions: typing.Optional[bool] = None,
        custom_domains: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OrganizationResponse:
        """
        Get current organization information

        Parameters
        ----------
        payment_methods : typing.Optional[bool]
            include supported payment methods in response

        email_provider : typing.Optional[bool]
            include email provider info in response

        external_accounting_system_provider : typing.Optional[bool]
            include external accounting system provider info in response

        color_scheme : typing.Optional[bool]
            include color scheme info in response

        payee_onboarding_options : typing.Optional[bool]
            include payee onboarding options in response

        payor_onboarding_options : typing.Optional[bool]
            include payor onboarding options in response

        metadata_schema : typing.Optional[bool]
            include metadata schema in response

        notification_email_template : typing.Optional[bool]
            include notification-email-template in response

        role_permissions : typing.Optional[bool]
            include role permission config in response

        custom_domains : typing.Optional[bool]
            include custom domains in response

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.get()
        """
        _response = self._raw_client.get(
            payment_methods=payment_methods,
            email_provider=email_provider,
            external_accounting_system_provider=external_accounting_system_provider,
            color_scheme=color_scheme,
            payee_onboarding_options=payee_onboarding_options,
            payor_onboarding_options=payor_onboarding_options,
            metadata_schema=metadata_schema,
            notification_email_template=notification_email_template,
            role_permissions=role_permissions,
            custom_domains=custom_domains,
            request_options=request_options,
        )
        return _response.data

    def update(
        self, *, request: OrganizationRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> OrganizationResponse:
        """
        Update current organization

        Parameters
        ----------
        request : OrganizationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.organization_types import OrganizationRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.update(
            request=OrganizationRequest(),
        )
        """
        _response = self._raw_client.update(request=request, request_options=request_options)
        return _response.data

    def email_log(
        self,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        from_: typing.Optional[str] = None,
        to: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailLogResponse:
        """
        Get log of all emails sent to this organization. Content format subject to change.

        Parameters
        ----------
        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        from_ : typing.Optional[str]
            Filter by sender email address

        to : typing.Optional[str]
            Filter by recipient email address

        limit : typing.Optional[int]
            Number of logs to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[str]
            The ID of the log to start after. If not provided, the first page of logs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailLogResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.email_log()
        """
        _response = self._raw_client.email_log(
            start_date=start_date,
            end_date=end_date,
            from_=from_,
            to=to,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    def invalidate_tokens(
        self,
        *,
        session_id: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.

        Parameters
        ----------
        session_id : typing.Optional[typing.Sequence[str]]
            Optional list of session IDs to invalidate. If not provided, all sessions will be invalidated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.organization.invalidate_tokens(
            session_id=["session_123", "session_456"],
        )
        """
        _response = self._raw_client.invalidate_tokens(session_id=session_id, request_options=request_options)
        return _response.data


class AsyncOrganizationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationClient(client_wrapper=client_wrapper)
        self.notification_configuration = AsyncNotificationConfigurationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationClient
        """
        return self._raw_client

    async def get(
        self,
        *,
        payment_methods: typing.Optional[bool] = None,
        email_provider: typing.Optional[bool] = None,
        external_accounting_system_provider: typing.Optional[bool] = None,
        color_scheme: typing.Optional[bool] = None,
        payee_onboarding_options: typing.Optional[bool] = None,
        payor_onboarding_options: typing.Optional[bool] = None,
        metadata_schema: typing.Optional[bool] = None,
        notification_email_template: typing.Optional[bool] = None,
        role_permissions: typing.Optional[bool] = None,
        custom_domains: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OrganizationResponse:
        """
        Get current organization information

        Parameters
        ----------
        payment_methods : typing.Optional[bool]
            include supported payment methods in response

        email_provider : typing.Optional[bool]
            include email provider info in response

        external_accounting_system_provider : typing.Optional[bool]
            include external accounting system provider info in response

        color_scheme : typing.Optional[bool]
            include color scheme info in response

        payee_onboarding_options : typing.Optional[bool]
            include payee onboarding options in response

        payor_onboarding_options : typing.Optional[bool]
            include payor onboarding options in response

        metadata_schema : typing.Optional[bool]
            include metadata schema in response

        notification_email_template : typing.Optional[bool]
            include notification-email-template in response

        role_permissions : typing.Optional[bool]
            include role permission config in response

        custom_domains : typing.Optional[bool]
            include custom domains in response

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            payment_methods=payment_methods,
            email_provider=email_provider,
            external_accounting_system_provider=external_accounting_system_provider,
            color_scheme=color_scheme,
            payee_onboarding_options=payee_onboarding_options,
            payor_onboarding_options=payor_onboarding_options,
            metadata_schema=metadata_schema,
            notification_email_template=notification_email_template,
            role_permissions=role_permissions,
            custom_domains=custom_domains,
            request_options=request_options,
        )
        return _response.data

    async def update(
        self, *, request: OrganizationRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> OrganizationResponse:
        """
        Update current organization

        Parameters
        ----------
        request : OrganizationRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.organization_types import OrganizationRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.update(
                request=OrganizationRequest(),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(request=request, request_options=request_options)
        return _response.data

    async def email_log(
        self,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        from_: typing.Optional[str] = None,
        to: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmailLogResponse:
        """
        Get log of all emails sent to this organization. Content format subject to change.

        Parameters
        ----------
        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        from_ : typing.Optional[str]
            Filter by sender email address

        to : typing.Optional[str]
            Filter by recipient email address

        limit : typing.Optional[int]
            Number of logs to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[str]
            The ID of the log to start after. If not provided, the first page of logs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailLogResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.email_log()


        asyncio.run(main())
        """
        _response = await self._raw_client.email_log(
            start_date=start_date,
            end_date=end_date,
            from_=from_,
            to=to,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    async def invalidate_tokens(
        self,
        *,
        session_id: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Invalidate all JWT tokens for the current organization. This is considered a break-glass action and should be used only if tokens have been compromised. All tokens will be invalidated, including tokens on links, emails, and currently logged in sessions. API keys are not affected by this action. This action may take 60 seconds to propagate.

        Parameters
        ----------
        session_id : typing.Optional[typing.Sequence[str]]
            Optional list of session IDs to invalidate. If not provided, all sessions will be invalidated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.organization.invalidate_tokens(
                session_id=["session_123", "session_456"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.invalidate_tokens(session_id=session_id, request_options=request_options)
        return _response.data
