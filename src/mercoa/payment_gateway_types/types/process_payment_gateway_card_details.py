# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from ...commons.types.country_code import CountryCode
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ProcessPaymentGatewayCardDetails_Direct(UniversalBaseModel):
    type: typing.Literal["direct"] = "direct"
    name_on_card: typing_extensions.Annotated[str, FieldMetadata(alias="nameOnCard")]
    card_number: typing_extensions.Annotated[str, FieldMetadata(alias="cardNumber")]
    expiration_month: typing_extensions.Annotated[int, FieldMetadata(alias="expirationMonth")]
    expiration_year: typing_extensions.Annotated[int, FieldMetadata(alias="expirationYear")]
    cvv: str
    postal_code: typing_extensions.Annotated[str, FieldMetadata(alias="postalCode")]
    country: CountryCode

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ProcessPaymentGatewayCardDetails_Iframe(UniversalBaseModel):
    type: typing.Literal["iframe"] = "iframe"
    iframe_url: typing_extensions.Annotated[str, FieldMetadata(alias="iframeUrl")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ProcessPaymentGatewayCardDetails = typing.Union[
    ProcessPaymentGatewayCardDetails_Direct, ProcessPaymentGatewayCardDetails_Iframe
]
