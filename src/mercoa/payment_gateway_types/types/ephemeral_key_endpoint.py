# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class EphemeralKeyEndpoint(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_gateway_types import EphemeralKeyEndpoint

    EphemeralKeyEndpoint(
        url="https://api.example.com/ephemeral-keys",
        method="POST",
        headers={
            "Authorization": "Bearer YOUR_AUTH_SCHEME",
            "Content-Type": "application/json",
        },
        post_body='{"card_id": "{{cardId}}", "nonce": "{{nonce}}", "account_id": "{{accountId}}"}',
    )
    """

    url: str = pydantic.Field()
    """
    The URL endpoint to call for generating ephemeral keys
    """

    method: str = pydantic.Field()
    """
    The HTTP method to use for the request
    """

    headers: typing.Dict[str, str] = pydantic.Field()
    """
    The headers to include in the request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.
    """

    post_body: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="postBody")] = pydantic.Field(
        default=None
    )
    """
    The body to include in the POST request. Supports variables {{cardId}}, {{nonce}}, and {{accountId}} that will be replaced with actual values.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
