# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
import typing
from ...payment_method_types.types.bank_type import BankType
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ProcessPaymentGatewayAchDetails(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_gateway_types import ProcessPaymentGatewayAchDetails

    ProcessPaymentGatewayAchDetails(
        routing_number="123456789",
        account_number="987654321",
        account_name="John Doe",
        account_type="CHECKING",
    )
    """

    routing_number: typing_extensions.Annotated[str, FieldMetadata(alias="routingNumber")] = pydantic.Field()
    """
    The routing number of the ACH account
    """

    account_number: typing_extensions.Annotated[str, FieldMetadata(alias="accountNumber")] = pydantic.Field()
    """
    The account number of the ACH account
    """

    account_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountName")] = (
        pydantic.Field(default=None)
    )
    """
    The name on the ACH account
    """

    account_type: typing_extensions.Annotated[typing.Optional[BankType], FieldMetadata(alias="accountType")] = (
        pydantic.Field(default=None)
    )
    """
    The type of bank account (checking or savings)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
