# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .payment_gateway_error import PaymentGatewayError


class ProcessPaymentGatewayResponse_Pending(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_gateway_types import ProcessPaymentGatewayResponse_Pending

    ProcessPaymentGatewayResponse_Pending(
        job_id="pgp_8f86116b-3b4d-4ded-99ef-3bc929d8c33c",
    )
    """

    job_status: typing_extensions.Annotated[typing.Literal["pending"], FieldMetadata(alias="jobStatus")] = "pending"
    job_id: typing_extensions.Annotated[str, FieldMetadata(alias="jobId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ProcessPaymentGatewayResponse_Success(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_gateway_types import ProcessPaymentGatewayResponse_Pending

    ProcessPaymentGatewayResponse_Pending(
        job_id="pgp_8f86116b-3b4d-4ded-99ef-3bc929d8c33c",
    )
    """

    job_status: typing_extensions.Annotated[typing.Literal["success"], FieldMetadata(alias="jobStatus")] = "success"
    job_id: typing_extensions.Annotated[str, FieldMetadata(alias="jobId")]
    receipt_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="receiptUrl")] = None
    session_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="sessionUrl")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ProcessPaymentGatewayResponse_Failed(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_gateway_types import ProcessPaymentGatewayResponse_Pending

    ProcessPaymentGatewayResponse_Pending(
        job_id="pgp_8f86116b-3b4d-4ded-99ef-3bc929d8c33c",
    )
    """

    job_status: typing_extensions.Annotated[typing.Literal["failed"], FieldMetadata(alias="jobStatus")] = "failed"
    job_id: typing_extensions.Annotated[str, FieldMetadata(alias="jobId")]
    error_type: typing_extensions.Annotated[PaymentGatewayError, FieldMetadata(alias="errorType")]
    error_message: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="errorMessage")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from mercoa.payment_gateway_types import ProcessPaymentGatewayResponse_Pending

ProcessPaymentGatewayResponse_Pending(
    job_id="pgp_8f86116b-3b4d-4ded-99ef-3bc929d8c33c",
)
"""
ProcessPaymentGatewayResponse = typing.Union[
    ProcessPaymentGatewayResponse_Pending,
    ProcessPaymentGatewayResponse_Success,
    ProcessPaymentGatewayResponse_Failed,
]
