# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .payment_gateway_attempt import PaymentGatewayAttempt


class ProcessPaymentGatewaySuccessResponse(UniversalBaseModel):
    job_id: typing_extensions.Annotated[str, FieldMetadata(alias="jobId")] = pydantic.Field()
    """
    The job ID of the payment gateway processing job
    """

    receipt_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="receiptUrl")] = pydantic.Field(
        default=None
    )
    """
    The URL of the receipt that was downloaded from the payment gateway
    """

    invoice_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="invoiceAmount")] = (
        pydantic.Field(default=None)
    )
    """
    The invoice amount detected from the payment gateway
    """

    gateway_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="gatewayAmount")] = (
        pydantic.Field(default=None)
    )
    """
    The amount displayed on the payment gateway (may include fees)
    """

    vendor_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="vendorName")] = pydantic.Field(
        default=None
    )
    """
    The vendor name detected from the payment gateway
    """

    attempts: typing.List[PaymentGatewayAttempt] = pydantic.Field()
    """
    List of payment gateway attempts for this job
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The timestamp when the job was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    The timestamp when the job was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
