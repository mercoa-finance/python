# This file was auto-generated by Fern from our API Definition.

from .process_payment_gateway_card_details_base import (
    ProcessPaymentGatewayCardDetailsBase,
)
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class ProcessPaymentGatewayCardDetailsDirect(ProcessPaymentGatewayCardDetailsBase):
    """
    Examples
    --------
    from mercoa.payment_gateway_types import (
        ProcessPaymentGatewayAchDetails,
        ProcessPaymentGatewayCardDetailsDirect,
    )

    ProcessPaymentGatewayCardDetailsDirect(
        first_name="John",
        last_name="Doe",
        postal_code="12345",
        country="US",
        card_type="credit",
        card_number="4242424242424242",
        expiration_month=10,
        expiration_year=2025,
        cvv="123",
        ach_details=ProcessPaymentGatewayAchDetails(
            routing_number="123456789",
            account_number="987654321",
            account_name="John Doe",
        ),
    )
    """

    card_number: typing_extensions.Annotated[str, FieldMetadata(alias="cardNumber")] = pydantic.Field()
    """
    The number of the card to use for the payment
    """

    expiration_month: typing_extensions.Annotated[int, FieldMetadata(alias="expirationMonth")] = pydantic.Field()
    """
    The month of the expiration date of the card to use for the payment. This must be a number between 1 and 12.
    """

    expiration_year: typing_extensions.Annotated[int, FieldMetadata(alias="expirationYear")] = pydantic.Field()
    """
    The year of the expiration date of the card to use for the payment. This must be the full year, not the last two digits.
    """

    cvv: str = pydantic.Field()
    """
    The CVV of the card to use for the payment
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
