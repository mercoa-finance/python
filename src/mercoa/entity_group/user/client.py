# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_group_types.types.entity_group_id import EntityGroupId
from ...entity_group_types.types.entity_group_user_request import EntityGroupUserRequest
from ...entity_group_types.types.entity_group_user_response import EntityGroupUserResponse
from ...entity_group_types.types.entity_group_user_sync_request import EntityGroupUserSyncRequest
from ...entity_group_types.types.find_entity_group_user_response import FindEntityGroupUserResponse
from ...entity_types.types.entity_user_id import EntityUserId
from ...entity_types.types.token_generation_options import TokenGenerationOptions
from .raw_client import AsyncRawUserClient, RawUserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def find(
        self,
        entity_group_id: EntityGroupId,
        *,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        role: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityUserId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindEntityGroupUserResponse:
        """
        Search entity group users

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify user in your system

        role : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter users by role. If multiple roles are provided, users with any of the roles will be returned.

        name : typing.Optional[str]
            Filter users by name. Partial matches are supported.

        email : typing.Optional[str]
            Filter users by email. Partial matches are supported.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityUserId]
            The ID of the user to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindEntityGroupUserResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.find(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            name="John",
        )
        """
        _response = self._raw_client.find(
            entity_group_id,
            foreign_id=foreign_id,
            role=role,
            name=name,
            email=email,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupUserResponse:
        """
        Create entity user that will be added to all entities in the group. If a user with the same foreignId already exists, the user will be updated with the new information.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupUserResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import (
            EntityGroupUserEntityRequest,
            EntityGroupUserRequest,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.create(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EntityGroupUserRequest(
                foreign_id="MY-DB-ID-12345",
                email="john.doe@acme.com",
                name="John Doe",
                entities=[
                    EntityGroupUserEntityRequest(
                        roles=["admin", "approver"],
                        entity_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    ),
                    EntityGroupUserEntityRequest(
                        roles=["viewer"],
                        entity_id="ent_9e02a20e-7749-47de-8d8a-f8ff2859fa90",
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.create(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupUserResponse:
        """
        Get entity user from a group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupUserResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.get(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            foreign_id="MY-DB-ID-12345",
        )
        """
        _response = self._raw_client.get(entity_group_id, foreign_id, request_options=request_options)
        return _response.data

    def update(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request: EntityGroupUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupUserResponse:
        """
        Update entity user for all entities in the group.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request : EntityGroupUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupUserResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import (
            EntityGroupUserEntityRequest,
            EntityGroupUserRequest,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.update(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            foreign_id="MY-DB-ID-12345",
            request=EntityGroupUserRequest(
                foreign_id="MY-DB-ID-12345",
                email="john.doe@acme.com",
                name="John Doe",
                entities=[
                    EntityGroupUserEntityRequest(
                        roles=["admin", "approver"],
                        entity_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    ),
                    EntityGroupUserEntityRequest(
                        roles=["viewer"],
                        entity_id="ent_9e02a20e-7749-47de-8d8a-f8ff2859fa90",
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.update(
            entity_group_id, foreign_id, request=request, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete entity user from all entities in the group. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.delete(
            entity_group_id="entityGroupId",
            foreign_id="foreignId",
        )
        """
        _response = self._raw_client.delete(entity_group_id, foreign_id, request_options=request_options)
        return _response.data

    def get_token(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group as the user in the Mercoa API and iFrame.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.get_token(
            entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            foreign_id="MY-DB-ID-12345",
            request=TokenGenerationOptions(
                expires_in="1h",
            ),
        )
        """
        _response = self._raw_client.get_token(
            entity_group_id, foreign_id, request=request, request_options=request_options
        )
        return _response.data

    def sync(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupUserSyncRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Sync entity group users. This will add users to entities that do not have them and remove users from entities that have them.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupUserSyncRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import EntityGroupUserSyncRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.user.sync(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EntityGroupUserSyncRequest(
                filter_roles=["approver", "viewer"],
            ),
        )
        """
        _response = self._raw_client.sync(entity_group_id, request=request, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def find(
        self,
        entity_group_id: EntityGroupId,
        *,
        foreign_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        role: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityUserId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindEntityGroupUserResponse:
        """
        Search entity group users

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            ID used to identify user in your system

        role : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Filter users by role. If multiple roles are provided, users with any of the roles will be returned.

        name : typing.Optional[str]
            Filter users by name. Partial matches are supported.

        email : typing.Optional[str]
            Filter users by email. Partial matches are supported.

        limit : typing.Optional[int]
            Number of entities to return. Limit can range between 1 and 100, and the default is 10.

        starting_after : typing.Optional[EntityUserId]
            The ID of the user to start after. If not provided, the first page of entities will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindEntityGroupUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.find(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                name="John",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.find(
            entity_group_id,
            foreign_id=foreign_id,
            role=role,
            name=name,
            email=email,
            limit=limit,
            starting_after=starting_after,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupUserResponse:
        """
        Create entity user that will be added to all entities in the group. If a user with the same foreignId already exists, the user will be updated with the new information.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import (
            EntityGroupUserEntityRequest,
            EntityGroupUserRequest,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.create(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EntityGroupUserRequest(
                    foreign_id="MY-DB-ID-12345",
                    email="john.doe@acme.com",
                    name="John Doe",
                    entities=[
                        EntityGroupUserEntityRequest(
                            roles=["admin", "approver"],
                            entity_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        ),
                        EntityGroupUserEntityRequest(
                            roles=["viewer"],
                            entity_id="ent_9e02a20e-7749-47de-8d8a-f8ff2859fa90",
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(entity_group_id, request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupUserResponse:
        """
        Get entity user from a group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.get(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                foreign_id="MY-DB-ID-12345",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(entity_group_id, foreign_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request: EntityGroupUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupUserResponse:
        """
        Update entity user for all entities in the group.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request : EntityGroupUserRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupUserResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import (
            EntityGroupUserEntityRequest,
            EntityGroupUserRequest,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.update(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                foreign_id="MY-DB-ID-12345",
                request=EntityGroupUserRequest(
                    foreign_id="MY-DB-ID-12345",
                    email="john.doe@acme.com",
                    name="John Doe",
                    entities=[
                        EntityGroupUserEntityRequest(
                            roles=["admin", "approver"],
                            entity_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        ),
                        EntityGroupUserEntityRequest(
                            roles=["viewer"],
                            entity_id="ent_9e02a20e-7749-47de-8d8a-f8ff2859fa90",
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            entity_group_id, foreign_id, request=request, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete entity user from all entities in the group. This will also remove the user from all approval policies. If an approval policy will break as a result of this operation, this request will fail.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.delete(
                entity_group_id="entityGroupId",
                foreign_id="foreignId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_group_id, foreign_id, request_options=request_options)
        return _response.data

    async def get_token(
        self,
        entity_group_id: EntityGroupId,
        foreign_id: str,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group as the user in the Mercoa API and iFrame.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        foreign_id : str
            ID used to identify user in your system

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.get_token(
                entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                foreign_id="MY-DB-ID-12345",
                request=TokenGenerationOptions(
                    expires_in="1h",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_token(
            entity_group_id, foreign_id, request=request, request_options=request_options
        )
        return _response.data

    async def sync(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupUserSyncRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Sync entity group users. This will add users to entities that do not have them and remove users from entities that have them.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupUserSyncRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import EntityGroupUserSyncRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.user.sync(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EntityGroupUserSyncRequest(
                    filter_roles=["approver", "viewer"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.sync(entity_group_id, request=request, request_options=request_options)
        return _response.data
