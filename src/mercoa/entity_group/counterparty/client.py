# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...entity_group_types.types.entity_group_id import EntityGroupId
from ...entity_types.types.entity_add_payees_request import EntityAddPayeesRequest
from ...entity_types.types.entity_add_payors_request import EntityAddPayorsRequest
from ...entity_types.types.entity_hide_payees_request import EntityHidePayeesRequest
from ...entity_types.types.entity_hide_payors_request import EntityHidePayorsRequest
from .raw_client import AsyncRawCounterpartyClient, RawCounterpartyClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CounterpartyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCounterpartyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCounterpartyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCounterpartyClient
        """
        return self._raw_client

    def add_payees(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityAddPayeesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Create association between all entities in the group and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityAddPayeesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import (
            CounterpartyCustomizationAccount,
            CounterpartyCustomizationRequest,
            EntityAddPayeesRequest,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.counterparty.add_payees(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EntityAddPayeesRequest(
                payees=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                customizations=[
                    CounterpartyCustomizationRequest(
                        counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        accounts=[
                            CounterpartyCustomizationAccount(
                                account_id="85866843",
                                postal_code="94105",
                                name_on_account="John Doe",
                            )
                        ],
                    )
                ],
            ),
        )
        """
        _response = self._raw_client.add_payees(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def hide_payees(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityHidePayeesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Marks Payees as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityHidePayeesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import EntityHidePayeesRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.counterparty.hide_payees(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EntityHidePayeesRequest(
                payees=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            ),
        )
        """
        _response = self._raw_client.hide_payees(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def add_payors(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityAddPayorsRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Create association between all entities in the group and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityAddPayorsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import (
            CounterpartyCustomizationAccount,
            CounterpartyCustomizationRequest,
            EntityAddPayorsRequest,
        )

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.counterparty.add_payors(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EntityAddPayorsRequest(
                payors=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                customizations=[
                    CounterpartyCustomizationRequest(
                        counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                        accounts=[
                            CounterpartyCustomizationAccount(
                                account_id="85866843",
                                postal_code="94105",
                                name_on_account="John Doe",
                            )
                        ],
                    )
                ],
            ),
        )
        """
        _response = self._raw_client.add_payors(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def hide_payors(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityHidePayorsRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Marks Payors as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityHidePayorsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import EntityHidePayorsRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.counterparty.hide_payors(
            entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            request=EntityHidePayorsRequest(
                payors=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
            ),
        )
        """
        _response = self._raw_client.hide_payors(entity_group_id, request=request, request_options=request_options)
        return _response.data


class AsyncCounterpartyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCounterpartyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCounterpartyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCounterpartyClient
        """
        return self._raw_client

    async def add_payees(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityAddPayeesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Create association between all entities in the group and a given list of Payees. If a Payee has previously been archived, unarchive the Payee.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityAddPayeesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import (
            CounterpartyCustomizationAccount,
            CounterpartyCustomizationRequest,
            EntityAddPayeesRequest,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.counterparty.add_payees(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EntityAddPayeesRequest(
                    payees=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    customizations=[
                        CounterpartyCustomizationRequest(
                            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                            accounts=[
                                CounterpartyCustomizationAccount(
                                    account_id="85866843",
                                    postal_code="94105",
                                    name_on_account="John Doe",
                                )
                            ],
                        )
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_payees(entity_group_id, request=request, request_options=request_options)
        return _response.data

    async def hide_payees(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityHidePayeesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Marks Payees as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payees will still be searchable via Invoice search.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityHidePayeesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import EntityHidePayeesRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.counterparty.hide_payees(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EntityHidePayeesRequest(
                    payees=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.hide_payees(
            entity_group_id, request=request, request_options=request_options
        )
        return _response.data

    async def add_payors(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityAddPayorsRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Create association between all entities in the group and a given list of Payors. If a Payor has previously been archived, unarchive the Payor.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityAddPayorsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import (
            CounterpartyCustomizationAccount,
            CounterpartyCustomizationRequest,
            EntityAddPayorsRequest,
        )

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.counterparty.add_payors(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EntityAddPayorsRequest(
                    payors=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                    customizations=[
                        CounterpartyCustomizationRequest(
                            counterparty_id="ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                            accounts=[
                                CounterpartyCustomizationAccount(
                                    account_id="85866843",
                                    postal_code="94105",
                                    name_on_account="John Doe",
                                )
                            ],
                        )
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_payors(entity_group_id, request=request, request_options=request_options)
        return _response.data

    async def hide_payors(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityHidePayorsRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Marks Payors as unsearchable by all entities in the group via Counterparty search. Invoices associated with these Payors will still be searchable via Invoice search.

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityHidePayorsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import EntityHidePayorsRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.counterparty.hide_payors(
                entity_group_id="entg_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                request=EntityHidePayorsRequest(
                    payors=["ent_21661ac1-a2a8-4465-a6c0-64474ba8181d"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.hide_payors(
            entity_group_id, request=request, request_options=request_options
        )
        return _response.data
