# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..entity_group_types.types.entity_group_add_entities_request import EntityGroupAddEntitiesRequest
from ..entity_group_types.types.entity_group_create_request import EntityGroupCreateRequest
from ..entity_group_types.types.entity_group_find_response import EntityGroupFindResponse
from ..entity_group_types.types.entity_group_id import EntityGroupId
from ..entity_group_types.types.entity_group_remove_entities_request import EntityGroupRemoveEntitiesRequest
from ..entity_group_types.types.entity_group_response import EntityGroupResponse
from ..entity_group_types.types.entity_group_update_request import EntityGroupUpdateRequest
from ..entity_types.types.token_generation_options import TokenGenerationOptions
from .counterparty.client import AsyncCounterpartyClient, CounterpartyClient
from .invoice.client import AsyncInvoiceClient, InvoiceClient
from .raw_client import AsyncRawEntityGroupClient, RawEntityGroupClient
from .user.client import AsyncUserClient, UserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EntityGroupClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEntityGroupClient(client_wrapper=client_wrapper)
        self.counterparty = CounterpartyClient(client_wrapper=client_wrapper)

        self.user = UserClient(client_wrapper=client_wrapper)

        self.invoice = InvoiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEntityGroupClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEntityGroupClient
        """
        return self._raw_client

    def get_all(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityGroupId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupFindResponse:
        """
        Get all entity groups. If using a JWT, will return all groups the entity is part of. If using an API key, will return all groups for the organization.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of results to return. Defaults to 1. Max is 10.

        starting_after : typing.Optional[EntityGroupId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupFindResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.get_all()
        """
        _response = self._raw_client.get_all(
            limit=limit, starting_after=starting_after, request_options=request_options
        )
        return _response.data

    def create(
        self, *, request: EntityGroupCreateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> EntityGroupResponse:
        """
        Create an entity group

        Parameters
        ----------
        request : EntityGroupCreateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import EntityGroupCreateRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.create(
            request=EntityGroupCreateRequest(
                foreign_id="your-group-id",
                name="AcmeConglomerate",
                email_to_name="acmegroup",
                entity_ids=[
                    "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                ],
            ),
        )
        """
        _response = self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    def get(
        self,
        entity_group_id: EntityGroupId,
        *,
        return_entity_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Get an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        return_entity_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities in the group. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.get(
            entity_group_id="entg_a3582b70-fd04-4888-9185-a640ae9048be",
        )
        """
        _response = self._raw_client.get(
            entity_group_id, return_entity_metadata=return_entity_metadata, request_options=request_options
        )
        return _response.data

    def update(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Update an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import EntityGroupUpdateRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.update(
            entity_group_id="entg_a3582b70-fd04-4888-9185-a640ae9048be",
            request=EntityGroupUpdateRequest(
                foreign_id="your-group-id",
                name="AcmeConglomerate",
                email_to_name="acmegroup",
            ),
        )
        """
        _response = self._raw_client.update(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def delete(
        self, entity_group_id: EntityGroupId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mercoa import Mercoa

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.delete(
            entity_group_id="entityGroupId",
        )
        """
        _response = self._raw_client.delete(entity_group_id, request_options=request_options)
        return _response.data

    def get_token(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group in the Mercoa API and iFrame.

        <Warning>We recommend using [this endpoint](/api-reference/entity-group/user/get-token). This will enable features such as approvals and comments.</Warning>

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.get_token(
            entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=TokenGenerationOptions(
                expires_in="1h",
            ),
        )
        """
        _response = self._raw_client.get_token(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def add_entities(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupAddEntitiesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Add entities to an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupAddEntitiesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import EntityGroupAddEntitiesRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.add_entities(
            entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=EntityGroupAddEntitiesRequest(
                entity_ids=[
                    "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                ],
            ),
        )
        """
        _response = self._raw_client.add_entities(entity_group_id, request=request, request_options=request_options)
        return _response.data

    def remove_entities(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupRemoveEntitiesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Remove entities from an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupRemoveEntitiesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        from mercoa import Mercoa
        from mercoa.entity_group_types import EntityGroupRemoveEntitiesRequest

        client = Mercoa(
            token="YOUR_TOKEN",
        )
        client.entity_group.remove_entities(
            entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
            request=EntityGroupRemoveEntitiesRequest(
                entity_ids=[
                    "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                ],
            ),
        )
        """
        _response = self._raw_client.remove_entities(entity_group_id, request=request, request_options=request_options)
        return _response.data


class AsyncEntityGroupClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEntityGroupClient(client_wrapper=client_wrapper)
        self.counterparty = AsyncCounterpartyClient(client_wrapper=client_wrapper)

        self.user = AsyncUserClient(client_wrapper=client_wrapper)

        self.invoice = AsyncInvoiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEntityGroupClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEntityGroupClient
        """
        return self._raw_client

    async def get_all(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[EntityGroupId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupFindResponse:
        """
        Get all entity groups. If using a JWT, will return all groups the entity is part of. If using an API key, will return all groups for the organization.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of results to return. Defaults to 1. Max is 10.

        starting_after : typing.Optional[EntityGroupId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupFindResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.get_all()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(
            limit=limit, starting_after=starting_after, request_options=request_options
        )
        return _response.data

    async def create(
        self, *, request: EntityGroupCreateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> EntityGroupResponse:
        """
        Create an entity group

        Parameters
        ----------
        request : EntityGroupCreateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import EntityGroupCreateRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.create(
                request=EntityGroupCreateRequest(
                    foreign_id="your-group-id",
                    name="AcmeConglomerate",
                    email_to_name="acmegroup",
                    entity_ids=[
                        "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    async def get(
        self,
        entity_group_id: EntityGroupId,
        *,
        return_entity_metadata: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Get an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        return_entity_metadata : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Return simple key/value metadata for the specified keys for the entities in the group. For more complex metadata, use the Metadata API.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.get(
                entity_group_id="entg_a3582b70-fd04-4888-9185-a640ae9048be",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            entity_group_id, return_entity_metadata=return_entity_metadata, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupUpdateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Update an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import EntityGroupUpdateRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.update(
                entity_group_id="entg_a3582b70-fd04-4888-9185-a640ae9048be",
                request=EntityGroupUpdateRequest(
                    foreign_id="your-group-id",
                    name="AcmeConglomerate",
                    email_to_name="acmegroup",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(entity_group_id, request=request, request_options=request_options)
        return _response.data

    async def delete(
        self, entity_group_id: EntityGroupId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.delete(
                entity_group_id="entityGroupId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(entity_group_id, request_options=request_options)
        return _response.data

    async def get_token(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: TokenGenerationOptions,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Generate a JWT token for an entity group with the given options. This token can be used to authenticate to any entity in the entity group in the Mercoa API and iFrame.

        <Warning>We recommend using [this endpoint](/api-reference/entity-group/user/get-token). This will enable features such as approvals and comments.</Warning>

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : TokenGenerationOptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_types import TokenGenerationOptions

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.get_token(
                entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=TokenGenerationOptions(
                    expires_in="1h",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_token(entity_group_id, request=request, request_options=request_options)
        return _response.data

    async def add_entities(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupAddEntitiesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Add entities to an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupAddEntitiesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import EntityGroupAddEntitiesRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.add_entities(
                entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=EntityGroupAddEntitiesRequest(
                    entity_ids=[
                        "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_entities(
            entity_group_id, request=request, request_options=request_options
        )
        return _response.data

    async def remove_entities(
        self,
        entity_group_id: EntityGroupId,
        *,
        request: EntityGroupRemoveEntitiesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EntityGroupResponse:
        """
        Remove entities from an entity group

        Parameters
        ----------
        entity_group_id : EntityGroupId
            Entity Group ID or Entity Group ForeignID

        request : EntityGroupRemoveEntitiesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EntityGroupResponse

        Examples
        --------
        import asyncio

        from mercoa import AsyncMercoa
        from mercoa.entity_group_types import EntityGroupRemoveEntitiesRequest

        client = AsyncMercoa(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.entity_group.remove_entities(
                entity_group_id="entg_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                request=EntityGroupRemoveEntitiesRequest(
                    entity_ids=[
                        "ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                        "ent_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_entities(
            entity_group_id, request=request, request_options=request_options
        )
        return _response.data
