# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .payment_method_event import PaymentMethodEvent


class PaymentMethodEventsResponse(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import (
        PaymentMethodEvent,
        PaymentMethodEventsResponse,
        PaymentMethodResponse_BankAccount,
    )

    PaymentMethodEventsResponse(
        data=[
            PaymentMethodEvent(
                id="evt_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                webhook_ids=["webhook_12345"],
                user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
                updated_by_entity_id="ent_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
                data=PaymentMethodResponse_BankAccount(
                    id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
                    account_name="My Checking Account",
                    bank_name="Chase",
                    routing_number="12345678",
                    account_number="99988767623",
                    account_type="CHECKING",
                    status="VERIFIED",
                    is_default_source=True,
                    is_default_destination=True,
                    supported_currencies=["USD"],
                    metadata={},
                    frozen=False,
                    confirmed_by_entity=True,
                    created_at=datetime.datetime.fromisoformat(
                        "2021-01-01 00:00:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2021-01-01 00:00:00+00:00",
                    ),
                ),
                created_at=datetime.datetime.fromisoformat(
                    "2024-01-01 00:00:00+00:00",
                ),
            )
        ],
        count=1,
        has_more=False,
    )
    """

    data: typing.List[PaymentMethodEvent] = pydantic.Field()
    """
    The list of events
    """

    count: int = pydantic.Field()
    """
    The total number of events
    """

    has_more: typing_extensions.Annotated[bool, FieldMetadata(alias="hasMore")] = pydantic.Field()
    """
    Whether there are more events to fetch
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
