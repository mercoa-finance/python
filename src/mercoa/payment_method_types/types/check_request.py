# This file was auto-generated by Fern from our API Definition.

from .payment_method_base_request import PaymentMethodBaseRequest
import typing_extensions
from ...core.serialization import FieldMetadata
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class CheckRequest(PaymentMethodBaseRequest):
    pay_to_the_order_of: typing_extensions.Annotated[str, FieldMetadata(alias="payToTheOrderOf")]
    address_line_1: typing_extensions.Annotated[str, FieldMetadata(alias="addressLine1")]
    address_line_2: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressLine2")] = None
    city: str
    state_or_province: typing_extensions.Annotated[str, FieldMetadata(alias="stateOrProvince")]
    postal_code: typing_extensions.Annotated[str, FieldMetadata(alias="postalCode")]
    country: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
