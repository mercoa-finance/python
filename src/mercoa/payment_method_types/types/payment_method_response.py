# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from .bank_type import BankType
from .bank_status import BankStatus
from .bank_account_check_options import BankAccountCheckOptions
from .payment_method_id import PaymentMethodId
from .currency_code import CurrencyCode
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .card_type import CardType
from .card_brand import CardBrand
from .custom_payment_method_schema_id import CustomPaymentMethodSchemaId
from .custom_payment_method_schema_response import CustomPaymentMethodSchemaResponse
from .wallet_balance import WalletBalance


class PaymentMethodResponse_BankAccount(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["bankAccount"] = "bankAccount"
    account_name: typing_extensions.Annotated[str, FieldMetadata(alias="accountName")]
    bank_name: typing_extensions.Annotated[str, FieldMetadata(alias="bankName")]
    routing_number: typing_extensions.Annotated[str, FieldMetadata(alias="routingNumber")]
    account_number: typing_extensions.Annotated[str, FieldMetadata(alias="accountNumber")]
    account_type: typing_extensions.Annotated[BankType, FieldMetadata(alias="accountType")]
    status: BankStatus
    check_options: typing_extensions.Annotated[
        typing.Optional[BankAccountCheckOptions], FieldMetadata(alias="checkOptions")
    ] = None
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodResponse_Card(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["card"] = "card"
    card_type: typing_extensions.Annotated[CardType, FieldMetadata(alias="cardType")]
    card_brand: typing_extensions.Annotated[CardBrand, FieldMetadata(alias="cardBrand")]
    last_four: typing_extensions.Annotated[str, FieldMetadata(alias="lastFour")]
    exp_month: typing_extensions.Annotated[str, FieldMetadata(alias="expMonth")]
    exp_year: typing_extensions.Annotated[str, FieldMetadata(alias="expYear")]
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodResponse_Check(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["check"] = "check"
    pay_to_the_order_of: typing_extensions.Annotated[str, FieldMetadata(alias="payToTheOrderOf")]
    address_line_1: typing_extensions.Annotated[str, FieldMetadata(alias="addressLine1")]
    address_line_2: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressLine2")] = None
    city: str
    state_or_province: typing_extensions.Annotated[str, FieldMetadata(alias="stateOrProvince")]
    postal_code: typing_extensions.Annotated[str, FieldMetadata(alias="postalCode")]
    country: str
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodResponse_Custom(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["custom"] = "custom"
    foreign_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="foreignId")] = None
    account_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountName")] = None
    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = None
    available_balance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="availableBalance")] = (
        None
    )
    schema_id: typing_extensions.Annotated[CustomPaymentMethodSchemaId, FieldMetadata(alias="schemaId")]
    schema_: typing_extensions.Annotated[CustomPaymentMethodSchemaResponse, FieldMetadata(alias="schema")]
    data: typing.Dict[str, str]
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodResponse_OffPlatform(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["offPlatform"] = "offPlatform"
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodResponse_Utility(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["utility"] = "utility"
    utility_id: typing_extensions.Annotated[str, FieldMetadata(alias="utilityId")]
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodResponse_Wallet(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

    PaymentMethodResponse_BankAccount(
        id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        account_name="My Checking Account",
        bank_name="Chase",
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
        status="VERIFIED",
        is_default_source=True,
        is_default_destination=True,
        supported_currencies=["USD"],
        metadata={},
        frozen=False,
        confirmed_by_entity=True,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    type: typing.Literal["wallet"] = "wallet"
    available_balance: typing_extensions.Annotated[WalletBalance, FieldMetadata(alias="availableBalance")]
    pending_balance: typing_extensions.Annotated[WalletBalance, FieldMetadata(alias="pendingBalance")]
    id: PaymentMethodId
    is_default_source: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultSource")]
    is_default_destination: typing_extensions.Annotated[bool, FieldMetadata(alias="isDefaultDestination")]
    supported_currencies: typing_extensions.Annotated[
        typing.List[CurrencyCode], FieldMetadata(alias="supportedCurrencies")
    ]
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: bool
    metadata: typing.Dict[str, str]
    confirmed_by_entity: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="confirmedByEntity")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
import datetime

from mercoa.payment_method_types import PaymentMethodResponse_BankAccount

PaymentMethodResponse_BankAccount(
    id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
    account_name="My Checking Account",
    bank_name="Chase",
    routing_number="12345678",
    account_number="99988767623",
    account_type="CHECKING",
    status="VERIFIED",
    is_default_source=True,
    is_default_destination=True,
    supported_currencies=["USD"],
    metadata={},
    frozen=False,
    confirmed_by_entity=True,
    created_at=datetime.datetime.fromisoformat(
        "2021-01-01 00:00:00+00:00",
    ),
    updated_at=datetime.datetime.fromisoformat(
        "2021-01-01 00:00:00+00:00",
    ),
)
"""
PaymentMethodResponse = typing.Union[
    PaymentMethodResponse_BankAccount,
    PaymentMethodResponse_Card,
    PaymentMethodResponse_Check,
    PaymentMethodResponse_Custom,
    PaymentMethodResponse_OffPlatform,
    PaymentMethodResponse_Utility,
    PaymentMethodResponse_Wallet,
]
