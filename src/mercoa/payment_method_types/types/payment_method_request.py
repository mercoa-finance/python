# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from .bank_type import BankType
from .plaid_link_request import PlaidLinkRequest
from .bank_account_check_options import BankAccountCheckOptions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .card_type import CardType
from .card_brand import CardBrand
from .custom_payment_method_schema_id import CustomPaymentMethodSchemaId


class PaymentMethodRequest_BankAccount(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

    PaymentMethodRequest_BankAccount(
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
    )
    """

    type: typing.Literal["bankAccount"] = "bankAccount"
    account_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountName")] = None
    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = None
    routing_number: typing_extensions.Annotated[str, FieldMetadata(alias="routingNumber")]
    account_number: typing_extensions.Annotated[str, FieldMetadata(alias="accountNumber")]
    account_type: typing_extensions.Annotated[BankType, FieldMetadata(alias="accountType")]
    plaid: typing.Optional[PlaidLinkRequest] = None
    check_options: typing_extensions.Annotated[
        typing.Optional[BankAccountCheckOptions], FieldMetadata(alias="checkOptions")
    ] = None
    default_source: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defaultSource")] = None
    default_destination: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defaultDestination")
    ] = None
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: typing.Optional[bool] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodRequest_Card(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

    PaymentMethodRequest_BankAccount(
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
    )
    """

    type: typing.Literal["card"] = "card"
    card_type: typing_extensions.Annotated[CardType, FieldMetadata(alias="cardType")]
    card_brand: typing_extensions.Annotated[CardBrand, FieldMetadata(alias="cardBrand")]
    last_four: typing_extensions.Annotated[str, FieldMetadata(alias="lastFour")]
    exp_month: typing_extensions.Annotated[str, FieldMetadata(alias="expMonth")]
    exp_year: typing_extensions.Annotated[str, FieldMetadata(alias="expYear")]
    token: str
    default_source: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defaultSource")] = None
    default_destination: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defaultDestination")
    ] = None
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: typing.Optional[bool] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodRequest_Check(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

    PaymentMethodRequest_BankAccount(
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
    )
    """

    type: typing.Literal["check"] = "check"
    pay_to_the_order_of: typing_extensions.Annotated[str, FieldMetadata(alias="payToTheOrderOf")]
    address_line_1: typing_extensions.Annotated[str, FieldMetadata(alias="addressLine1")]
    address_line_2: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressLine2")] = None
    city: str
    state_or_province: typing_extensions.Annotated[str, FieldMetadata(alias="stateOrProvince")]
    postal_code: typing_extensions.Annotated[str, FieldMetadata(alias="postalCode")]
    country: str
    default_source: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defaultSource")] = None
    default_destination: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defaultDestination")
    ] = None
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: typing.Optional[bool] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodRequest_Custom(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

    PaymentMethodRequest_BankAccount(
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
    )
    """

    type: typing.Literal["custom"] = "custom"
    foreign_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="foreignId")] = None
    account_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountName")] = None
    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = None
    available_balance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="availableBalance")] = (
        None
    )
    schema_id: typing_extensions.Annotated[CustomPaymentMethodSchemaId, FieldMetadata(alias="schemaId")]
    data: typing.Dict[str, str]
    default_source: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defaultSource")] = None
    default_destination: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defaultDestination")
    ] = None
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: typing.Optional[bool] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodRequest_OffPlatform(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

    PaymentMethodRequest_BankAccount(
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
    )
    """

    type: typing.Literal["offPlatform"] = "offPlatform"
    default_source: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defaultSource")] = None
    default_destination: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defaultDestination")
    ] = None
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: typing.Optional[bool] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PaymentMethodRequest_Utility(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

    PaymentMethodRequest_BankAccount(
        routing_number="12345678",
        account_number="99988767623",
        account_type="CHECKING",
    )
    """

    type: typing.Literal["utility"] = "utility"
    utility_id: typing_extensions.Annotated[str, FieldMetadata(alias="utilityId")]
    default_source: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="defaultSource")] = None
    default_destination: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="defaultDestination")
    ] = None
    external_accounting_system_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalAccountingSystemId")
    ] = None
    frozen: typing.Optional[bool] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from mercoa.payment_method_types import PaymentMethodRequest_BankAccount

PaymentMethodRequest_BankAccount(
    routing_number="12345678",
    account_number="99988767623",
    account_type="CHECKING",
)
"""
PaymentMethodRequest = typing.Union[
    PaymentMethodRequest_BankAccount,
    PaymentMethodRequest_Card,
    PaymentMethodRequest_Check,
    PaymentMethodRequest_Custom,
    PaymentMethodRequest_OffPlatform,
    PaymentMethodRequest_Utility,
]
