# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...entity_types.types.entity_id import EntityId
from .payment_method_id import PaymentMethodId
from .wallet_balance import WalletBalance


class WalletBalanceResponse(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.payment_method_types import WalletBalance, WalletBalanceResponse

    WalletBalanceResponse(
        payment_method_id="pm_4794d597-70dc-4fec-b6ec-c5988e759769",
        entity_id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
        available_balance=WalletBalance(
            amount=100.0,
            currency="USD",
        ),
        pending_balance=WalletBalance(
            amount=5.0,
            currency="USD",
        ),
    )
    """

    payment_method_id: typing_extensions.Annotated[PaymentMethodId, FieldMetadata(alias="paymentMethodId")] = (
        pydantic.Field()
    )
    """
    The ID of the wallet payment method.
    """

    entity_id: typing_extensions.Annotated[EntityId, FieldMetadata(alias="entityId")] = pydantic.Field()
    """
    The ID of the entity that this wallet belongs to.
    """

    available_balance: typing_extensions.Annotated[WalletBalance, FieldMetadata(alias="availableBalance")] = (
        pydantic.Field()
    )
    """
    The available balance in this wallet.
    """

    pending_balance: typing_extensions.Annotated[WalletBalance, FieldMetadata(alias="pendingBalance")] = (
        pydantic.Field()
    )
    """
    The pending balance in this wallet.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
