# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class BnplPaymentSourceOptions(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import BnplPaymentSourceOptions

    BnplPaymentSourceOptions(
        installments_start_date="2025-06-18",
        deferment_weeks=8,
        accepted_terms=True,
    )
    """

    installments_start_date: typing_extensions.Annotated[str, FieldMetadata(alias="installmentsStartDate")] = (
        pydantic.Field()
    )
    """
    The start date for installments in YYYY-MM-DD format
    """

    deferment_weeks: typing_extensions.Annotated[int, FieldMetadata(alias="defermentWeeks")] = pydantic.Field()
    """
    The number of weeks to defer repayment
    """

    accepted_terms: typing_extensions.Annotated[bool, FieldMetadata(alias="acceptedTerms")] = pydantic.Field()
    """
    Whether the user has agreed to the BNPL terms
    """

    loan_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="loanId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the loan to use for the BNPL payment.
    """

    downpayment_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="downpaymentId")] = (
        pydantic.Field(default=None)
    )
    """
    The ID of the downpayment to use for the BNPL payment.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
