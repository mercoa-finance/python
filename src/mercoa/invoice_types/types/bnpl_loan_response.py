# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from .bnpl_loan_status import BnplLoanStatus
from .bnpl_outstanding_balance import BnplOutstandingBalance
import typing
from .bnpl_loan_installment import BnplLoanInstallment
from .bnpl_cadence import BnplCadence
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class BnplLoanResponse(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import (
        BnplInstallmentTotalPaid,
        BnplLoanInstallment,
        BnplLoanResponse,
        BnplOutstandingBalance,
    )

    BnplLoanResponse(
        loan_id="684adb5d70a01b00596a3106",
        business_external_id="ent_9a718f18-cd03-4b4d-98a6-32248969cbac",
        due_date=1752724800000,
        original_principal_balance=914,
        draw_date=1749736285033,
        repaid_amount=0,
        payment_method_id="68483ffc9b7d57005896805d",
        repayment_method_id="684adaf3cf8a670059e7f044",
        status="PENDING",
        outstanding_balance=BnplOutstandingBalance(
            principal_balance=823,
            fee_balance=13,
            total_balance=927,
            late_fee_balance=0,
        ),
        terms_agreement_file="https://persist-agreement-signature-oatfi-api-stg.s3.us-east-1.amazonaws.com/loan%3A%3A684adb5d70a01b00596a3106-1749736285241.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAXHRI6YYRXZIPAOTZ%2F20250612%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250612T135329Z&X-Amz-Expires=900&X-Amz-Signature=eb7c598665ea380ae24f2911488707e72f5b1fd9bf6fe42de27e4ded6996dee7&X-Amz-SignedHeaders=host&x-id=GetObject",
        invoice_url="https://persist-invoice-pdf-oatfi-api-stg.s3.us-east-1.amazonaws.com/invoice_pdf_evidence/682354a387e0050058fbff2e/684adb5d70a01b00596a3106_2025-06-12T13%3A51%3A25.067Z.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAXHRI6YYRXZIPAOTZ%2F20250612%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250612T135329Z&X-Amz-Expires=900&X-Amz-Signature=337e598acf2feaff5b234a3ecad49d6667850c47dbacb888e6ebd75224e10f74&X-Amz-SignedHeaders=host&x-id=GetObject",
        invoice_amount=914,
        invoice_external_id="in_5c0e0b6c-6348-47e4-b39b-97e3d69edabd",
        invoice_due_date=1749709258847,
        down_payment_amount=91,
        cadence="WEEKLY",
        base_fee_rate=1.339283,
        installments=[
            BnplLoanInstallment(
                number=0,
                start_date=1749700800000,
                due_date=1749700800000,
                maturity_date=1749700800000,
                outstanding_balance=91,
                amount=91,
                status="PENDING",
                type="DOWN_PAYMENT",
                total_paid=BnplInstallmentTotalPaid(
                    principal_balance=0,
                    due_interest=0,
                    total_late_fees=0,
                    fee_amount=0,
                ),
            ),
            BnplLoanInstallment(
                number=1,
                start_date=1750392000000,
                due_date=1750910400000,
                maturity_date=1751342400000,
                outstanding_balance=209,
                amount=209,
                status="PENDING",
                type="REGULAR",
                total_paid=BnplInstallmentTotalPaid(
                    principal_balance=0,
                    due_interest=0,
                    total_late_fees=0,
                    fee_amount=0,
                ),
            ),
        ],
    )
    """

    loan_id: typing_extensions.Annotated[str, FieldMetadata(alias="loanId")] = pydantic.Field()
    """
    The unique identifier for the loan
    """

    business_external_id: typing_extensions.Annotated[str, FieldMetadata(alias="businessExternalId")] = pydantic.Field()
    """
    The external ID of the business entity
    """

    due_date: typing_extensions.Annotated[int, FieldMetadata(alias="dueDate")] = pydantic.Field()
    """
    The final due date as timestamp in milliseconds
    """

    original_principal_balance: typing_extensions.Annotated[int, FieldMetadata(alias="originalPrincipalBalance")] = (
        pydantic.Field()
    )
    """
    The original principal balance in cents
    """

    draw_date: typing_extensions.Annotated[int, FieldMetadata(alias="drawDate")] = pydantic.Field()
    """
    The date the loan was drawn as timestamp in milliseconds
    """

    repaid_amount: typing_extensions.Annotated[int, FieldMetadata(alias="repaidAmount")] = pydantic.Field()
    """
    The total amount repaid in cents
    """

    payment_method_id: typing_extensions.Annotated[str, FieldMetadata(alias="paymentMethodId")] = pydantic.Field()
    """
    The ID of the payment method used
    """

    repayment_method_id: typing_extensions.Annotated[str, FieldMetadata(alias="repaymentMethodId")] = pydantic.Field()
    """
    The ID of the repayment method
    """

    status: BnplLoanStatus = pydantic.Field()
    """
    The current status of the loan
    """

    outstanding_balance: typing_extensions.Annotated[
        BnplOutstandingBalance, FieldMetadata(alias="outstandingBalance")
    ] = pydantic.Field()
    """
    The current outstanding balance breakdown
    """

    terms_agreement_file: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="termsAgreementFile")
    ] = pydantic.Field(default=None)
    """
    URL to the terms agreement file
    """

    invoice_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="invoiceUrl")] = pydantic.Field(
        default=None
    )
    """
    URL to the invoice PDF
    """

    invoice_amount: typing_extensions.Annotated[int, FieldMetadata(alias="invoiceAmount")] = pydantic.Field()
    """
    The original invoice amount in cents
    """

    invoice_external_id: typing_extensions.Annotated[str, FieldMetadata(alias="invoiceExternalId")] = pydantic.Field()
    """
    The external ID of the associated invoice
    """

    invoice_due_date: typing_extensions.Annotated[int, FieldMetadata(alias="invoiceDueDate")] = pydantic.Field()
    """
    The original invoice due date as timestamp in milliseconds
    """

    down_payment_amount: typing_extensions.Annotated[int, FieldMetadata(alias="downPaymentAmount")] = pydantic.Field()
    """
    The down payment amount in cents
    """

    installments: typing.List[BnplLoanInstallment] = pydantic.Field()
    """
    List of all installments for this loan
    """

    cadence: BnplCadence = pydantic.Field()
    """
    The payment cadence for the loan
    """

    base_fee_rate: typing_extensions.Annotated[float, FieldMetadata(alias="baseFeeRate")] = pydantic.Field()
    """
    The base fee rate as a percentage
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
