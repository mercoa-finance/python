# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from .bnpl_fees import BnplFees
import typing
from .bnpl_installment import BnplInstallment
from .bnpl_day_of_week import BnplDayOfWeek
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class BnplOfferResponse(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import BnplFees, BnplInstallment, BnplOfferResponse

    BnplOfferResponse(
        invoice_amount=120000,
        total_repayment_amount=121687,
        currency="USD",
        down_payment_amount=12000,
        number_of_payments=5,
        first_payment_date="2025-06-18",
        final_payment_date="2025-07-28",
        payment_day_of_week="WEDNESDAY",
        installment_amount=27422,
        finance_fee_rate="1.4% per 28 days",
        fees=BnplFees(
            base_fee_amount=1687,
            base_fee_percentage=1.4058,
        ),
        terms_link="https://dashboard-stg.oatfi.com/terms/6858b8b7e09d9a0057d82e65",
        installments=[
            BnplInstallment(
                number=0,
                due_date="2025-06-18",
                amount=12000,
                type="DOWN_PAYMENT",
            ),
            BnplInstallment(
                number=1,
                due_date="2025-07-02",
                amount=27422,
                type="REGULAR",
            ),
            BnplInstallment(
                number=2,
                due_date="2025-07-09",
                amount=27422,
                type="REGULAR",
            ),
            BnplInstallment(
                number=3,
                due_date="2025-07-16",
                amount=27422,
                type="REGULAR",
            ),
            BnplInstallment(
                number=4,
                due_date="2025-07-23",
                amount=27421,
                type="REGULAR",
            ),
        ],
    )
    """

    invoice_amount: typing_extensions.Annotated[int, FieldMetadata(alias="invoiceAmount")] = pydantic.Field()
    """
    The total amount of the invoice in cents.
    """

    total_repayment_amount: typing_extensions.Annotated[int, FieldMetadata(alias="totalRepaymentAmount")] = (
        pydantic.Field()
    )
    """
    Total amount to be repaid, including fees. In cents.
    """

    currency: str = pydantic.Field()
    """
    The currency code for the amount
    """

    down_payment_amount: typing_extensions.Annotated[int, FieldMetadata(alias="downPaymentAmount")] = pydantic.Field()
    """
    The down payment amount in cents
    """

    number_of_payments: typing_extensions.Annotated[int, FieldMetadata(alias="numberOfPayments")] = pydantic.Field()
    """
    The number of payments/installments
    """

    first_payment_date: typing_extensions.Annotated[str, FieldMetadata(alias="firstPaymentDate")] = pydantic.Field()
    """
    The date of the first payment in YYYY-MM-DD format
    """

    final_payment_date: typing_extensions.Annotated[str, FieldMetadata(alias="finalPaymentDate")] = pydantic.Field()
    """
    The date of the final payment in YYYY-MM-DD format
    """

    fees: BnplFees = pydantic.Field()
    """
    The fees associated with the offer
    """

    terms_link: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="termsLink")] = pydantic.Field(
        default=None
    )
    """
    A link to the terms and conditions for the offer
    """

    installments: typing.List[BnplInstallment] = pydantic.Field()
    """
    A list of all installments, including down payment.
    """

    payment_day_of_week: typing_extensions.Annotated[BnplDayOfWeek, FieldMetadata(alias="paymentDayOfWeek")] = (
        pydantic.Field()
    )
    """
    The day of the week for payments, e.g. "Wednesday"
    """

    installment_amount: typing_extensions.Annotated[int, FieldMetadata(alias="installmentAmount")] = pydantic.Field()
    """
    The amount for each regular installment. The last installment may have a different amount. In cents.
    """

    finance_fee_rate: typing_extensions.Annotated[str, FieldMetadata(alias="financeFeeRate")] = pydantic.Field()
    """
    e.g. "1.5% per 28 days"
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
