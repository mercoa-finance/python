# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...payment_method_types.types.currency_code import CurrencyCode
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class InvoiceLineItemRequestBase(UniversalBaseModel):
    currency: typing.Optional[CurrencyCode] = pydantic.Field(default=None)
    """
    Currency code for the amount. Defaults to USD.
    """

    name: typing.Optional[str] = None
    quantity: typing.Optional[float] = None
    unit_price: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="unitPrice")] = pydantic.Field(
        default=None
    )
    """
    Unit price of the line item in major units. If the entered amount has more decimal places than the currency supports, trailing decimals will be truncated.
    """

    category: typing.Optional[str] = pydantic.Field(default=None)
    """
    Category of the line item.
    """

    service_start_date: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="serviceStartDate")
    ] = None
    service_end_date: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="serviceEndDate")
    ] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None
    gl_account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="glAccountId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of general ledger account associated with this line item.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
