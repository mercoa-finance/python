# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .bnpl_cadence import BnplCadence
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
from .bnpl_day_of_week import BnplDayOfWeek
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class BnplOfferRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import BnplOfferRequest

    BnplOfferRequest(
        cadence="WEEKLY",
        installments_start_date="2025-06-18",
        number_of_installments=4,
        payment_day_of_week="WEDNESDAY",
        down_payment_due_date="2025-06-11",
    )
    """

    cadence: BnplCadence = pydantic.Field()
    """
    The payment cadence for the BNPL offer
    """

    installments_start_date: typing_extensions.Annotated[str, FieldMetadata(alias="installmentsStartDate")] = (
        pydantic.Field()
    )
    """
    The start date for installments in YYYY-MM-DD format
    """

    number_of_installments: typing_extensions.Annotated[int, FieldMetadata(alias="numberOfInstallments")] = (
        pydantic.Field()
    )
    """
    The number of installments
    """

    payment_day_of_week: typing_extensions.Annotated[BnplDayOfWeek, FieldMetadata(alias="paymentDayOfWeek")] = (
        pydantic.Field()
    )
    """
    The day of the week for payments
    """

    down_payment_due_date: typing_extensions.Annotated[str, FieldMetadata(alias="downPaymentDueDate")] = (
        pydantic.Field()
    )
    """
    The due date for the down payment in YYYY-MM-DD format
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
