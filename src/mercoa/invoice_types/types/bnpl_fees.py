# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class BnplFees(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import BnplFees

    BnplFees(
        base_fee_amount=1687,
        base_fee_percentage=1.4058,
    )
    """

    base_fee_amount: typing_extensions.Annotated[int, FieldMetadata(alias="baseFeeAmount")] = pydantic.Field()
    """
    Total fees in cents
    """

    base_fee_percentage: typing_extensions.Annotated[float, FieldMetadata(alias="baseFeePercentage")] = pydantic.Field()
    """
    Fee percentage as a decimal (e.g., 1.4 for 1.4%)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
