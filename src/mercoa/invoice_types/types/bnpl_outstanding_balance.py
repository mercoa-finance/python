# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class BnplOutstandingBalance(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import BnplOutstandingBalance

    BnplOutstandingBalance(
        principal_balance=823,
        fee_balance=13,
        total_balance=927,
        late_fee_balance=0,
    )
    """

    principal_balance: typing_extensions.Annotated[int, FieldMetadata(alias="principalBalance")] = pydantic.Field()
    """
    Outstanding principal balance in cents
    """

    fee_balance: typing_extensions.Annotated[int, FieldMetadata(alias="feeBalance")] = pydantic.Field()
    """
    Outstanding fee balance in cents
    """

    total_balance: typing_extensions.Annotated[int, FieldMetadata(alias="totalBalance")] = pydantic.Field()
    """
    Total outstanding balance in cents
    """

    late_fee_balance: typing_extensions.Annotated[int, FieldMetadata(alias="lateFeeBalance")] = pydantic.Field()
    """
    Outstanding late fee balance in cents
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
