# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .bnpl_installment_total_paid import BnplInstallmentTotalPaid
from .bnpl_installment_type import BnplInstallmentType
from .bnpl_loan_status import BnplLoanStatus


class BnplLoanInstallment(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.invoice_types import BnplInstallmentTotalPaid, BnplLoanInstallment

    BnplLoanInstallment(
        number=0,
        start_date=1749700800000,
        due_date=1749700800000,
        maturity_date=1749700800000,
        outstanding_balance=91,
        amount=91,
        status="PENDING",
        type="DOWN_PAYMENT",
        total_paid=BnplInstallmentTotalPaid(
            principal_balance=0,
            due_interest=0,
            total_late_fees=0,
            fee_amount=0,
        ),
    )
    """

    number: int = pydantic.Field()
    """
    Installment number (0 for down payment)
    """

    start_date: typing_extensions.Annotated[int, FieldMetadata(alias="startDate")] = pydantic.Field()
    """
    Start date as timestamp in milliseconds
    """

    due_date: typing_extensions.Annotated[int, FieldMetadata(alias="dueDate")] = pydantic.Field()
    """
    Due date as timestamp in milliseconds
    """

    maturity_date: typing_extensions.Annotated[int, FieldMetadata(alias="maturityDate")] = pydantic.Field()
    """
    Maturity date as timestamp in milliseconds
    """

    outstanding_balance: typing_extensions.Annotated[int, FieldMetadata(alias="outstandingBalance")] = pydantic.Field()
    """
    Outstanding balance for this installment in cents
    """

    amount: int = pydantic.Field()
    """
    Total amount for this installment in cents
    """

    status: BnplLoanStatus = pydantic.Field()
    """
    Status of this installment
    """

    type: BnplInstallmentType = pydantic.Field()
    """
    Type of installment
    """

    total_paid: typing_extensions.Annotated[BnplInstallmentTotalPaid, FieldMetadata(alias="totalPaid")] = (
        pydantic.Field()
    )
    """
    Total amounts paid for this installment
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
