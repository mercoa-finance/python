# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...payment_method_types.types.currency_code import CurrencyCode
from .comparison import Comparison
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from .entity_id import EntityId
from ...core.serialization import FieldMetadata


class Trigger_Amount(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import Trigger_Amount

    Trigger_Amount(
        amount=100.0,
        currency="USD",
    )
    """

    type: typing.Literal["amount"] = "amount"
    amount: float
    currency: CurrencyCode
    comparison: typing.Optional[Comparison] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Trigger_Vendor(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import Trigger_Amount

    Trigger_Amount(
        amount=100.0,
        currency="USD",
    )
    """

    type: typing.Literal["vendor"] = "vendor"
    vendor_ids: typing_extensions.Annotated[typing.List[EntityId], FieldMetadata(alias="vendorIds")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Trigger_Metadata(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import Trigger_Amount

    Trigger_Amount(
        amount=100.0,
        currency="USD",
    )
    """

    type: typing.Literal["metadata"] = "metadata"
    key: str
    value: typing.List[str]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Trigger_Catchall(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import Trigger_Amount

    Trigger_Amount(
        amount=100.0,
        currency="USD",
    )
    """

    type: typing.Literal["catchall"] = "catchall"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from mercoa.entity_types import Trigger_Amount

Trigger_Amount(
    amount=100.0,
    currency="USD",
)
"""
Trigger = typing.Union[Trigger_Amount, Trigger_Vendor, Trigger_Metadata, Trigger_Catchall]
