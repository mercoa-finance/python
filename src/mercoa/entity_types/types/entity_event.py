# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .entity_event_id import EntityEventId
import pydantic
from .entity_response import EntityResponse
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from .entity_user_id import EntityUserId
from .entity_id import EntityId
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class EntityEvent(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from mercoa.commons import Address, PhoneNumber
    from mercoa.entity_types import (
        BusinessProfileResponse,
        Ein,
        EntityEvent,
        EntityResponse,
        ProfileResponse,
        TaxId,
    )

    EntityEvent(
        id="evt_a0f6ea94-0761-4a5e-a416-3c453cb7eced",
        webhook_ids=["webhook_12345"],
        user_id="user_e24fc81c-c5ee-47e8-af42-4fe29d895506",
        data=EntityResponse(
            id="ent_8545a84e-a45f-41bf-bdf1-33b42a55812c",
            foreign_id="MY-DB-ID-12345",
            name="Acme Inc.",
            email="customer@acme.com",
            accepted_tos=True,
            status="verified",
            is_customer=True,
            is_payor=True,
            is_payee=False,
            is_network_payor=False,
            is_network_payee=False,
            account_type="business",
            updated_at=datetime.datetime.fromisoformat(
                "2024-01-02 00:00:00+00:00",
            ),
            created_at=datetime.datetime.fromisoformat(
                "2024-01-01 00:00:00+00:00",
            ),
            profile=ProfileResponse(
                business=BusinessProfileResponse(
                    email="customer@acme.com",
                    legal_business_name="Acme Inc.",
                    business_type="llc",
                    phone=PhoneNumber(
                        country_code="1",
                        number="4155551234",
                    ),
                    address=Address(
                        address_line_1="123 Main St",
                        address_line_2="Unit 1",
                        city="San Francisco",
                        state_or_province="CA",
                        postal_code="94105",
                        country="US",
                    ),
                    tax_id_provided=True,
                    tax_id=TaxId(
                        ein=Ein(
                            number="12-3456789",
                        ),
                    ),
                    owners_provided=True,
                ),
            ),
        ),
        created_at=datetime.datetime.fromisoformat(
            "2024-01-01 00:00:00+00:00",
        ),
    )
    """

    id: EntityEventId = pydantic.Field()
    """
    The ID of the event
    """

    data: EntityResponse = pydantic.Field()
    """
    The payment method data at the time of the event
    """

    webhook_ids: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="webhookIds")] = pydantic.Field()
    """
    The list of webhook IDs associated with this event
    """

    user_id: typing_extensions.Annotated[typing.Optional[EntityUserId], FieldMetadata(alias="userId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the user who triggered the event
    """

    updated_by_entity_id: typing_extensions.Annotated[
        typing.Optional[EntityId], FieldMetadata(alias="updatedByEntityId")
    ] = pydantic.Field(default=None)
    """
    The ID of the entity that updated the payment method
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The timestamp when the event was created
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
