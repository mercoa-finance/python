# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
from .entity_user_id import EntityUserId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class NotificationPolicyRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import NotificationPolicyRequest

    NotificationPolicyRequest(
        disabled=True,
        additional_roles=[],
    )
    """

    disabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Set to true if the selected notification type should be disabled for this entity
    """

    additional_roles: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="additionalRoles")
    ] = pydantic.Field(default=None)
    """
    List of user roles that should receive notifications in addition to the default users for this notification type
    """

    additional_users: typing_extensions.Annotated[
        typing.Optional[typing.List[EntityUserId]], FieldMetadata(alias="additionalUsers")
    ] = pydantic.Field(default=None)
    """
    List of user IDs that should receive notifications in addition to the default users for this notification type
    """

    notify_payee_counterparty: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="notifyPayeeCounterparty")
    ] = pydantic.Field(default=None)
    """
    Set to true if the selected notification type should be sent to the counterparty if this is a payable invoice.
    """

    notify_payor_counterparty: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="notifyPayorCounterparty")
    ] = pydantic.Field(default=None)
    """
    Set to true if the selected notification type should be sent to the counterparty if this is a receivable invoice.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
