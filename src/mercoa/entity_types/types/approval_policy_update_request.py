# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .approval_policy_id import ApprovalPolicyId
from .rule import Rule
from .trigger import Trigger


class ApprovalPolicyUpdateRequest(UniversalBaseModel):
    """
    Examples
    --------
    from mercoa.entity_types import (
        ApprovalPolicyUpdateRequest,
        IdentifierList_UserList,
        Rule_Approver,
    )

    ApprovalPolicyUpdateRequest(
        trigger=[],
        rule=Rule_Approver(
            num_approvers=2,
            identifier_list=IdentifierList_UserList(
                value=[
                    "usr_8545a84e-a45f-41bf-bdf1-33b42a55812c",
                    "usr_21661ac1-a2a8-4465-a6c0-64474ba8181d",
                ]
            ),
        ),
        upstream_policy_id="root",
    )
    """

    trigger: typing.Optional[typing.List[Trigger]] = None
    rule: typing.Optional[Rule] = None
    upstream_policy_id: typing_extensions.Annotated[
        typing.Optional[ApprovalPolicyId], FieldMetadata(alias="upstreamPolicyId")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
